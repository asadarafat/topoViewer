/*
Package l2nm is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /root/ygot/genutil/names.go
using the following YANG input files:
  - _yangModules/ietf-l2vpn-ntw-vpn-services.yang

Imported modules were sourced from:
*/
package topoengine

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &L2Nm{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// IETFL2VpnNtwVpnServices_VpnService represents the /ietf-l2vpn-ntw-vpn-services/vpn-service YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService struct {
	BgpAdEnabled             *bool                                                        `path:"bgp-ad-enabled" module:"ietf-l2vpn-ntw-vpn-services"`
	CustomerName             *string                                                      `path:"customer-name" module:"ietf-l2vpn-ntw-vpn-services"`
	GlobalParametersProfiles *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles `path:"global-parameters-profiles" module:"ietf-l2vpn-ntw-vpn-services"`
	ParentServiceId          *string                                                      `path:"parent-service-id" module:"ietf-l2vpn-ntw-vpn-services"`
	SignalingType            E_IETFVpnCommon_VpnSignalingType                             `path:"signaling-type" module:"ietf-l2vpn-ntw-vpn-services"`
	Status                   *IETFL2VpnNtwVpnServices_VpnService_Status                   `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
	UnderlayTransport        *IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport        `path:"underlay-transport" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnDescription           *string                                                      `path:"vpn-description" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnName                  *string                                                      `path:"vpn-name" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnNodes                 *IETFL2VpnNtwVpnServices_VpnService_VpnNodes                 `path:"vpn-nodes" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnServiceTopology       E_IETFVpnCommon_VpnTopology                                  `path:"vpn-service-topology" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnType                  E_IETFVpnCommon_ServiceType                                  `path:"vpn-type" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService.
func (*IETFL2VpnNtwVpnServices_VpnService) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles struct {
	GlobalParametersProfile map[string]*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile `path:"global-parameters-profile" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles) IsYANGGoStruct() {}

// NewGlobalParametersProfile creates a new entry in the GlobalParametersProfile list of the
// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles) NewGlobalParametersProfile(ProfileId string) (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GlobalParametersProfile == nil {
		t.GlobalParametersProfile = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile)
	}

	key := ProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GlobalParametersProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GlobalParametersProfile", key)
	}

	t.GlobalParametersProfile[key] = &IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile{
		ProfileId: &ProfileId,
	}

	return t.GlobalParametersProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile struct {
	CeVlanCosPreservation  *bool                                                                                                    `path:"ce-vlan-cos-preservation" module:"ietf-l2vpn-ntw-vpn-services"`
	CeVlanPreservation     *bool                                                                                                    `path:"ce-vlan-preservation" module:"ietf-l2vpn-ntw-vpn-services"`
	ControlWordNegotiation *bool                                                                                                    `path:"control-word-negotiation" module:"ietf-l2vpn-ntw-vpn-services"`
	LocalAutonomousSystem  *uint32                                                                                                  `path:"local-autonomous-system" module:"ietf-l2vpn-ntw-vpn-services"`
	MacPolicies            *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies         `path:"mac-policies" module:"ietf-l2vpn-ntw-vpn-services"`
	MulticastLike          *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike       `path:"multicast-like" module:"ietf-l2vpn-ntw-vpn-services"`
	NoRd                   YANGEmpty                                                                                                `path:"no-rd" module:"ietf-l2vpn-ntw-vpn-services"`
	ProfileId              *string                                                                                                  `path:"profile-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Rd                     *string                                                                                                  `path:"rd" module:"ietf-l2vpn-ntw-vpn-services"`
	RdAuto                 *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto              `path:"rd-auto" module:"ietf-l2vpn-ntw-vpn-services"`
	RdAutoSuffix           *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix        `path:"rd-auto-suffix" module:"ietf-l2vpn-ntw-vpn-services"`
	RdSuffix               *uint16                                                                                                  `path:"rd-suffix" module:"ietf-l2vpn-ntw-vpn-services"`
	SvcMtu                 *uint32                                                                                                  `path:"svc-mtu" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnPolicies            *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies         `path:"vpn-policies" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnTarget              map[uint8]*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget `path:"vpn-target" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile) IsYANGGoStruct() {
}

// NewVpnTarget creates a new entry in the VpnTarget list of the
// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile) NewVpnTarget(Id uint8) (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VpnTarget == nil {
		t.VpnTarget = make(map[uint8]*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VpnTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VpnTarget", key)
	}

	t.VpnTarget[key] = &IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget{
		Id: &Id,
	}

	return t.VpnTarget[key], nil
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProfileId == nil {
		return nil, fmt.Errorf("nil value for key ProfileId")
	}

	return map[string]interface{}{
		"profile-id": *t.ProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/mac-policies YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies struct {
	MacAddrLimit      *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit      `path:"mac-addr-limit" module:"ietf-l2vpn-ntw-vpn-services"`
	MacLoopPrevention *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention `path:"mac-loop-prevention" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/mac-policies/mac-addr-limit YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit struct {
	Action       E_IETFL2VpnNtwVpnServices_MacAction `path:"action" module:"ietf-l2vpn-ntw-vpn-services"`
	MacNumLimit  *uint16                             `path:"mac-num-limit" module:"ietf-l2vpn-ntw-vpn-services"`
	TimeInterval *uint32                             `path:"time-interval" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/mac-policies/mac-loop-prevention YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention struct {
	Frequency      *uint32                                      `path:"frequency" module:"ietf-l2vpn-ntw-vpn-services"`
	ProtectionType E_IETFL2VpnNtwVpnServices_LoopPreventionType `path:"protection-type" module:"ietf-l2vpn-ntw-vpn-services"`
	RetryTimer     *uint32                                      `path:"retry-timer" module:"ietf-l2vpn-ntw-vpn-services"`
	Window         *uint32                                      `path:"window" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/multicast-like YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike struct {
	CustomerTreeFlavors *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors `path:"customer-tree-flavors" module:"ietf-l2vpn-ntw-vpn-services"`
	Enabled             *bool                                                                                                                  `path:"enabled" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/multicast-like/customer-tree-flavors YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors struct {
	TreeFlavor []E_IETFVpnCommon_MulticastTreeType `path:"tree-flavor" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/rd-auto YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto struct {
	Auto           YANGEmpty `path:"auto" module:"ietf-l2vpn-ntw-vpn-services"`
	AutoAssignedRd *string   `path:"auto-assigned-rd" module:"ietf-l2vpn-ntw-vpn-services"`
	RdPoolName     *string   `path:"rd-pool-name" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAuto) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/rd-auto-suffix YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix struct {
	Auto                 YANGEmpty `path:"auto" module:"ietf-l2vpn-ntw-vpn-services"`
	AutoAssignedRdSuffix *uint16   `path:"auto-assigned-rd-suffix" module:"ietf-l2vpn-ntw-vpn-services"`
	RdPoolName           *string   `path:"rd-pool-name" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_RdAutoSuffix) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/vpn-policies YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies struct {
	ExportPolicy *string `path:"export-policy" module:"ietf-l2vpn-ntw-vpn-services"`
	ImportPolicy *string `path:"import-policy" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnPolicies) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/vpn-target YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget struct {
	Id              *uint8                                                                                                                 `path:"id" module:"ietf-l2vpn-ntw-vpn-services"`
	RouteTargetType E_IETFVpnCommon_RouteTargetType                                                                                        `path:"route-target-type" module:"ietf-l2vpn-ntw-vpn-services"`
	RouteTargets    map[string]*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets `path:"route-targets" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget) IsYANGGoStruct() {
}

// NewRouteTargets creates a new entry in the RouteTargets list of the
// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget) NewRouteTargets(RouteTarget string) (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTargets == nil {
		t.RouteTargets = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets)
	}

	key := RouteTarget

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTargets[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTargets", key)
	}

	t.RouteTargets[key] = &IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets{
		RouteTarget: &RouteTarget,
	}

	return t.RouteTargets[key], nil
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/global-parameters-profiles/global-parameters-profile/vpn-target/route-targets YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets struct {
	RouteTarget *string `path:"route-target" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouteTarget == nil {
		return nil, fmt.Errorf("nil value for key RouteTarget")
	}

	return map[string]interface{}{
		"route-target": *t.RouteTarget,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets.
func (*IETFL2VpnNtwVpnServices_VpnService_GlobalParametersProfiles_GlobalParametersProfile_VpnTarget_RouteTargets) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_Status represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_Status struct {
	AdminStatus *IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus `path:"admin-status" module:"ietf-l2vpn-ntw-vpn-services"`
	OperStatus  *IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus  `path:"oper-status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_Status implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_Status) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_Status"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_Status.
func (*IETFL2VpnNtwVpnServices_VpnService_Status) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/status/admin-status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus struct {
	LastChange *string                              `path:"last-change" module:"ietf-l2vpn-ntw-vpn-services"`
	Status     E_IETFVpnCommon_AdministrativeStatus `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus.
func (*IETFL2VpnNtwVpnServices_VpnService_Status_AdminStatus) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/status/oper-status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus struct {
	LastChange *string                           `path:"last-change" module:"ietf-l2vpn-ntw-vpn-services"`
	Status     E_IETFVpnCommon_OperationalStatus `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus.
func (*IETFL2VpnNtwVpnServices_VpnService_Status_OperStatus) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/underlay-transport YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport struct {
	InstanceType        E_IETFVpnCommon_TransportInstanceType `path:"instance-type" module:"ietf-l2vpn-ntw-vpn-services"`
	Protocol            []E_IETFVpnCommon_ProtocolType        `path:"protocol" module:"ietf-l2vpn-ntw-vpn-services"`
	TransportInstanceId *string                               `path:"transport-instance-id" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport.
func (*IETFL2VpnNtwVpnServices_VpnService_UnderlayTransport) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes struct {
	VpnNode map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode `path:"vpn-node" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes) IsYANGGoStruct() {}

// NewVpnNode creates a new entry in the VpnNode list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes) NewVpnNode(VpnNodeId string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VpnNode == nil {
		t.VpnNode = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode)
	}

	key := VpnNodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VpnNode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VpnNode", key)
	}

	t.VpnNode[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode{
		VpnNodeId: &VpnNodeId,
	}

	return t.VpnNode[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode struct {
	ActiveGlobalParametersProfiles *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles `path:"active-global-parameters-profiles" module:"ietf-l2vpn-ntw-vpn-services"`
	BgpAutoDiscovery               *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery               `path:"bgp-auto-discovery" module:"ietf-l2vpn-ntw-vpn-services"`
	Description                    *string                                                                             `path:"description" module:"ietf-l2vpn-ntw-vpn-services"`
	NeId                           *string                                                                             `path:"ne-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Role                           E_IETFVpnCommon_Role                                                                `path:"role" module:"ietf-l2vpn-ntw-vpn-services"`
	RouterId                       *string                                                                             `path:"router-id" module:"ietf-l2vpn-ntw-vpn-services"`
	SignalingOption                *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption                `path:"signaling-option" module:"ietf-l2vpn-ntw-vpn-services"`
	Status                         *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status                         `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnNetworkAccesses             *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses             `path:"vpn-network-accesses" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnNodeId                      *string                                                                             `path:"vpn-node-id" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VpnNodeId == nil {
		return nil, fmt.Errorf("nil value for key VpnNodeId")
	}

	return map[string]interface{}{
		"vpn-node-id": *t.VpnNodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles struct {
	GlobalParametersProfile map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile `path:"global-parameters-profile" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles) IsYANGGoStruct() {
}

// NewGlobalParametersProfile creates a new entry in the GlobalParametersProfile list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles) NewGlobalParametersProfile(ProfileId string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GlobalParametersProfile == nil {
		t.GlobalParametersProfile = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile)
	}

	key := ProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GlobalParametersProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GlobalParametersProfile", key)
	}

	t.GlobalParametersProfile[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile{
		ProfileId: &ProfileId,
	}

	return t.GlobalParametersProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile struct {
	CeVlanCosPreservation  *bool                                                                                                                     `path:"ce-vlan-cos-preservation" module:"ietf-l2vpn-ntw-vpn-services"`
	CeVlanPreservation     *bool                                                                                                                     `path:"ce-vlan-preservation" module:"ietf-l2vpn-ntw-vpn-services"`
	ControlWordNegotiation *bool                                                                                                                     `path:"control-word-negotiation" module:"ietf-l2vpn-ntw-vpn-services"`
	LocalAutonomousSystem  *uint32                                                                                                                   `path:"local-autonomous-system" module:"ietf-l2vpn-ntw-vpn-services"`
	MacPolicies            *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies   `path:"mac-policies" module:"ietf-l2vpn-ntw-vpn-services"`
	MulticastLike          *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike `path:"multicast-like" module:"ietf-l2vpn-ntw-vpn-services"`
	ProfileId              *string                                                                                                                   `path:"profile-id" module:"ietf-l2vpn-ntw-vpn-services"`
	SvcMtu                 *uint32                                                                                                                   `path:"svc-mtu" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProfileId == nil {
		return nil, fmt.Errorf("nil value for key ProfileId")
	}

	return map[string]interface{}{
		"profile-id": *t.ProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile/mac-policies YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies struct {
	MacAddrLimit      *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit      `path:"mac-addr-limit" module:"ietf-l2vpn-ntw-vpn-services"`
	MacLoopPrevention *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention `path:"mac-loop-prevention" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile/mac-policies/mac-addr-limit YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit struct {
	Action       E_IETFL2VpnNtwVpnServices_MacAction `path:"action" module:"ietf-l2vpn-ntw-vpn-services"`
	MacNumLimit  *uint16                             `path:"mac-num-limit" module:"ietf-l2vpn-ntw-vpn-services"`
	TimeInterval *uint32                             `path:"time-interval" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacAddrLimit) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile/mac-policies/mac-loop-prevention YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention struct {
	Frequency      *uint32                                      `path:"frequency" module:"ietf-l2vpn-ntw-vpn-services"`
	ProtectionType E_IETFL2VpnNtwVpnServices_LoopPreventionType `path:"protection-type" module:"ietf-l2vpn-ntw-vpn-services"`
	RetryTimer     *uint32                                      `path:"retry-timer" module:"ietf-l2vpn-ntw-vpn-services"`
	Window         *uint32                                      `path:"window" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MacPolicies_MacLoopPrevention) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile/multicast-like YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike struct {
	CustomerTreeFlavors *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors `path:"customer-tree-flavors" module:"ietf-l2vpn-ntw-vpn-services"`
	Enabled             *bool                                                                                                                                         `path:"enabled" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile/multicast-like/customer-tree-flavors YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors struct {
	TreeFlavor []E_IETFVpnCommon_MulticastTreeType `path:"tree-flavor" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_ActiveGlobalParametersProfiles_GlobalParametersProfile_MulticastLike_CustomerTreeFlavors) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/bgp-auto-discovery YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery struct {
	AutoRouteTarget *string                                                                                   `path:"auto-route-target" module:"ietf-l2vpn-ntw-vpn-services"`
	AutoRtEnable    *bool                                                                                     `path:"auto-rt-enable" module:"ietf-l2vpn-ntw-vpn-services"`
	EvpnType        *string                                                                                   `path:"evpn-type" module:"ietf-l2vpn-ntw-vpn-services"`
	NoRd            YANGEmpty                                                                                 `path:"no-rd" module:"ietf-l2vpn-ntw-vpn-services"`
	Rd              *string                                                                                   `path:"rd" module:"ietf-l2vpn-ntw-vpn-services"`
	RdAuto          *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto              `path:"rd-auto" module:"ietf-l2vpn-ntw-vpn-services"`
	RdAutoSuffix    *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix        `path:"rd-auto-suffix" module:"ietf-l2vpn-ntw-vpn-services"`
	RdSuffix        *uint16                                                                                   `path:"rd-suffix" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnId           *string                                                                                   `path:"vpn-id" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnPolicies     *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies         `path:"vpn-policies" module:"ietf-l2vpn-ntw-vpn-services"`
	VpnTarget       map[uint8]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget `path:"vpn-target" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery) IsYANGGoStruct() {}

// NewVpnTarget creates a new entry in the VpnTarget list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery) NewVpnTarget(Id uint8) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VpnTarget == nil {
		t.VpnTarget = make(map[uint8]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VpnTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VpnTarget", key)
	}

	t.VpnTarget[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget{
		Id: &Id,
	}

	return t.VpnTarget[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/bgp-auto-discovery/rd-auto YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto struct {
	Auto           YANGEmpty `path:"auto" module:"ietf-l2vpn-ntw-vpn-services"`
	AutoAssignedRd *string   `path:"auto-assigned-rd" module:"ietf-l2vpn-ntw-vpn-services"`
	RdPoolName     *string   `path:"rd-pool-name" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAuto) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/bgp-auto-discovery/rd-auto-suffix YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix struct {
	Auto                 YANGEmpty `path:"auto" module:"ietf-l2vpn-ntw-vpn-services"`
	AutoAssignedRdSuffix *uint16   `path:"auto-assigned-rd-suffix" module:"ietf-l2vpn-ntw-vpn-services"`
	RdPoolName           *string   `path:"rd-pool-name" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_RdAutoSuffix) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/bgp-auto-discovery/vpn-policies YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies struct {
	ExportPolicy *string `path:"export-policy" module:"ietf-l2vpn-ntw-vpn-services"`
	ImportPolicy *string `path:"import-policy" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnPolicies) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/bgp-auto-discovery/vpn-target YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget struct {
	Id              *uint8                                                                                                  `path:"id" module:"ietf-l2vpn-ntw-vpn-services"`
	RouteTargetType E_IETFVpnCommon_RouteTargetType                                                                         `path:"route-target-type" module:"ietf-l2vpn-ntw-vpn-services"`
	RouteTargets    map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets `path:"route-targets" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget) IsYANGGoStruct() {
}

// NewRouteTargets creates a new entry in the RouteTargets list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget) NewRouteTargets(RouteTarget string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTargets == nil {
		t.RouteTargets = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets)
	}

	key := RouteTarget

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTargets[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTargets", key)
	}

	t.RouteTargets[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets{
		RouteTarget: &RouteTarget,
	}

	return t.RouteTargets[key], nil
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/bgp-auto-discovery/vpn-target/route-targets YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets struct {
	RouteTarget *string `path:"route-target" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouteTarget == nil {
		return nil, fmt.Errorf("nil value for key RouteTarget")
	}

	return map[string]interface{}{
		"route-target": *t.RouteTarget,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_BgpAutoDiscovery_VpnTarget_RouteTargets) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption struct {
	AdvertiseMtu         *bool                                                                             `path:"advertise-mtu" module:"ietf-l2vpn-ntw-vpn-services"`
	CeId                 *uint16                                                                           `path:"ce-id" module:"ietf-l2vpn-ntw-vpn-services"`
	CeRange              *uint16                                                                           `path:"ce-range" module:"ietf-l2vpn-ntw-vpn-services"`
	EvpnPolicies         *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies `path:"evpn-policies" module:"ietf-l2vpn-ntw-vpn-services"`
	EvpnType             *string                                                                           `path:"evpn-type" module:"ietf-l2vpn-ntw-vpn-services"`
	LdpOrL2Tp            *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp    `path:"ldp-or-l2tp" module:"ietf-l2vpn-ntw-vpn-services"`
	MtuAllowMismatch     *bool                                                                             `path:"mtu-allow-mismatch" module:"ietf-l2vpn-ntw-vpn-services"`
	PwEncapsulationType  E_IanaBgpL2Encaps_BgpL2EncapsType                                                 `path:"pw-encapsulation-type" module:"ietf-l2vpn-ntw-vpn-services"`
	ServiceInterfaceType E_IETFL2VpnNtwVpnServices_EvpnServiceType                                         `path:"service-interface-type" module:"ietf-l2vpn-ntw-vpn-services"`
	SignalingType        *string                                                                           `path:"signaling-type" module:"ietf-l2vpn-ntw-vpn-services"`
	VplsInstance         *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance `path:"vpls-instance" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/evpn-policies YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies struct {
	ArpProxy                      *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy      `path:"arp-proxy" module:"ietf-l2vpn-ntw-vpn-services"`
	BumManagement                 *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement `path:"bum-management" module:"ietf-l2vpn-ntw-vpn-services"`
	FloodUnknownUnicastSupression *bool                                                                                           `path:"flood-unknown-unicast-supression" module:"ietf-l2vpn-ntw-vpn-services"`
	IngressReplication            *bool                                                                                           `path:"ingress-replication" module:"ietf-l2vpn-ntw-vpn-services"`
	MacLearningMode               E_IETFL2VpnNtwVpnServices_MacLearningMode                                                       `path:"mac-learning-mode" module:"ietf-l2vpn-ntw-vpn-services"`
	NdProxy                       *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy       `path:"nd-proxy" module:"ietf-l2vpn-ntw-vpn-services"`
	P2MpReplication               *bool                                                                                           `path:"p2mp-replication" module:"ietf-l2vpn-ntw-vpn-services"`
	Pbb                           *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb           `path:"pbb" module:"ietf-l2vpn-ntw-vpn-services"`
	UnderlayMulticast             *bool                                                                                           `path:"underlay-multicast" module:"ietf-l2vpn-ntw-vpn-services"`
	VpwsVlanAware                 *bool                                                                                           `path:"vpws-vlan-aware" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/evpn-policies/arp-proxy YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy struct {
	ArpSuppression               *bool   `path:"arp-suppression" module:"ietf-l2vpn-ntw-vpn-services"`
	DuplicateIpDetectionInterval *uint16 `path:"duplicate-ip-detection-interval" module:"ietf-l2vpn-ntw-vpn-services"`
	Enable                       *bool   `path:"enable" module:"ietf-l2vpn-ntw-vpn-services"`
	IpMobilityThreshold          *uint16 `path:"ip-mobility-threshold" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_ArpProxy) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/evpn-policies/bum-management YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement struct {
	DiscardBroadcast        *bool `path:"discard-broadcast" module:"ietf-l2vpn-ntw-vpn-services"`
	DiscardUnknownMulticast *bool `path:"discard-unknown-multicast" module:"ietf-l2vpn-ntw-vpn-services"`
	DiscardUnknownUnicast   *bool `path:"discard-unknown-unicast" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_BumManagement) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/evpn-policies/nd-proxy YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy struct {
	DuplicateIpDetectionInterval *uint16 `path:"duplicate-ip-detection-interval" module:"ietf-l2vpn-ntw-vpn-services"`
	Enable                       *bool   `path:"enable" module:"ietf-l2vpn-ntw-vpn-services"`
	IpMobilityThreshold          *uint16 `path:"ip-mobility-threshold" module:"ietf-l2vpn-ntw-vpn-services"`
	NdSuppression                *bool   `path:"nd-suppression" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_NdProxy) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/evpn-policies/pbb YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb struct {
	BackboneSrcMac *string `path:"backbone-src-mac" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_EvpnPolicies_Pbb) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/ldp-or-l2tp YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp struct {
	AcPwList        map[IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList `path:"ac-pw-list" module:"ietf-l2vpn-ntw-vpn-services"`
	Agi             *string                                                                                                                                                                                `path:"agi" module:"ietf-l2vpn-ntw-vpn-services"`
	MacAddrWithdraw *bool                                                                                                                                                                                  `path:"mac-addr-withdraw" module:"ietf-l2vpn-ntw-vpn-services"`
	PseudowireType  E_IanaPseudowireTypes_IanaPwTypes                                                                                                                                                      `path:"pseudowire-type" module:"ietf-l2vpn-ntw-vpn-services"`
	PwDescription   *string                                                                                                                                                                                `path:"pw-description" module:"ietf-l2vpn-ntw-vpn-services"`
	PwType          E_IETFL2VpnNtwVpnServices_PwType                                                                                                                                                       `path:"pw-type" module:"ietf-l2vpn-ntw-vpn-services"`
	Qinq            *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq                                                                                                    `path:"qinq" module:"ietf-l2vpn-ntw-vpn-services"`
	RemoteTargets   map[uint32]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets                                                                                `path:"remote-targets" module:"ietf-l2vpn-ntw-vpn-services"`
	RouterId        *string                                                                                                                                                                                `path:"router-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Saii            *uint32                                                                                                                                                                                `path:"saii" module:"ietf-l2vpn-ntw-vpn-services"`
	TLdpPwType      E_IETFL2VpnNtwVpnServices_TLdpPwType                                                                                                                                                   `path:"t-ldp-pw-type" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp) IsYANGGoStruct() {
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key represents the key for list AcPwList of element /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/ldp-or-l2tp.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key struct {
	PeerAddr string `path:"peer-addr"`
	VcId     string `path:"vc-id"`
}

// IsYANGGoKeyStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key key struct.
func (t IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"peer-addr": t.PeerAddr,
		"vc-id":     t.VcId,
	}, nil
}

// NewAcPwList creates a new entry in the AcPwList list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp) NewAcPwList(PeerAddr string, VcId string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcPwList == nil {
		t.AcPwList = make(map[IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList)
	}

	key := IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList_Key{
		PeerAddr: PeerAddr,
		VcId:     VcId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AcPwList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AcPwList", key)
	}

	t.AcPwList[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList{
		PeerAddr: &PeerAddr,
		VcId:     &VcId,
	}

	return t.AcPwList[key], nil
}

// NewRemoteTargets creates a new entry in the RemoteTargets list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp) NewRemoteTargets(Taii uint32) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteTargets == nil {
		t.RemoteTargets = make(map[uint32]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets)
	}

	key := Taii

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteTargets[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteTargets", key)
	}

	t.RemoteTargets[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets{
		Taii: &Taii,
	}

	return t.RemoteTargets[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/ldp-or-l2tp/ac-pw-list YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList struct {
	PeerAddr   *string `path:"peer-addr" module:"ietf-l2vpn-ntw-vpn-services"`
	PwPriority *uint32 `path:"pw-priority" module:"ietf-l2vpn-ntw-vpn-services"`
	VcId       *string `path:"vc-id" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerAddr == nil {
		return nil, fmt.Errorf("nil value for key PeerAddr")
	}

	if t.VcId == nil {
		return nil, fmt.Errorf("nil value for key VcId")
	}

	return map[string]interface{}{
		"peer-addr": *t.PeerAddr,
		"vc-id":     *t.VcId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_AcPwList) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/ldp-or-l2tp/qinq YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq struct {
	CTag *uint32 `path:"c-tag" module:"ietf-l2vpn-ntw-vpn-services"`
	STag *uint32 `path:"s-tag" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_Qinq) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/ldp-or-l2tp/remote-targets YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets struct {
	PeerAddr *string `path:"peer-addr" module:"ietf-l2vpn-ntw-vpn-services"`
	Taii     *uint32 `path:"taii" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Taii == nil {
		return nil, fmt.Errorf("nil value for key Taii")
	}

	return map[string]interface{}{
		"taii": *t.Taii,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_LdpOrL2Tp_RemoteTargets) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/signaling-option/vpls-instance YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance struct {
	VplsEdgeId      *uint16 `path:"vpls-edge-id" module:"ietf-l2vpn-ntw-vpn-services"`
	VplsEdgeIdRange *uint16 `path:"vpls-edge-id-range" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_SignalingOption_VplsInstance) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status struct {
	AdminStatus *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus `path:"admin-status" module:"ietf-l2vpn-ntw-vpn-services"`
	OperStatus  *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus  `path:"oper-status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/status/admin-status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus struct {
	LastChange *string                              `path:"last-change" module:"ietf-l2vpn-ntw-vpn-services"`
	Status     E_IETFVpnCommon_AdministrativeStatus `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_AdminStatus) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/status/oper-status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus struct {
	LastChange *string                           `path:"last-change" module:"ietf-l2vpn-ntw-vpn-services"`
	Status     E_IETFVpnCommon_OperationalStatus `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_Status_OperStatus) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses struct {
	VpnNetworkAccess map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess `path:"vpn-network-access" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses) IsYANGGoStruct() {}

// NewVpnNetworkAccess creates a new entry in the VpnNetworkAccess list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses) NewVpnNetworkAccess(Id string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VpnNetworkAccess == nil {
		t.VpnNetworkAccess = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VpnNetworkAccess[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VpnNetworkAccess", key)
	}

	t.VpnNetworkAccess[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess{
		Id: &Id,
	}

	return t.VpnNetworkAccess[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess struct {
	Connection              *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection          `path:"connection" module:"ietf-l2vpn-ntw-vpn-services"`
	Description             *string                                                                                                      `path:"description" module:"ietf-l2vpn-ntw-vpn-services"`
	EthernetServiceOam      *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam  `path:"ethernet-service-oam" module:"ietf-l2vpn-ntw-vpn-services"`
	GlobalParametersProfile *string                                                                                                      `path:"global-parameters-profile" module:"ietf-l2vpn-ntw-vpn-services"`
	Group                   map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group    `path:"group" module:"ietf-l2vpn-ntw-vpn-services"`
	Id                      *string                                                                                                      `path:"id" module:"ietf-l2vpn-ntw-vpn-services"`
	InterfaceId             *string                                                                                                      `path:"interface-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Service                 *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service             `path:"service" module:"ietf-l2vpn-ntw-vpn-services"`
	Status                  *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status              `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
	VpwsServiceInstance     *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance `path:"vpws-service-instance" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess) NewGroup(GroupId string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group{
		GroupId: &GroupId,
	}

	return t.Group[key], nil
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection struct {
	BearerReference      *string                                                                                                           `path:"bearer-reference" module:"ietf-l2vpn-ntw-vpn-services"`
	Encapsulation        *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation `path:"encapsulation" module:"ietf-l2vpn-ntw-vpn-services"`
	L2TerminationPoint   *string                                                                                                           `path:"l2-termination-point" module:"ietf-l2vpn-ntw-vpn-services"`
	LagInterface         *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface  `path:"lag-interface" module:"ietf-l2vpn-ntw-vpn-services"`
	LocalBridgeReference *string                                                                                                           `path:"local-bridge-reference" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation struct {
	Dot1Q          *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q          `path:"dot1q" module:"ietf-l2vpn-ntw-vpn-services"`
	EncapType      E_IETFVpnCommon_EncapsulationType                                                                                                `path:"encap-type" module:"ietf-l2vpn-ntw-vpn-services"`
	PriorityTagged *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged `path:"priority-tagged" module:"ietf-l2vpn-ntw-vpn-services"`
	Qinq           *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq           `path:"qinq" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/dot1q YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q struct {
	CvlanId *uint16                                                                                                                         `path:"cvlan-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Rewrite *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite `path:"rewrite" module:"ietf-l2vpn-ntw-vpn-services"`
	TagType E_IETFVpnCommon_TagType                                                                                                         `path:"tag-type" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/dot1q/rewrite YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite struct {
	CvlanId   *uint16                                                                                                                                    `path:"cvlan-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Direction E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction `path:"direction" module:"ietf-l2vpn-ntw-vpn-services"`
	Pop       E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop       `path:"pop" module:"ietf-l2vpn-ntw-vpn-services"`
	Push      YANGEmpty                                                                                                                                  `path:"push" module:"ietf-l2vpn-ntw-vpn-services"`
	Translate E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate `path:"translate" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/priority-tagged YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged struct {
	TagType E_IETFVpnCommon_TagType `path:"tag-type" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_PriorityTagged) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/qinq YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq struct {
	CvlanId *uint16                 `path:"cvlan-id" module:"ietf-l2vpn-ntw-vpn-services"`
	SvlanId *uint16                 `path:"svlan-id" module:"ietf-l2vpn-ntw-vpn-services"`
	TagType E_IETFVpnCommon_TagType `path:"tag-type" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Qinq) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/lag-interface YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface struct {
	Lacp           *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp         `path:"lacp" module:"ietf-l2vpn-ntw-vpn-services"`
	LagInterfaceId *string                                                                                                                       `path:"lag-interface-id" module:"ietf-l2vpn-ntw-vpn-services"`
	SplitHorizon   *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon `path:"split-horizon" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/lag-interface/lacp YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp struct {
	AdminKey       *uint16                                                                                                                              `path:"admin-key" module:"ietf-l2vpn-ntw-vpn-services"`
	FlowControl    *string                                                                                                                              `path:"flow-control" module:"ietf-l2vpn-ntw-vpn-services"`
	LacpState      *bool                                                                                                                                `path:"lacp-state" module:"ietf-l2vpn-ntw-vpn-services"`
	Lldp           *bool                                                                                                                                `path:"lldp" module:"ietf-l2vpn-ntw-vpn-services"`
	MemberLinkList *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList `path:"member-link-list" module:"ietf-l2vpn-ntw-vpn-services"`
	MiniLinkNum    *uint32                                                                                                                              `path:"mini-link-num" module:"ietf-l2vpn-ntw-vpn-services"`
	Mode           E_IETFL2VpnNtwVpnServices_LacpMode                                                                                                   `path:"mode" module:"ietf-l2vpn-ntw-vpn-services"`
	Speed          *uint32                                                                                                                              `path:"speed" module:"ietf-l2vpn-ntw-vpn-services"`
	SystemId       *string                                                                                                                              `path:"system-id" module:"ietf-l2vpn-ntw-vpn-services"`
	SystemPriority *uint16                                                                                                                              `path:"system-priority" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/lag-interface/lacp/member-link-list YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList struct {
	MemberLink map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink `path:"member-link" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList) IsYANGGoStruct() {
}

// NewMemberLink creates a new entry in the MemberLink list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList) NewMemberLink(Name string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MemberLink == nil {
		t.MemberLink = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MemberLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MemberLink", key)
	}

	t.MemberLink[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink{
		Name: &Name,
	}

	return t.MemberLink[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/lag-interface/lacp/member-link-list/member-link YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink struct {
	LinkMtu         *uint32                                                                                                                                                         `path:"link-mtu" module:"ietf-l2vpn-ntw-vpn-services"`
	Mode            E_IETFVpnCommon_NegMode                                                                                                                                         `path:"mode" module:"ietf-l2vpn-ntw-vpn-services"`
	Name            *string                                                                                                                                                         `path:"name" module:"ietf-l2vpn-ntw-vpn-services"`
	Oam_802_3AhLink *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink `path:"oam-802.3ah-link" module:"ietf-l2vpn-ntw-vpn-services"`
	PortSpeed       *uint32                                                                                                                                                         `path:"port-speed" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/lag-interface/lacp/member-link-list/member-link/oam-802.3ah-link YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink struct {
	Enable *bool `path:"enable" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_Lacp_MemberLinkList_MemberLink_Oam_802_3AhLink) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/lag-interface/split-horizon YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon struct {
	GroupName *string `path:"group-name" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_LagInterface_SplitHorizon) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam struct {
	Cfm_802_1Ag *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag       `path:"cfm-802.1-ag" module:"ietf-l2vpn-ntw-vpn-services"`
	MdLevel     *uint8                                                                                                                        `path:"md-level" module:"ietf-l2vpn-ntw-vpn-services"`
	MdName      *string                                                                                                                       `path:"md-name" module:"ietf-l2vpn-ntw-vpn-services"`
	Y_1731      map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731 `path:"y-1731" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam) IsYANGGoStruct() {
}

// NewY_1731 creates a new entry in the Y_1731 list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam) NewY_1731(Maid string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Y_1731 == nil {
		t.Y_1731 = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731)
	}

	key := Maid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Y_1731[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Y_1731", key)
	}

	t.Y_1731[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731{
		Maid: &Maid,
	}

	return t.Y_1731[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/cfm-802.1-ag YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag struct {
	N2UniC map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC `path:"n2-uni-c" module:"ietf-l2vpn-ntw-vpn-services"`
	N2UniN map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN `path:"n2-uni-n" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag) IsYANGGoStruct() {
}

// NewN2UniC creates a new entry in the N2UniC list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag) NewN2UniC(Maid string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.N2UniC == nil {
		t.N2UniC = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC)
	}

	key := Maid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.N2UniC[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list N2UniC", key)
	}

	t.N2UniC[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC{
		Maid: &Maid,
	}

	return t.N2UniC[key], nil
}

// NewN2UniN creates a new entry in the N2UniN list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag) NewN2UniN(Maid string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.N2UniN == nil {
		t.N2UniN = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN)
	}

	key := Maid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.N2UniN[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list N2UniN", key)
	}

	t.N2UniN[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN{
		Maid: &Maid,
	}

	return t.N2UniN[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/cfm-802.1-ag/n2-uni-c YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC struct {
	CcmHoldtime   *uint32                                                                                                                                   `path:"ccm-holdtime" module:"ietf-l2vpn-ntw-vpn-services"`
	CcmInterval   *uint32                                                                                                                                   `path:"ccm-interval" module:"ietf-l2vpn-ntw-vpn-services"`
	CcmPBitsPri   *uint8                                                                                                                                    `path:"ccm-p-bits-pri" module:"ietf-l2vpn-ntw-vpn-services"`
	CosForCfmPdus *uint32                                                                                                                                   `path:"cos-for-cfm-pdus" module:"ietf-l2vpn-ntw-vpn-services"`
	Maid          *string                                                                                                                                   `path:"maid" module:"ietf-l2vpn-ntw-vpn-services"`
	MepId         *uint32                                                                                                                                   `path:"mep-id" module:"ietf-l2vpn-ntw-vpn-services"`
	MepLevel      *uint32                                                                                                                                   `path:"mep-level" module:"ietf-l2vpn-ntw-vpn-services"`
	MepUpDown     E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown `path:"mep-up-down" module:"ietf-l2vpn-ntw-vpn-services"`
	RemoteMepId   *uint32                                                                                                                                   `path:"remote-mep-id" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Maid == nil {
		return nil, fmt.Errorf("nil value for key Maid")
	}

	return map[string]interface{}{
		"maid": *t.Maid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/cfm-802.1-ag/n2-uni-n YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN struct {
	CcmHoldtime   *uint32                                                                                                                                   `path:"ccm-holdtime" module:"ietf-l2vpn-ntw-vpn-services"`
	CcmInterval   *uint32                                                                                                                                   `path:"ccm-interval" module:"ietf-l2vpn-ntw-vpn-services"`
	CcmPBitsPri   *uint8                                                                                                                                    `path:"ccm-p-bits-pri" module:"ietf-l2vpn-ntw-vpn-services"`
	CosForCfmPdus *uint32                                                                                                                                   `path:"cos-for-cfm-pdus" module:"ietf-l2vpn-ntw-vpn-services"`
	Maid          *string                                                                                                                                   `path:"maid" module:"ietf-l2vpn-ntw-vpn-services"`
	MepId         *uint32                                                                                                                                   `path:"mep-id" module:"ietf-l2vpn-ntw-vpn-services"`
	MepLevel      *uint32                                                                                                                                   `path:"mep-level" module:"ietf-l2vpn-ntw-vpn-services"`
	MepUpDown     E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown `path:"mep-up-down" module:"ietf-l2vpn-ntw-vpn-services"`
	RemoteMepId   *uint32                                                                                                                                   `path:"remote-mep-id" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Maid == nil {
		return nil, fmt.Errorf("nil value for key Maid")
	}

	return map[string]interface{}{
		"maid": *t.Maid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniN) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731 represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/y-1731 YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731 struct {
	Cos                       *uint32                                                                                                                             `path:"cos" module:"ietf-l2vpn-ntw-vpn-services"`
	DelayMeasurement          *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement `path:"delay-measurement" module:"ietf-l2vpn-ntw-vpn-services"`
	FrameSize                 *uint32                                                                                                                             `path:"frame-size" module:"ietf-l2vpn-ntw-vpn-services"`
	LossMeasurement           *bool                                                                                                                               `path:"loss-measurement" module:"ietf-l2vpn-ntw-vpn-services"`
	Maid                      *string                                                                                                                             `path:"maid" module:"ietf-l2vpn-ntw-vpn-services"`
	MeasurementInterval       *uint32                                                                                                                             `path:"measurement-interval" module:"ietf-l2vpn-ntw-vpn-services"`
	MepId                     *uint32                                                                                                                             `path:"mep-id" module:"ietf-l2vpn-ntw-vpn-services"`
	MessagePeriod             *uint32                                                                                                                             `path:"message-period" module:"ietf-l2vpn-ntw-vpn-services"`
	PmType                    E_IETFL2VpnNtwVpnServices_PmType                                                                                                    `path:"pm-type" module:"ietf-l2vpn-ntw-vpn-services"`
	RemoteMepId               *uint32                                                                                                                             `path:"remote-mep-id" module:"ietf-l2vpn-ntw-vpn-services"`
	SessionType               E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType     `path:"session-type" module:"ietf-l2vpn-ntw-vpn-services"`
	SynthethicLossMeasurement *bool                                                                                                                               `path:"synthethic-loss-measurement" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731 struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Maid == nil {
		return nil, fmt.Errorf("nil value for key Maid")
	}

	return map[string]interface{}{
		"maid": *t.Maid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/y-1731/delay-measurement YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement struct {
	EnableDm *bool `path:"enable-dm" module:"ietf-l2vpn-ntw-vpn-services"`
	TwoWay   *bool `path:"two-way" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_DelayMeasurement) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/group YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group struct {
	EthernetSegmentIdentifier *string                                  `path:"ethernet-segment-identifier" module:"ietf-l2vpn-ntw-vpn-services"`
	GroupId                   *string                                  `path:"group-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Precedence                E_IETFL2VpnNtwVpnServices_PrecedenceType `path:"precedence" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Group) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service struct {
	BroadcastUnknownUnicastMulticast *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast `path:"broadcast-unknown-unicast-multicast" module:"ietf-l2vpn-ntw-vpn-services"`
	MacPolicies                      *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies                      `path:"mac-policies" module:"ietf-l2vpn-ntw-vpn-services"`
	Mtu                              *uint32                                                                                                                           `path:"mtu" module:"ietf-l2vpn-ntw-vpn-services"`
	Qos                              *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos                              `path:"qos" module:"ietf-l2vpn-ntw-vpn-services"`
	SvcInboundBandwidth              *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth              `path:"svc-inbound-bandwidth" module:"ietf-l2vpn-ntw-vpn-services"`
	SvcOutboundBandwidth             *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth             `path:"svc-outbound-bandwidth" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/broadcast-unknown-unicast-multicast YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast struct {
	BumOverallRate            *uint32                                                                                                                                                                `path:"bum-overall-rate" module:"ietf-l2vpn-ntw-vpn-services"`
	MulticastGpAddressMapping map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping `path:"multicast-gp-address-mapping" module:"ietf-l2vpn-ntw-vpn-services"`
	MulticastSiteType         E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType                   `path:"multicast-site-type" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast) IsYANGGoStruct() {
}

// NewMulticastGpAddressMapping creates a new entry in the MulticastGpAddressMapping list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast) NewMulticastGpAddressMapping(Id string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MulticastGpAddressMapping == nil {
		t.MulticastGpAddressMapping = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MulticastGpAddressMapping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MulticastGpAddressMapping", key)
	}

	t.MulticastGpAddressMapping[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping{
		Id: &Id,
	}

	return t.MulticastGpAddressMapping[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/broadcast-unknown-unicast-multicast/multicast-gp-address-mapping YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping struct {
	Id            *string `path:"id" module:"ietf-l2vpn-ntw-vpn-services"`
	MacGpAddress  *string `path:"mac-gp-address" module:"ietf-l2vpn-ntw-vpn-services"`
	PortLagNumber *uint32 `path:"port-lag-number" module:"ietf-l2vpn-ntw-vpn-services"`
	VlanId        *uint32 `path:"vlan-id" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastGpAddressMapping) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/mac-policies YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies struct {
	AccessControlList map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList `path:"access-control-list" module:"ietf-l2vpn-ntw-vpn-services"`
	MacAddrLimit      *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit                 `path:"mac-addr-limit" module:"ietf-l2vpn-ntw-vpn-services"`
	MacLoopPrevention *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention            `path:"mac-loop-prevention" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies) IsYANGGoStruct() {
}

// NewAccessControlList creates a new entry in the AccessControlList list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies) NewAccessControlList(Name string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessControlList == nil {
		t.AccessControlList = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessControlList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessControlList", key)
	}

	t.AccessControlList[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList{
		Name: &Name,
	}

	return t.AccessControlList[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/mac-policies/access-control-list YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList struct {
	Action            E_IETFL2VpnNtwVpnServices_MacAction `path:"action" module:"ietf-l2vpn-ntw-vpn-services"`
	DstMacAddress     []string                            `path:"dst-mac-address" module:"ietf-l2vpn-ntw-vpn-services"`
	DstMacAddressMask []string                            `path:"dst-mac-address-mask" module:"ietf-l2vpn-ntw-vpn-services"`
	Name              *string                             `path:"name" module:"ietf-l2vpn-ntw-vpn-services"`
	RateLimit         *float64                            `path:"rate-limit" module:"ietf-l2vpn-ntw-vpn-services"`
	SrcMacAddress     []string                            `path:"src-mac-address" module:"ietf-l2vpn-ntw-vpn-services"`
	SrcMacAddressMask []string                            `path:"src-mac-address-mask" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_AccessControlList) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/mac-policies/mac-addr-limit YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit struct {
	Action       E_IETFL2VpnNtwVpnServices_MacAction `path:"action" module:"ietf-l2vpn-ntw-vpn-services"`
	MacNumLimit  *uint16                             `path:"mac-num-limit" module:"ietf-l2vpn-ntw-vpn-services"`
	TimeInterval *uint32                             `path:"time-interval" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacAddrLimit) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/mac-policies/mac-loop-prevention YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention struct {
	Frequency      *uint32                                      `path:"frequency" module:"ietf-l2vpn-ntw-vpn-services"`
	ProtectionType E_IETFL2VpnNtwVpnServices_LoopPreventionType `path:"protection-type" module:"ietf-l2vpn-ntw-vpn-services"`
	RetryTimer     *uint32                                      `path:"retry-timer" module:"ietf-l2vpn-ntw-vpn-services"`
	Window         *uint32                                      `path:"window" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_MacPolicies_MacLoopPrevention) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos struct {
	QosClassificationPolicy *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy `path:"qos-classification-policy" module:"ietf-l2vpn-ntw-vpn-services"`
	QosProfile              *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile              `path:"qos-profile" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy struct {
	Rule *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap `path:"rule" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) IsYANGGoStruct() {
}

// AppendNewRule creates a new entry in the Rule
// ordered map of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy struct. The keys of the list are
// populated from the input arguments.
func (s *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) AppendNewRule(Id string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule, error) {
	if s.Rule == nil {
		s.Rule = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap{}
	}
	return s.Rule.AppendNew(Id)
}

// AppendRule appends the supplied IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule struct
// to the list Rule of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy. If the key value(s)
// specified in the supplied IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule already exist in the list, an
// error is returned.
func (s *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) AppendRule(v *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule) error {
	if s.Rule == nil {
		s.Rule = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap{}
	}
	return s.Rule.Append(v)
}

// GetRule retrieves the value with the specified key from the
// Rule map field of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) GetRule(Id string) *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule {
	key := Id
	return s.Rule.Get(key)
}

// DeleteRule deletes the value with the specified keys from
// the receiver IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy. If there is no such element, the
// function is a no-op.
func (s *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) DeleteRule(Id string) bool {
	key := Id
	return s.Rule.Delete(key)
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy/rule.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap struct {
	keys     []string
	valueMap map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule
}

// IsYANGOrderedList ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) IsYANGOrderedList() {
}

// init initializes any uninitialized values.
func (o *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule{}
	}
}

// Keys returns a copy of the list's keys.
func (o *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) Values() []*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule {
	if o == nil {
		return nil
	}
	var values []*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap
func (o *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) Get(key string) *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) Append(v *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule")
	}
	if v == nil {
		return fmt.Errorf("nil IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule")
	}
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_OrderedMap) AppendNew(Id string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule")
	}
	key := Id

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule{
		Id: &Id,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy/rule YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule struct {
	Id               *string                                                                                                                                     `path:"id" module:"ietf-l2vpn-ntw-vpn-services"`
	MatchApplication E_IETFVpnCommon_CustomerApplication                                                                                                         `path:"match-application" module:"ietf-l2vpn-ntw-vpn-services"`
	MatchFlow        *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow `path:"match-flow" module:"ietf-l2vpn-ntw-vpn-services"`
	TargetClassId    *string                                                                                                                                     `path:"target-class-id" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy/rule/match-flow YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow struct {
	Any           YANGEmpty                           `path:"any" module:"ietf-l2vpn-ntw-vpn-services"`
	ColorType     E_IETFL2VpnNtwVpnServices_ColorType `path:"color-type" module:"ietf-l2vpn-ntw-vpn-services"`
	Dot1Q         *uint16                             `path:"dot1q" module:"ietf-l2vpn-ntw-vpn-services"`
	Dscp          *uint8                              `path:"dscp" module:"ietf-l2vpn-ntw-vpn-services"`
	DstMacAddress *string                             `path:"dst-mac-address" module:"ietf-l2vpn-ntw-vpn-services"`
	Pcp           *uint8                              `path:"pcp" module:"ietf-l2vpn-ntw-vpn-services"`
	SrcMacAddress *string                             `path:"src-mac-address" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosClassificationPolicy_Rule_MatchFlow) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-profile YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile struct {
	QosProfile map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile `path:"qos-profile" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile) IsYANGGoStruct() {
}

// NewQosProfile creates a new entry in the QosProfile list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile) NewQosProfile(Profile string) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QosProfile == nil {
		t.QosProfile = make(map[string]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile)
	}

	key := Profile

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QosProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QosProfile", key)
	}

	t.QosProfile[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile{
		Profile: &Profile,
	}

	return t.QosProfile[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-profile/qos-profile YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile struct {
	Direction E_IETFVpnCommon_QosProfileDirection `path:"direction" module:"ietf-l2vpn-ntw-vpn-services"`
	Profile   *string                             `path:"profile" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Profile == nil {
		return nil, fmt.Errorf("nil value for key Profile")
	}

	return map[string]interface{}{
		"profile": *t.Profile,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_Qos_QosProfile_QosProfile) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/svc-inbound-bandwidth YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth struct {
	InboundBandwidth map[E_IETFVpnCommon_BwType]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth `path:"inbound-bandwidth" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth) IsYANGGoStruct() {
}

// NewInboundBandwidth creates a new entry in the InboundBandwidth list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth) NewInboundBandwidth(BwType E_IETFVpnCommon_BwType) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InboundBandwidth == nil {
		t.InboundBandwidth = make(map[E_IETFVpnCommon_BwType]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth)
	}

	key := BwType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InboundBandwidth[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InboundBandwidth", key)
	}

	t.InboundBandwidth[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth{
		BwType: BwType,
	}

	return t.InboundBandwidth[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/svc-inbound-bandwidth/inbound-bandwidth YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth struct {
	BwType E_IETFVpnCommon_BwType `path:"bw-type" module:"ietf-l2vpn-ntw-vpn-services"`
	Cbs    *uint64                `path:"cbs" module:"ietf-l2vpn-ntw-vpn-services"`
	Cir    *uint64                `path:"cir" module:"ietf-l2vpn-ntw-vpn-services"`
	CosId  *uint8                 `path:"cos-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Ebs    *uint64                `path:"ebs" module:"ietf-l2vpn-ntw-vpn-services"`
	Eir    *uint64                `path:"eir" module:"ietf-l2vpn-ntw-vpn-services"`
	Pbs    *uint64                `path:"pbs" module:"ietf-l2vpn-ntw-vpn-services"`
	Pir    *uint64                `path:"pir" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bw-type": t.BwType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcInboundBandwidth_InboundBandwidth) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/svc-outbound-bandwidth YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth struct {
	OutboundBandwidth map[E_IETFVpnCommon_BwType]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth `path:"outbound-bandwidth" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth) IsYANGGoStruct() {
}

// NewOutboundBandwidth creates a new entry in the OutboundBandwidth list of the
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth struct. The keys of the list are populated from the input
// arguments.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth) NewOutboundBandwidth(BwType E_IETFVpnCommon_BwType) (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OutboundBandwidth == nil {
		t.OutboundBandwidth = make(map[E_IETFVpnCommon_BwType]*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth)
	}

	key := BwType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OutboundBandwidth[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OutboundBandwidth", key)
	}

	t.OutboundBandwidth[key] = &IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth{
		BwType: BwType,
	}

	return t.OutboundBandwidth[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/svc-outbound-bandwidth/outbound-bandwidth YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth struct {
	BwType E_IETFVpnCommon_BwType `path:"bw-type" module:"ietf-l2vpn-ntw-vpn-services"`
	Cbs    *uint64                `path:"cbs" module:"ietf-l2vpn-ntw-vpn-services"`
	Cir    *uint64                `path:"cir" module:"ietf-l2vpn-ntw-vpn-services"`
	CosId  *uint8                 `path:"cos-id" module:"ietf-l2vpn-ntw-vpn-services"`
	Ebs    *uint64                `path:"ebs" module:"ietf-l2vpn-ntw-vpn-services"`
	Eir    *uint64                `path:"eir" module:"ietf-l2vpn-ntw-vpn-services"`
	Pbs    *uint64                `path:"pbs" module:"ietf-l2vpn-ntw-vpn-services"`
	Pir    *uint64                `path:"pir" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth struct, which is a YANG list entry.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bw-type": t.BwType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_SvcOutboundBandwidth_OutboundBandwidth) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status struct {
	AdminStatus *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus `path:"admin-status" module:"ietf-l2vpn-ntw-vpn-services"`
	OperStatus  *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus  `path:"oper-status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus struct {
	LastChange *string                              `path:"last-change" module:"ietf-l2vpn-ntw-vpn-services"`
	Status     E_IETFVpnCommon_AdministrativeStatus `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_AdminStatus) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus struct {
	LastChange *string                           `path:"last-change" module:"ietf-l2vpn-ntw-vpn-services"`
	Status     E_IETFVpnCommon_OperationalStatus `path:"status" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Status_OperStatus) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/vpws-service-instance YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance struct {
	LocalVpwsServiceInstance  *uint32                                                                                                                    `path:"local-vpws-service-instance" module:"ietf-l2vpn-ntw-vpn-services"`
	LocalVsiAuto              *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto  `path:"local-vsi-auto" module:"ietf-l2vpn-ntw-vpn-services"`
	RemoteVpwsServiceInstance *uint32                                                                                                                    `path:"remote-vpws-service-instance" module:"ietf-l2vpn-ntw-vpn-services"`
	RemoteVsiAuto             *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto `path:"remote-vsi-auto" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/vpws-service-instance/local-vsi-auto YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto struct {
	Auto         YANGEmpty `path:"auto" module:"ietf-l2vpn-ntw-vpn-services"`
	AutoLocalVsi *uint32   `path:"auto-local-vsi" module:"ietf-l2vpn-ntw-vpn-services"`
	VsiPoolName  *string   `path:"vsi-pool-name" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_LocalVsiAuto) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto represents the /ietf-l2vpn-ntw-vpn-services/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/vpws-service-instance/remote-vsi-auto YANG schema element.
type IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto struct {
	Auto          YANGEmpty `path:"auto" module:"ietf-l2vpn-ntw-vpn-services"`
	AutoRemoteVsi *uint32   `path:"auto-remote-vsi" module:"ietf-l2vpn-ntw-vpn-services"`
	VsiPoolName   *string   `path:"vsi-pool-name" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto.
func (*IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_VpwsServiceInstance_RemoteVsiAuto) ΛBelongingModule() string {
	return "ietf-l2vpn-ntw-vpn-services"
}

// IETFNetconfAcm_Nacm represents the /ietf-netconf-acm/nacm YANG schema element.
type IETFNetconfAcm_Nacm struct {
	DeniedDataWrites     *uint32                                  `path:"denied-data-writes" module:"ietf-netconf-acm"`
	DeniedNotifications  *uint32                                  `path:"denied-notifications" module:"ietf-netconf-acm"`
	DeniedOperations     *uint32                                  `path:"denied-operations" module:"ietf-netconf-acm"`
	EnableExternalGroups *bool                                    `path:"enable-external-groups" module:"ietf-netconf-acm"`
	EnableNacm           *bool                                    `path:"enable-nacm" module:"ietf-netconf-acm"`
	ExecDefault          E_IETFNetconfAcm_ActionType              `path:"exec-default" module:"ietf-netconf-acm"`
	Groups               *IETFNetconfAcm_Nacm_Groups              `path:"groups" module:"ietf-netconf-acm"`
	ReadDefault          E_IETFNetconfAcm_ActionType              `path:"read-default" module:"ietf-netconf-acm"`
	RuleList             *IETFNetconfAcm_Nacm_RuleList_OrderedMap `path:"rule-list" module:"ietf-netconf-acm"`
	WriteDefault         E_IETFNetconfAcm_ActionType              `path:"write-default" module:"ietf-netconf-acm"`
}

// IsYANGGoStruct ensures that IETFNetconfAcm_Nacm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfAcm_Nacm) IsYANGGoStruct() {}

// AppendNewRuleList creates a new entry in the RuleList
// ordered map of the IETFNetconfAcm_Nacm struct. The keys of the list are
// populated from the input arguments.
func (s *IETFNetconfAcm_Nacm) AppendNewRuleList(Name string) (*IETFNetconfAcm_Nacm_RuleList, error) {
	if s.RuleList == nil {
		s.RuleList = &IETFNetconfAcm_Nacm_RuleList_OrderedMap{}
	}
	return s.RuleList.AppendNew(Name)
}

// AppendRuleList appends the supplied IETFNetconfAcm_Nacm_RuleList struct
// to the list RuleList of IETFNetconfAcm_Nacm. If the key value(s)
// specified in the supplied IETFNetconfAcm_Nacm_RuleList already exist in the list, an
// error is returned.
func (s *IETFNetconfAcm_Nacm) AppendRuleList(v *IETFNetconfAcm_Nacm_RuleList) error {
	if s.RuleList == nil {
		s.RuleList = &IETFNetconfAcm_Nacm_RuleList_OrderedMap{}
	}
	return s.RuleList.Append(v)
}

// GetRuleList retrieves the value with the specified key from the
// RuleList map field of IETFNetconfAcm_Nacm. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *IETFNetconfAcm_Nacm) GetRuleList(Name string) *IETFNetconfAcm_Nacm_RuleList {
	key := Name
	return s.RuleList.Get(key)
}

// DeleteRuleList deletes the value with the specified keys from
// the receiver IETFNetconfAcm_Nacm. If there is no such element, the
// function is a no-op.
func (s *IETFNetconfAcm_Nacm) DeleteRuleList(Name string) bool {
	key := Name
	return s.RuleList.Delete(key)
}

// IETFNetconfAcm_Nacm_RuleList_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /ietf-netconf-acm/nacm/rule-list.
type IETFNetconfAcm_Nacm_RuleList_OrderedMap struct {
	keys     []string
	valueMap map[string]*IETFNetconfAcm_Nacm_RuleList
}

// IsYANGOrderedList ensures that IETFNetconfAcm_Nacm_RuleList_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*IETFNetconfAcm_Nacm_RuleList_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *IETFNetconfAcm_Nacm_RuleList_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*IETFNetconfAcm_Nacm_RuleList{}
	}
}

// Keys returns a copy of the list's keys.
func (o *IETFNetconfAcm_Nacm_RuleList_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *IETFNetconfAcm_Nacm_RuleList_OrderedMap) Values() []*IETFNetconfAcm_Nacm_RuleList {
	if o == nil {
		return nil
	}
	var values []*IETFNetconfAcm_Nacm_RuleList
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of IETFNetconfAcm_Nacm_RuleList_OrderedMap
func (o *IETFNetconfAcm_Nacm_RuleList_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *IETFNetconfAcm_Nacm_RuleList_OrderedMap) Get(key string) *IETFNetconfAcm_Nacm_RuleList {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *IETFNetconfAcm_Nacm_RuleList_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a IETFNetconfAcm_Nacm_RuleList, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *IETFNetconfAcm_Nacm_RuleList_OrderedMap) Append(v *IETFNetconfAcm_Nacm_RuleList) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append IETFNetconfAcm_Nacm_RuleList")
	}
	if v == nil {
		return fmt.Errorf("nil IETFNetconfAcm_Nacm_RuleList")
	}
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new IETFNetconfAcm_Nacm_RuleList, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *IETFNetconfAcm_Nacm_RuleList_OrderedMap) AppendNew(Name string) (*IETFNetconfAcm_Nacm_RuleList, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append IETFNetconfAcm_Nacm_RuleList")
	}
	key := Name

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &IETFNetconfAcm_Nacm_RuleList{
		Name: &Name,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfAcm_Nacm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfAcm_Nacm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfAcm_Nacm.
func (*IETFNetconfAcm_Nacm) ΛBelongingModule() string {
	return "ietf-netconf-acm"
}

// IETFNetconfAcm_Nacm_Groups represents the /ietf-netconf-acm/nacm/groups YANG schema element.
type IETFNetconfAcm_Nacm_Groups struct {
	Group map[string]*IETFNetconfAcm_Nacm_Groups_Group `path:"group" module:"ietf-netconf-acm"`
}

// IsYANGGoStruct ensures that IETFNetconfAcm_Nacm_Groups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfAcm_Nacm_Groups) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// IETFNetconfAcm_Nacm_Groups struct. The keys of the list are populated from the input
// arguments.
func (t *IETFNetconfAcm_Nacm_Groups) NewGroup(Name string) (*IETFNetconfAcm_Nacm_Groups_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*IETFNetconfAcm_Nacm_Groups_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &IETFNetconfAcm_Nacm_Groups_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm_Groups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfAcm_Nacm_Groups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm_Groups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfAcm_Nacm_Groups) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfAcm_Nacm_Groups.
func (*IETFNetconfAcm_Nacm_Groups) ΛBelongingModule() string {
	return "ietf-netconf-acm"
}

// IETFNetconfAcm_Nacm_Groups_Group represents the /ietf-netconf-acm/nacm/groups/group YANG schema element.
type IETFNetconfAcm_Nacm_Groups_Group struct {
	Name     *string  `path:"name" module:"ietf-netconf-acm"`
	UserName []string `path:"user-name" module:"ietf-netconf-acm"`
}

// IsYANGGoStruct ensures that IETFNetconfAcm_Nacm_Groups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfAcm_Nacm_Groups_Group) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFNetconfAcm_Nacm_Groups_Group struct, which is a YANG list entry.
func (t *IETFNetconfAcm_Nacm_Groups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm_Groups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfAcm_Nacm_Groups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm_Groups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfAcm_Nacm_Groups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfAcm_Nacm_Groups_Group.
func (*IETFNetconfAcm_Nacm_Groups_Group) ΛBelongingModule() string {
	return "ietf-netconf-acm"
}

// IETFNetconfAcm_Nacm_RuleList represents the /ietf-netconf-acm/nacm/rule-list YANG schema element.
type IETFNetconfAcm_Nacm_RuleList struct {
	Group []string                                      `path:"group" module:"ietf-netconf-acm"`
	Name  *string                                       `path:"name" module:"ietf-netconf-acm"`
	Rule  *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap `path:"rule" module:"ietf-netconf-acm"`
}

// IsYANGGoStruct ensures that IETFNetconfAcm_Nacm_RuleList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfAcm_Nacm_RuleList) IsYANGGoStruct() {}

// AppendNewRule creates a new entry in the Rule
// ordered map of the IETFNetconfAcm_Nacm_RuleList struct. The keys of the list are
// populated from the input arguments.
func (s *IETFNetconfAcm_Nacm_RuleList) AppendNewRule(Name string) (*IETFNetconfAcm_Nacm_RuleList_Rule, error) {
	if s.Rule == nil {
		s.Rule = &IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap{}
	}
	return s.Rule.AppendNew(Name)
}

// AppendRule appends the supplied IETFNetconfAcm_Nacm_RuleList_Rule struct
// to the list Rule of IETFNetconfAcm_Nacm_RuleList. If the key value(s)
// specified in the supplied IETFNetconfAcm_Nacm_RuleList_Rule already exist in the list, an
// error is returned.
func (s *IETFNetconfAcm_Nacm_RuleList) AppendRule(v *IETFNetconfAcm_Nacm_RuleList_Rule) error {
	if s.Rule == nil {
		s.Rule = &IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap{}
	}
	return s.Rule.Append(v)
}

// GetRule retrieves the value with the specified key from the
// Rule map field of IETFNetconfAcm_Nacm_RuleList. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *IETFNetconfAcm_Nacm_RuleList) GetRule(Name string) *IETFNetconfAcm_Nacm_RuleList_Rule {
	key := Name
	return s.Rule.Get(key)
}

// DeleteRule deletes the value with the specified keys from
// the receiver IETFNetconfAcm_Nacm_RuleList. If there is no such element, the
// function is a no-op.
func (s *IETFNetconfAcm_Nacm_RuleList) DeleteRule(Name string) bool {
	key := Name
	return s.Rule.Delete(key)
}

// IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /ietf-netconf-acm/nacm/rule-list/rule.
type IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap struct {
	keys     []string
	valueMap map[string]*IETFNetconfAcm_Nacm_RuleList_Rule
}

// IsYANGOrderedList ensures that IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*IETFNetconfAcm_Nacm_RuleList_Rule{}
	}
}

// Keys returns a copy of the list's keys.
func (o *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) Values() []*IETFNetconfAcm_Nacm_RuleList_Rule {
	if o == nil {
		return nil
	}
	var values []*IETFNetconfAcm_Nacm_RuleList_Rule
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap
func (o *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) Get(key string) *IETFNetconfAcm_Nacm_RuleList_Rule {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a IETFNetconfAcm_Nacm_RuleList_Rule, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) Append(v *IETFNetconfAcm_Nacm_RuleList_Rule) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append IETFNetconfAcm_Nacm_RuleList_Rule")
	}
	if v == nil {
		return fmt.Errorf("nil IETFNetconfAcm_Nacm_RuleList_Rule")
	}
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new IETFNetconfAcm_Nacm_RuleList_Rule, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *IETFNetconfAcm_Nacm_RuleList_Rule_OrderedMap) AppendNew(Name string) (*IETFNetconfAcm_Nacm_RuleList_Rule, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append IETFNetconfAcm_Nacm_RuleList_Rule")
	}
	key := Name

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &IETFNetconfAcm_Nacm_RuleList_Rule{
		Name: &Name,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// ΛListKeyMap returns the keys of the IETFNetconfAcm_Nacm_RuleList struct, which is a YANG list entry.
func (t *IETFNetconfAcm_Nacm_RuleList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm_RuleList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfAcm_Nacm_RuleList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm_RuleList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfAcm_Nacm_RuleList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfAcm_Nacm_RuleList.
func (*IETFNetconfAcm_Nacm_RuleList) ΛBelongingModule() string {
	return "ietf-netconf-acm"
}

// IETFNetconfAcm_Nacm_RuleList_Rule represents the /ietf-netconf-acm/nacm/rule-list/rule YANG schema element.
type IETFNetconfAcm_Nacm_RuleList_Rule struct {
	AccessOperations IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union `path:"access-operations" module:"ietf-netconf-acm"`
	Action           E_IETFNetconfAcm_ActionType                              `path:"action" module:"ietf-netconf-acm"`
	Comment          *string                                                  `path:"comment" module:"ietf-netconf-acm"`
	ModuleName       *string                                                  `path:"module-name" module:"ietf-netconf-acm"`
	Name             *string                                                  `path:"name" module:"ietf-netconf-acm"`
	NotificationName *string                                                  `path:"notification-name" module:"ietf-netconf-acm"`
	Path             *string                                                  `path:"path" module:"ietf-netconf-acm"`
	RpcName          *string                                                  `path:"rpc-name" module:"ietf-netconf-acm"`
}

// IsYANGGoStruct ensures that IETFNetconfAcm_Nacm_RuleList_Rule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFNetconfAcm_Nacm_RuleList_Rule) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFNetconfAcm_Nacm_RuleList_Rule struct, which is a YANG list entry.
func (t *IETFNetconfAcm_Nacm_RuleList_Rule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm_RuleList_Rule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFNetconfAcm_Nacm_RuleList_Rule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFNetconfAcm_Nacm_RuleList_Rule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFNetconfAcm_Nacm_RuleList_Rule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of IETFNetconfAcm_Nacm_RuleList_Rule.
func (*IETFNetconfAcm_Nacm_RuleList_Rule) ΛBelongingModule() string {
	return "ietf-netconf-acm"
}

// IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union is an interface that is implemented by valid types for the union
// for the leaf /ietf-netconf-acm/nacm/rule-list/rule/access-operations within the YANG schema.
// Union type can be one of [*UnionUnsupported, UnionString].
type IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union interface {
	// Union type can be one of [*UnionUnsupported, UnionString]
	Documentation_for_IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union()
}

// Documentation_for_IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union ensures that *UnionUnsupported
// implements the IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union interface.
func (*UnionUnsupported) Documentation_for_IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union() {
}

// Documentation_for_IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union ensures that UnionString
// implements the IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union interface.
func (UnionString) Documentation_for_IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union() {}

// To_IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union takes an input interface{} and attempts to convert it to a struct
// which implements the IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *IETFNetconfAcm_Nacm_RuleList_Rule) To_IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union(i interface{}) (IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union, error) {
	if v, ok := i.(IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case interface{}:
		return &UnionUnsupported{v}, nil
	}
	return nil, fmt.Errorf("cannot convert %v to IETFNetconfAcm_Nacm_RuleList_Rule_AccessOperations_Union, unknown union type, got: %T, want any of [interface{}, string]", i, i)
}

// L2Nm represents the /l2nm YANG schema element.
type L2Nm struct {
	Nacm       *IETFNetconfAcm_Nacm                `path:"nacm" module:"ietf-netconf-acm"`
	VpnService *IETFL2VpnNtwVpnServices_VpnService `path:"vpn-service" module:"ietf-l2vpn-ntw-vpn-services"`
}

// IsYANGGoStruct ensures that L2Nm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*L2Nm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *L2Nm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["L2Nm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *L2Nm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *L2Nm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of L2Nm.
func (*L2Nm) ΛBelongingModule() string {
	return ""
}

// E_IETFL2VpnNtwVpnServices_ColorType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_ColorType. An additional value named
// IETFL2VpnNtwVpnServices_ColorType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_ColorType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_ColorType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_ColorType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_ColorType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_ColorType.
func (E_IETFL2VpnNtwVpnServices_ColorType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_ColorType.
func (e E_IETFL2VpnNtwVpnServices_ColorType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_ColorType")
}

const (
	// IETFL2VpnNtwVpnServices_ColorType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_ColorType
	IETFL2VpnNtwVpnServices_ColorType_UNSET E_IETFL2VpnNtwVpnServices_ColorType = 0
	// IETFL2VpnNtwVpnServices_ColorType_green corresponds to the value green of IETFL2VpnNtwVpnServices_ColorType
	IETFL2VpnNtwVpnServices_ColorType_green E_IETFL2VpnNtwVpnServices_ColorType = 1
	// IETFL2VpnNtwVpnServices_ColorType_red corresponds to the value red of IETFL2VpnNtwVpnServices_ColorType
	IETFL2VpnNtwVpnServices_ColorType_red E_IETFL2VpnNtwVpnServices_ColorType = 2
	// IETFL2VpnNtwVpnServices_ColorType_yellow corresponds to the value yellow of IETFL2VpnNtwVpnServices_ColorType
	IETFL2VpnNtwVpnServices_ColorType_yellow E_IETFL2VpnNtwVpnServices_ColorType = 3
)

// E_IETFL2VpnNtwVpnServices_EvpnServiceType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_EvpnServiceType. An additional value named
// IETFL2VpnNtwVpnServices_EvpnServiceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_EvpnServiceType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_EvpnServiceType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_EvpnServiceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_EvpnServiceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_EvpnServiceType.
func (E_IETFL2VpnNtwVpnServices_EvpnServiceType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_EvpnServiceType.
func (e E_IETFL2VpnNtwVpnServices_EvpnServiceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_EvpnServiceType")
}

const (
	// IETFL2VpnNtwVpnServices_EvpnServiceType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_EvpnServiceType
	IETFL2VpnNtwVpnServices_EvpnServiceType_UNSET E_IETFL2VpnNtwVpnServices_EvpnServiceType = 0
	// IETFL2VpnNtwVpnServices_EvpnServiceType_vlan_aware_bundle_service_interface corresponds to the value vlan_aware_bundle_service_interface of IETFL2VpnNtwVpnServices_EvpnServiceType
	IETFL2VpnNtwVpnServices_EvpnServiceType_vlan_aware_bundle_service_interface E_IETFL2VpnNtwVpnServices_EvpnServiceType = 1
	// IETFL2VpnNtwVpnServices_EvpnServiceType_vlan_based_service_interface corresponds to the value vlan_based_service_interface of IETFL2VpnNtwVpnServices_EvpnServiceType
	IETFL2VpnNtwVpnServices_EvpnServiceType_vlan_based_service_interface E_IETFL2VpnNtwVpnServices_EvpnServiceType = 2
	// IETFL2VpnNtwVpnServices_EvpnServiceType_vlan_bundle_service_interface corresponds to the value vlan_bundle_service_interface of IETFL2VpnNtwVpnServices_EvpnServiceType
	IETFL2VpnNtwVpnServices_EvpnServiceType_vlan_bundle_service_interface E_IETFL2VpnNtwVpnServices_EvpnServiceType = 3
)

// E_IETFL2VpnNtwVpnServices_LacpMode is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_LacpMode. An additional value named
// IETFL2VpnNtwVpnServices_LacpMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_LacpMode int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_LacpMode implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_LacpMode can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_LacpMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_LacpMode.
func (E_IETFL2VpnNtwVpnServices_LacpMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_LacpMode.
func (e E_IETFL2VpnNtwVpnServices_LacpMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_LacpMode")
}

const (
	// IETFL2VpnNtwVpnServices_LacpMode_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_LacpMode
	IETFL2VpnNtwVpnServices_LacpMode_UNSET E_IETFL2VpnNtwVpnServices_LacpMode = 0
	// IETFL2VpnNtwVpnServices_LacpMode_lacp_active corresponds to the value lacp_active of IETFL2VpnNtwVpnServices_LacpMode
	IETFL2VpnNtwVpnServices_LacpMode_lacp_active E_IETFL2VpnNtwVpnServices_LacpMode = 1
	// IETFL2VpnNtwVpnServices_LacpMode_lacp_passive corresponds to the value lacp_passive of IETFL2VpnNtwVpnServices_LacpMode
	IETFL2VpnNtwVpnServices_LacpMode_lacp_passive E_IETFL2VpnNtwVpnServices_LacpMode = 2
)

// E_IETFL2VpnNtwVpnServices_LoopPreventionType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_LoopPreventionType. An additional value named
// IETFL2VpnNtwVpnServices_LoopPreventionType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_LoopPreventionType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_LoopPreventionType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_LoopPreventionType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_LoopPreventionType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_LoopPreventionType.
func (E_IETFL2VpnNtwVpnServices_LoopPreventionType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_LoopPreventionType.
func (e E_IETFL2VpnNtwVpnServices_LoopPreventionType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_LoopPreventionType")
}

const (
	// IETFL2VpnNtwVpnServices_LoopPreventionType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_LoopPreventionType
	IETFL2VpnNtwVpnServices_LoopPreventionType_UNSET E_IETFL2VpnNtwVpnServices_LoopPreventionType = 0
	// IETFL2VpnNtwVpnServices_LoopPreventionType_shut corresponds to the value shut of IETFL2VpnNtwVpnServices_LoopPreventionType
	IETFL2VpnNtwVpnServices_LoopPreventionType_shut E_IETFL2VpnNtwVpnServices_LoopPreventionType = 1
	// IETFL2VpnNtwVpnServices_LoopPreventionType_trap corresponds to the value trap of IETFL2VpnNtwVpnServices_LoopPreventionType
	IETFL2VpnNtwVpnServices_LoopPreventionType_trap E_IETFL2VpnNtwVpnServices_LoopPreventionType = 2
)

// E_IETFL2VpnNtwVpnServices_MacAction is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_MacAction. An additional value named
// IETFL2VpnNtwVpnServices_MacAction_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_MacAction int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_MacAction implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_MacAction can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_MacAction) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_MacAction.
func (E_IETFL2VpnNtwVpnServices_MacAction) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_MacAction.
func (e E_IETFL2VpnNtwVpnServices_MacAction) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_MacAction")
}

const (
	// IETFL2VpnNtwVpnServices_MacAction_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_MacAction
	IETFL2VpnNtwVpnServices_MacAction_UNSET E_IETFL2VpnNtwVpnServices_MacAction = 0
	// IETFL2VpnNtwVpnServices_MacAction_drop corresponds to the value drop of IETFL2VpnNtwVpnServices_MacAction
	IETFL2VpnNtwVpnServices_MacAction_drop E_IETFL2VpnNtwVpnServices_MacAction = 1
	// IETFL2VpnNtwVpnServices_MacAction_flood corresponds to the value flood of IETFL2VpnNtwVpnServices_MacAction
	IETFL2VpnNtwVpnServices_MacAction_flood E_IETFL2VpnNtwVpnServices_MacAction = 2
	// IETFL2VpnNtwVpnServices_MacAction_warning corresponds to the value warning of IETFL2VpnNtwVpnServices_MacAction
	IETFL2VpnNtwVpnServices_MacAction_warning E_IETFL2VpnNtwVpnServices_MacAction = 3
)

// E_IETFL2VpnNtwVpnServices_MacLearningMode is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_MacLearningMode. An additional value named
// IETFL2VpnNtwVpnServices_MacLearningMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_MacLearningMode int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_MacLearningMode implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_MacLearningMode can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_MacLearningMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_MacLearningMode.
func (E_IETFL2VpnNtwVpnServices_MacLearningMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_MacLearningMode.
func (e E_IETFL2VpnNtwVpnServices_MacLearningMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_MacLearningMode")
}

const (
	// IETFL2VpnNtwVpnServices_MacLearningMode_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_MacLearningMode
	IETFL2VpnNtwVpnServices_MacLearningMode_UNSET E_IETFL2VpnNtwVpnServices_MacLearningMode = 0
	// IETFL2VpnNtwVpnServices_MacLearningMode_control_plane corresponds to the value control_plane of IETFL2VpnNtwVpnServices_MacLearningMode
	IETFL2VpnNtwVpnServices_MacLearningMode_control_plane E_IETFL2VpnNtwVpnServices_MacLearningMode = 1
	// IETFL2VpnNtwVpnServices_MacLearningMode_data_plane corresponds to the value data_plane of IETFL2VpnNtwVpnServices_MacLearningMode
	IETFL2VpnNtwVpnServices_MacLearningMode_data_plane E_IETFL2VpnNtwVpnServices_MacLearningMode = 2
)

// E_IETFL2VpnNtwVpnServices_PmType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_PmType. An additional value named
// IETFL2VpnNtwVpnServices_PmType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_PmType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_PmType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_PmType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_PmType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_PmType.
func (E_IETFL2VpnNtwVpnServices_PmType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_PmType.
func (e E_IETFL2VpnNtwVpnServices_PmType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_PmType")
}

const (
	// IETFL2VpnNtwVpnServices_PmType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_PmType
	IETFL2VpnNtwVpnServices_PmType_UNSET E_IETFL2VpnNtwVpnServices_PmType = 0
	// IETFL2VpnNtwVpnServices_PmType_delay corresponds to the value delay of IETFL2VpnNtwVpnServices_PmType
	IETFL2VpnNtwVpnServices_PmType_delay E_IETFL2VpnNtwVpnServices_PmType = 1
	// IETFL2VpnNtwVpnServices_PmType_loss corresponds to the value loss of IETFL2VpnNtwVpnServices_PmType
	IETFL2VpnNtwVpnServices_PmType_loss E_IETFL2VpnNtwVpnServices_PmType = 2
)

// E_IETFL2VpnNtwVpnServices_PrecedenceType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_PrecedenceType. An additional value named
// IETFL2VpnNtwVpnServices_PrecedenceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_PrecedenceType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_PrecedenceType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_PrecedenceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_PrecedenceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_PrecedenceType.
func (E_IETFL2VpnNtwVpnServices_PrecedenceType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_PrecedenceType.
func (e E_IETFL2VpnNtwVpnServices_PrecedenceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_PrecedenceType")
}

const (
	// IETFL2VpnNtwVpnServices_PrecedenceType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_PrecedenceType
	IETFL2VpnNtwVpnServices_PrecedenceType_UNSET E_IETFL2VpnNtwVpnServices_PrecedenceType = 0
	// IETFL2VpnNtwVpnServices_PrecedenceType_primary corresponds to the value primary of IETFL2VpnNtwVpnServices_PrecedenceType
	IETFL2VpnNtwVpnServices_PrecedenceType_primary E_IETFL2VpnNtwVpnServices_PrecedenceType = 1
	// IETFL2VpnNtwVpnServices_PrecedenceType_secondary corresponds to the value secondary of IETFL2VpnNtwVpnServices_PrecedenceType
	IETFL2VpnNtwVpnServices_PrecedenceType_secondary E_IETFL2VpnNtwVpnServices_PrecedenceType = 2
)

// E_IETFL2VpnNtwVpnServices_PwType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_PwType. An additional value named
// IETFL2VpnNtwVpnServices_PwType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_PwType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_PwType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_PwType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_PwType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_PwType.
func (E_IETFL2VpnNtwVpnServices_PwType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_PwType.
func (e E_IETFL2VpnNtwVpnServices_PwType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_PwType")
}

const (
	// IETFL2VpnNtwVpnServices_PwType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_PwType
	IETFL2VpnNtwVpnServices_PwType_UNSET E_IETFL2VpnNtwVpnServices_PwType = 0
	// IETFL2VpnNtwVpnServices_PwType_ethernet corresponds to the value ethernet of IETFL2VpnNtwVpnServices_PwType
	IETFL2VpnNtwVpnServices_PwType_ethernet E_IETFL2VpnNtwVpnServices_PwType = 1
	// IETFL2VpnNtwVpnServices_PwType_ethernet_tagged corresponds to the value ethernet_tagged of IETFL2VpnNtwVpnServices_PwType
	IETFL2VpnNtwVpnServices_PwType_ethernet_tagged E_IETFL2VpnNtwVpnServices_PwType = 2
)

// E_IETFL2VpnNtwVpnServices_TLdpPwType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_TLdpPwType. An additional value named
// IETFL2VpnNtwVpnServices_TLdpPwType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_TLdpPwType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_TLdpPwType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_TLdpPwType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_TLdpPwType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_TLdpPwType.
func (E_IETFL2VpnNtwVpnServices_TLdpPwType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_TLdpPwType.
func (e E_IETFL2VpnNtwVpnServices_TLdpPwType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_TLdpPwType")
}

const (
	// IETFL2VpnNtwVpnServices_TLdpPwType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_TLdpPwType
	IETFL2VpnNtwVpnServices_TLdpPwType_UNSET E_IETFL2VpnNtwVpnServices_TLdpPwType = 0
	// IETFL2VpnNtwVpnServices_TLdpPwType_hvpls corresponds to the value hvpls of IETFL2VpnNtwVpnServices_TLdpPwType
	IETFL2VpnNtwVpnServices_TLdpPwType_hvpls E_IETFL2VpnNtwVpnServices_TLdpPwType = 1
	// IETFL2VpnNtwVpnServices_TLdpPwType_vpls_type corresponds to the value vpls_type of IETFL2VpnNtwVpnServices_TLdpPwType
	IETFL2VpnNtwVpnServices_TLdpPwType_vpls_type E_IETFL2VpnNtwVpnServices_TLdpPwType = 2
	// IETFL2VpnNtwVpnServices_TLdpPwType_vpws_type corresponds to the value vpws_type of IETFL2VpnNtwVpnServices_TLdpPwType
	IETFL2VpnNtwVpnServices_TLdpPwType_vpws_type E_IETFL2VpnNtwVpnServices_TLdpPwType = 3
)

// E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction. An additional value named
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction.
func (e E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction")
}

const (
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction_UNSET E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction = 0
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction_symmetric corresponds to the value symmetric of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction_symmetric E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction = 1
)

// E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop. An additional value named
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop.
func (e E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop")
}

const (
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop_UNSET E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop = 0
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop_1 corresponds to the value 1 of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop_1 E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop = 1
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop_2 corresponds to the value 2 of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop_2 E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop = 2
)

// E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate. An additional value named
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate.
func (e E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate")
}

const (
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_UNSET E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate = 0
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_1_to_1 corresponds to the value 1_to_1 of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_1_to_1 E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate = 1
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_1_to_2 corresponds to the value 1_to_2 of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_1_to_2 E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate = 2
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_2_to_1 corresponds to the value 2_to_1 of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_2_to_1 E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate = 3
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_2_to_2 corresponds to the value 2_to_2 of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate_2_to_2 E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate = 4
)

// E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown. An additional value named
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown.
func (e E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown")
}

const (
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown_UNSET E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown = 0
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown_up corresponds to the value up of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown_up E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown = 1
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown_down corresponds to the value down of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown_down E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown = 2
)

// E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType. An additional value named
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType.
func (e E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType")
}

const (
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType_UNSET E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType = 0
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType_proactive corresponds to the value proactive of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType_proactive E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType = 1
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType_on_demand corresponds to the value on_demand of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType_on_demand E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType = 2
)

// E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType is a derived int64 type which is used to represent
// the enumerated node IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType. An additional value named
// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType int64

// IsYANGGoEnum ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType implements the yang.GoEnum
// interface. This ensures that IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType.
func (E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType.
func (e E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType")
}

const (
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_UNSET corresponds to the value UNSET of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_UNSET E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType = 0
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_receiver_only corresponds to the value receiver_only of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_receiver_only E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType = 1
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_source_only corresponds to the value source_only of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_source_only E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType = 2
	// IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_source_receiver corresponds to the value source_receiver of IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType
	IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType_source_receiver E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType = 3
)

// E_IETFNetconfAcm_ActionType is a derived int64 type which is used to represent
// the enumerated node IETFNetconfAcm_ActionType. An additional value named
// IETFNetconfAcm_ActionType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFNetconfAcm_ActionType int64

// IsYANGGoEnum ensures that IETFNetconfAcm_ActionType implements the yang.GoEnum
// interface. This ensures that IETFNetconfAcm_ActionType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFNetconfAcm_ActionType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFNetconfAcm_ActionType.
func (E_IETFNetconfAcm_ActionType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFNetconfAcm_ActionType.
func (e E_IETFNetconfAcm_ActionType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFNetconfAcm_ActionType")
}

const (
	// IETFNetconfAcm_ActionType_UNSET corresponds to the value UNSET of IETFNetconfAcm_ActionType
	IETFNetconfAcm_ActionType_UNSET E_IETFNetconfAcm_ActionType = 0
	// IETFNetconfAcm_ActionType_permit corresponds to the value permit of IETFNetconfAcm_ActionType
	IETFNetconfAcm_ActionType_permit E_IETFNetconfAcm_ActionType = 1
	// IETFNetconfAcm_ActionType_deny corresponds to the value deny of IETFNetconfAcm_ActionType
	IETFNetconfAcm_ActionType_deny E_IETFNetconfAcm_ActionType = 2
)

// E_IETFVpnCommon_AdministrativeStatus is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_AdministrativeStatus. An additional value named
// IETFVpnCommon_AdministrativeStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_AdministrativeStatus int64

// IsYANGGoEnum ensures that IETFVpnCommon_AdministrativeStatus implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_AdministrativeStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_AdministrativeStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_AdministrativeStatus.
func (E_IETFVpnCommon_AdministrativeStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_AdministrativeStatus.
func (e E_IETFVpnCommon_AdministrativeStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_AdministrativeStatus")
}

const (
	// IETFVpnCommon_AdministrativeStatus_UNSET corresponds to the value UNSET of IETFVpnCommon_AdministrativeStatus
	IETFVpnCommon_AdministrativeStatus_UNSET E_IETFVpnCommon_AdministrativeStatus = 0
	// IETFVpnCommon_AdministrativeStatus_admin_down corresponds to the value admin_down of IETFVpnCommon_AdministrativeStatus
	IETFVpnCommon_AdministrativeStatus_admin_down E_IETFVpnCommon_AdministrativeStatus = 1
	// IETFVpnCommon_AdministrativeStatus_admin_pre_deployment corresponds to the value admin_pre_deployment of IETFVpnCommon_AdministrativeStatus
	IETFVpnCommon_AdministrativeStatus_admin_pre_deployment E_IETFVpnCommon_AdministrativeStatus = 2
	// IETFVpnCommon_AdministrativeStatus_admin_testing corresponds to the value admin_testing of IETFVpnCommon_AdministrativeStatus
	IETFVpnCommon_AdministrativeStatus_admin_testing E_IETFVpnCommon_AdministrativeStatus = 3
	// IETFVpnCommon_AdministrativeStatus_admin_up corresponds to the value admin_up of IETFVpnCommon_AdministrativeStatus
	IETFVpnCommon_AdministrativeStatus_admin_up E_IETFVpnCommon_AdministrativeStatus = 4
)

// E_IETFVpnCommon_BwType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_BwType. An additional value named
// IETFVpnCommon_BwType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_BwType int64

// IsYANGGoEnum ensures that IETFVpnCommon_BwType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_BwType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_BwType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_BwType.
func (E_IETFVpnCommon_BwType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFVpnCommon_BwType.
func (e E_IETFVpnCommon_BwType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_BwType")
}

const (
	// IETFVpnCommon_BwType_UNSET corresponds to the value UNSET of IETFVpnCommon_BwType
	IETFVpnCommon_BwType_UNSET E_IETFVpnCommon_BwType = 0
	// IETFVpnCommon_BwType_bw_per_cos corresponds to the value bw_per_cos of IETFVpnCommon_BwType
	IETFVpnCommon_BwType_bw_per_cos E_IETFVpnCommon_BwType = 1
	// IETFVpnCommon_BwType_bw_per_port corresponds to the value bw_per_port of IETFVpnCommon_BwType
	IETFVpnCommon_BwType_bw_per_port E_IETFVpnCommon_BwType = 2
	// IETFVpnCommon_BwType_bw_per_service corresponds to the value bw_per_service of IETFVpnCommon_BwType
	IETFVpnCommon_BwType_bw_per_service E_IETFVpnCommon_BwType = 3
	// IETFVpnCommon_BwType_bw_per_site corresponds to the value bw_per_site of IETFVpnCommon_BwType
	IETFVpnCommon_BwType_bw_per_site E_IETFVpnCommon_BwType = 4
)

// E_IETFVpnCommon_CustomerApplication is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_CustomerApplication. An additional value named
// IETFVpnCommon_CustomerApplication_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_CustomerApplication int64

// IsYANGGoEnum ensures that IETFVpnCommon_CustomerApplication implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_CustomerApplication can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_CustomerApplication) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_CustomerApplication.
func (E_IETFVpnCommon_CustomerApplication) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_CustomerApplication.
func (e E_IETFVpnCommon_CustomerApplication) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_CustomerApplication")
}

const (
	// IETFVpnCommon_CustomerApplication_UNSET corresponds to the value UNSET of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_UNSET E_IETFVpnCommon_CustomerApplication = 0
	// IETFVpnCommon_CustomerApplication_database corresponds to the value database of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_database E_IETFVpnCommon_CustomerApplication = 1
	// IETFVpnCommon_CustomerApplication_embb corresponds to the value embb of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_embb E_IETFVpnCommon_CustomerApplication = 2
	// IETFVpnCommon_CustomerApplication_file_transfer corresponds to the value file_transfer of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_file_transfer E_IETFVpnCommon_CustomerApplication = 3
	// IETFVpnCommon_CustomerApplication_games corresponds to the value games of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_games E_IETFVpnCommon_CustomerApplication = 4
	// IETFVpnCommon_CustomerApplication_mail corresponds to the value mail of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_mail E_IETFVpnCommon_CustomerApplication = 5
	// IETFVpnCommon_CustomerApplication_mmtc corresponds to the value mmtc of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_mmtc E_IETFVpnCommon_CustomerApplication = 6
	// IETFVpnCommon_CustomerApplication_network_management corresponds to the value network_management of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_network_management E_IETFVpnCommon_CustomerApplication = 7
	// IETFVpnCommon_CustomerApplication_p2p corresponds to the value p2p of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_p2p E_IETFVpnCommon_CustomerApplication = 8
	// IETFVpnCommon_CustomerApplication_social corresponds to the value social of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_social E_IETFVpnCommon_CustomerApplication = 9
	// IETFVpnCommon_CustomerApplication_urllc corresponds to the value urllc of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_urllc E_IETFVpnCommon_CustomerApplication = 10
	// IETFVpnCommon_CustomerApplication_video corresponds to the value video of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_video E_IETFVpnCommon_CustomerApplication = 11
	// IETFVpnCommon_CustomerApplication_voice corresponds to the value voice of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_voice E_IETFVpnCommon_CustomerApplication = 12
	// IETFVpnCommon_CustomerApplication_web corresponds to the value web of IETFVpnCommon_CustomerApplication
	IETFVpnCommon_CustomerApplication_web E_IETFVpnCommon_CustomerApplication = 13
)

// E_IETFVpnCommon_EncapsulationType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_EncapsulationType. An additional value named
// IETFVpnCommon_EncapsulationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_EncapsulationType int64

// IsYANGGoEnum ensures that IETFVpnCommon_EncapsulationType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_EncapsulationType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_EncapsulationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_EncapsulationType.
func (E_IETFVpnCommon_EncapsulationType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_EncapsulationType.
func (e E_IETFVpnCommon_EncapsulationType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_EncapsulationType")
}

const (
	// IETFVpnCommon_EncapsulationType_UNSET corresponds to the value UNSET of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_UNSET E_IETFVpnCommon_EncapsulationType = 0
	// IETFVpnCommon_EncapsulationType_dot1q corresponds to the value dot1q of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_dot1q E_IETFVpnCommon_EncapsulationType = 1
	// IETFVpnCommon_EncapsulationType_ethernet_type corresponds to the value ethernet_type of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_ethernet_type E_IETFVpnCommon_EncapsulationType = 2
	// IETFVpnCommon_EncapsulationType_lag_int corresponds to the value lag_int of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_lag_int E_IETFVpnCommon_EncapsulationType = 3
	// IETFVpnCommon_EncapsulationType_priority_tagged corresponds to the value priority_tagged of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_priority_tagged E_IETFVpnCommon_EncapsulationType = 4
	// IETFVpnCommon_EncapsulationType_qinany corresponds to the value qinany of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_qinany E_IETFVpnCommon_EncapsulationType = 5
	// IETFVpnCommon_EncapsulationType_qinq corresponds to the value qinq of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_qinq E_IETFVpnCommon_EncapsulationType = 6
	// IETFVpnCommon_EncapsulationType_tagged_int corresponds to the value tagged_int of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_tagged_int E_IETFVpnCommon_EncapsulationType = 7
	// IETFVpnCommon_EncapsulationType_untagged_int corresponds to the value untagged_int of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_untagged_int E_IETFVpnCommon_EncapsulationType = 8
	// IETFVpnCommon_EncapsulationType_vlan_type corresponds to the value vlan_type of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_vlan_type E_IETFVpnCommon_EncapsulationType = 9
	// IETFVpnCommon_EncapsulationType_vxlan corresponds to the value vxlan of IETFVpnCommon_EncapsulationType
	IETFVpnCommon_EncapsulationType_vxlan E_IETFVpnCommon_EncapsulationType = 10
)

// E_IETFVpnCommon_MulticastTreeType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_MulticastTreeType. An additional value named
// IETFVpnCommon_MulticastTreeType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_MulticastTreeType int64

// IsYANGGoEnum ensures that IETFVpnCommon_MulticastTreeType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_MulticastTreeType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_MulticastTreeType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_MulticastTreeType.
func (E_IETFVpnCommon_MulticastTreeType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_MulticastTreeType.
func (e E_IETFVpnCommon_MulticastTreeType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_MulticastTreeType")
}

const (
	// IETFVpnCommon_MulticastTreeType_UNSET corresponds to the value UNSET of IETFVpnCommon_MulticastTreeType
	IETFVpnCommon_MulticastTreeType_UNSET E_IETFVpnCommon_MulticastTreeType = 0
	// IETFVpnCommon_MulticastTreeType_asm_tree_type corresponds to the value asm_tree_type of IETFVpnCommon_MulticastTreeType
	IETFVpnCommon_MulticastTreeType_asm_tree_type E_IETFVpnCommon_MulticastTreeType = 1
	// IETFVpnCommon_MulticastTreeType_bidir_tree_type corresponds to the value bidir_tree_type of IETFVpnCommon_MulticastTreeType
	IETFVpnCommon_MulticastTreeType_bidir_tree_type E_IETFVpnCommon_MulticastTreeType = 2
	// IETFVpnCommon_MulticastTreeType_ssm_tree_type corresponds to the value ssm_tree_type of IETFVpnCommon_MulticastTreeType
	IETFVpnCommon_MulticastTreeType_ssm_tree_type E_IETFVpnCommon_MulticastTreeType = 3
)

// E_IETFVpnCommon_NegMode is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_NegMode. An additional value named
// IETFVpnCommon_NegMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_NegMode int64

// IsYANGGoEnum ensures that IETFVpnCommon_NegMode implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_NegMode can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_NegMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_NegMode.
func (E_IETFVpnCommon_NegMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFVpnCommon_NegMode.
func (e E_IETFVpnCommon_NegMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_NegMode")
}

const (
	// IETFVpnCommon_NegMode_UNSET corresponds to the value UNSET of IETFVpnCommon_NegMode
	IETFVpnCommon_NegMode_UNSET E_IETFVpnCommon_NegMode = 0
	// IETFVpnCommon_NegMode_auto_neg corresponds to the value auto_neg of IETFVpnCommon_NegMode
	IETFVpnCommon_NegMode_auto_neg E_IETFVpnCommon_NegMode = 1
	// IETFVpnCommon_NegMode_full_duplex corresponds to the value full_duplex of IETFVpnCommon_NegMode
	IETFVpnCommon_NegMode_full_duplex E_IETFVpnCommon_NegMode = 2
)

// E_IETFVpnCommon_OperationalStatus is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_OperationalStatus. An additional value named
// IETFVpnCommon_OperationalStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_OperationalStatus int64

// IsYANGGoEnum ensures that IETFVpnCommon_OperationalStatus implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_OperationalStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_OperationalStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_OperationalStatus.
func (E_IETFVpnCommon_OperationalStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_OperationalStatus.
func (e E_IETFVpnCommon_OperationalStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_OperationalStatus")
}

const (
	// IETFVpnCommon_OperationalStatus_UNSET corresponds to the value UNSET of IETFVpnCommon_OperationalStatus
	IETFVpnCommon_OperationalStatus_UNSET E_IETFVpnCommon_OperationalStatus = 0
	// IETFVpnCommon_OperationalStatus_op_down corresponds to the value op_down of IETFVpnCommon_OperationalStatus
	IETFVpnCommon_OperationalStatus_op_down E_IETFVpnCommon_OperationalStatus = 1
	// IETFVpnCommon_OperationalStatus_op_unknown corresponds to the value op_unknown of IETFVpnCommon_OperationalStatus
	IETFVpnCommon_OperationalStatus_op_unknown E_IETFVpnCommon_OperationalStatus = 2
	// IETFVpnCommon_OperationalStatus_op_up corresponds to the value op_up of IETFVpnCommon_OperationalStatus
	IETFVpnCommon_OperationalStatus_op_up E_IETFVpnCommon_OperationalStatus = 3
)

// E_IETFVpnCommon_ProtocolType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_ProtocolType. An additional value named
// IETFVpnCommon_ProtocolType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_ProtocolType int64

// IsYANGGoEnum ensures that IETFVpnCommon_ProtocolType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_ProtocolType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_ProtocolType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_ProtocolType.
func (E_IETFVpnCommon_ProtocolType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFVpnCommon_ProtocolType.
func (e E_IETFVpnCommon_ProtocolType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_ProtocolType")
}

const (
	// IETFVpnCommon_ProtocolType_UNSET corresponds to the value UNSET of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_UNSET E_IETFVpnCommon_ProtocolType = 0
	// IETFVpnCommon_ProtocolType_bgp_lu corresponds to the value bgp_lu of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_bgp_lu E_IETFVpnCommon_ProtocolType = 1
	// IETFVpnCommon_ProtocolType_geneve corresponds to the value geneve of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_geneve E_IETFVpnCommon_ProtocolType = 2
	// IETFVpnCommon_ProtocolType_gre corresponds to the value gre of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_gre E_IETFVpnCommon_ProtocolType = 3
	// IETFVpnCommon_ProtocolType_gre_v4 corresponds to the value gre_v4 of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_gre_v4 E_IETFVpnCommon_ProtocolType = 4
	// IETFVpnCommon_ProtocolType_gre_v6 corresponds to the value gre_v6 of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_gre_v6 E_IETFVpnCommon_ProtocolType = 5
	// IETFVpnCommon_ProtocolType_ip_in_ip corresponds to the value ip_in_ip of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_ip_in_ip E_IETFVpnCommon_ProtocolType = 6
	// IETFVpnCommon_ProtocolType_ip_in_ipv4 corresponds to the value ip_in_ipv4 of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_ip_in_ipv4 E_IETFVpnCommon_ProtocolType = 7
	// IETFVpnCommon_ProtocolType_ip_in_ipv6 corresponds to the value ip_in_ipv6 of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_ip_in_ipv6 E_IETFVpnCommon_ProtocolType = 8
	// IETFVpnCommon_ProtocolType_ldp corresponds to the value ldp of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_ldp E_IETFVpnCommon_ProtocolType = 9
	// IETFVpnCommon_ProtocolType_mpls_in_udp corresponds to the value mpls_in_udp of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_mpls_in_udp E_IETFVpnCommon_ProtocolType = 10
	// IETFVpnCommon_ProtocolType_rsvp_te corresponds to the value rsvp_te of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_rsvp_te E_IETFVpnCommon_ProtocolType = 11
	// IETFVpnCommon_ProtocolType_sr corresponds to the value sr of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_sr E_IETFVpnCommon_ProtocolType = 12
	// IETFVpnCommon_ProtocolType_sr_mpls corresponds to the value sr_mpls of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_sr_mpls E_IETFVpnCommon_ProtocolType = 13
	// IETFVpnCommon_ProtocolType_sr_mpls_over_ip corresponds to the value sr_mpls_over_ip of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_sr_mpls_over_ip E_IETFVpnCommon_ProtocolType = 14
	// IETFVpnCommon_ProtocolType_srv6 corresponds to the value srv6 of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_srv6 E_IETFVpnCommon_ProtocolType = 15
	// IETFVpnCommon_ProtocolType_unknown corresponds to the value unknown of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_unknown E_IETFVpnCommon_ProtocolType = 16
	// IETFVpnCommon_ProtocolType_vxlan_trans corresponds to the value vxlan_trans of IETFVpnCommon_ProtocolType
	IETFVpnCommon_ProtocolType_vxlan_trans E_IETFVpnCommon_ProtocolType = 17
)

// E_IETFVpnCommon_QosProfileDirection is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_QosProfileDirection. An additional value named
// IETFVpnCommon_QosProfileDirection_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_QosProfileDirection int64

// IsYANGGoEnum ensures that IETFVpnCommon_QosProfileDirection implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_QosProfileDirection can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_QosProfileDirection) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_QosProfileDirection.
func (E_IETFVpnCommon_QosProfileDirection) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_QosProfileDirection.
func (e E_IETFVpnCommon_QosProfileDirection) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_QosProfileDirection")
}

const (
	// IETFVpnCommon_QosProfileDirection_UNSET corresponds to the value UNSET of IETFVpnCommon_QosProfileDirection
	IETFVpnCommon_QosProfileDirection_UNSET E_IETFVpnCommon_QosProfileDirection = 0
	// IETFVpnCommon_QosProfileDirection_both corresponds to the value both of IETFVpnCommon_QosProfileDirection
	IETFVpnCommon_QosProfileDirection_both E_IETFVpnCommon_QosProfileDirection = 1
	// IETFVpnCommon_QosProfileDirection_site_to_wan corresponds to the value site_to_wan of IETFVpnCommon_QosProfileDirection
	IETFVpnCommon_QosProfileDirection_site_to_wan E_IETFVpnCommon_QosProfileDirection = 2
	// IETFVpnCommon_QosProfileDirection_wan_to_site corresponds to the value wan_to_site of IETFVpnCommon_QosProfileDirection
	IETFVpnCommon_QosProfileDirection_wan_to_site E_IETFVpnCommon_QosProfileDirection = 3
)

// E_IETFVpnCommon_Role is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_Role. An additional value named
// IETFVpnCommon_Role_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_Role int64

// IsYANGGoEnum ensures that IETFVpnCommon_Role implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_Role can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_Role) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_Role.
func (E_IETFVpnCommon_Role) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFVpnCommon_Role.
func (e E_IETFVpnCommon_Role) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_Role")
}

const (
	// IETFVpnCommon_Role_UNSET corresponds to the value UNSET of IETFVpnCommon_Role
	IETFVpnCommon_Role_UNSET E_IETFVpnCommon_Role = 0
	// IETFVpnCommon_Role_any_to_any_role corresponds to the value any_to_any_role of IETFVpnCommon_Role
	IETFVpnCommon_Role_any_to_any_role E_IETFVpnCommon_Role = 1
	// IETFVpnCommon_Role_custom_role corresponds to the value custom_role of IETFVpnCommon_Role
	IETFVpnCommon_Role_custom_role E_IETFVpnCommon_Role = 2
	// IETFVpnCommon_Role_hub_role corresponds to the value hub_role of IETFVpnCommon_Role
	IETFVpnCommon_Role_hub_role E_IETFVpnCommon_Role = 3
	// IETFVpnCommon_Role_spoke_role corresponds to the value spoke_role of IETFVpnCommon_Role
	IETFVpnCommon_Role_spoke_role E_IETFVpnCommon_Role = 4
)

// E_IETFVpnCommon_RouteTargetType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_RouteTargetType. An additional value named
// IETFVpnCommon_RouteTargetType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_RouteTargetType int64

// IsYANGGoEnum ensures that IETFVpnCommon_RouteTargetType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_RouteTargetType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_RouteTargetType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_RouteTargetType.
func (E_IETFVpnCommon_RouteTargetType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_RouteTargetType.
func (e E_IETFVpnCommon_RouteTargetType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_RouteTargetType")
}

const (
	// IETFVpnCommon_RouteTargetType_UNSET corresponds to the value UNSET of IETFVpnCommon_RouteTargetType
	IETFVpnCommon_RouteTargetType_UNSET E_IETFVpnCommon_RouteTargetType = 0
	// IETFVpnCommon_RouteTargetType_import corresponds to the value import of IETFVpnCommon_RouteTargetType
	IETFVpnCommon_RouteTargetType_import E_IETFVpnCommon_RouteTargetType = 1
	// IETFVpnCommon_RouteTargetType_export corresponds to the value export of IETFVpnCommon_RouteTargetType
	IETFVpnCommon_RouteTargetType_export E_IETFVpnCommon_RouteTargetType = 2
	// IETFVpnCommon_RouteTargetType_both corresponds to the value both of IETFVpnCommon_RouteTargetType
	IETFVpnCommon_RouteTargetType_both E_IETFVpnCommon_RouteTargetType = 3
)

// E_IETFVpnCommon_ServiceType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_ServiceType. An additional value named
// IETFVpnCommon_ServiceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_ServiceType int64

// IsYANGGoEnum ensures that IETFVpnCommon_ServiceType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_ServiceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_ServiceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_ServiceType.
func (E_IETFVpnCommon_ServiceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFVpnCommon_ServiceType.
func (e E_IETFVpnCommon_ServiceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_ServiceType")
}

const (
	// IETFVpnCommon_ServiceType_UNSET corresponds to the value UNSET of IETFVpnCommon_ServiceType
	IETFVpnCommon_ServiceType_UNSET E_IETFVpnCommon_ServiceType = 0
	// IETFVpnCommon_ServiceType_l3vpn corresponds to the value l3vpn of IETFVpnCommon_ServiceType
	IETFVpnCommon_ServiceType_l3vpn E_IETFVpnCommon_ServiceType = 1
	// IETFVpnCommon_ServiceType_mpls_evpn corresponds to the value mpls_evpn of IETFVpnCommon_ServiceType
	IETFVpnCommon_ServiceType_mpls_evpn E_IETFVpnCommon_ServiceType = 2
	// IETFVpnCommon_ServiceType_pbb_evpn corresponds to the value pbb_evpn of IETFVpnCommon_ServiceType
	IETFVpnCommon_ServiceType_pbb_evpn E_IETFVpnCommon_ServiceType = 3
	// IETFVpnCommon_ServiceType_vpls corresponds to the value vpls of IETFVpnCommon_ServiceType
	IETFVpnCommon_ServiceType_vpls E_IETFVpnCommon_ServiceType = 4
	// IETFVpnCommon_ServiceType_vpws corresponds to the value vpws of IETFVpnCommon_ServiceType
	IETFVpnCommon_ServiceType_vpws E_IETFVpnCommon_ServiceType = 5
	// IETFVpnCommon_ServiceType_vpws_evpn corresponds to the value vpws_evpn of IETFVpnCommon_ServiceType
	IETFVpnCommon_ServiceType_vpws_evpn E_IETFVpnCommon_ServiceType = 6
	// IETFVpnCommon_ServiceType_vxlan_evpn corresponds to the value vxlan_evpn of IETFVpnCommon_ServiceType
	IETFVpnCommon_ServiceType_vxlan_evpn E_IETFVpnCommon_ServiceType = 7
)

// E_IETFVpnCommon_TagType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_TagType. An additional value named
// IETFVpnCommon_TagType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_TagType int64

// IsYANGGoEnum ensures that IETFVpnCommon_TagType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_TagType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_TagType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_TagType.
func (E_IETFVpnCommon_TagType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFVpnCommon_TagType.
func (e E_IETFVpnCommon_TagType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_TagType")
}

const (
	// IETFVpnCommon_TagType_UNSET corresponds to the value UNSET of IETFVpnCommon_TagType
	IETFVpnCommon_TagType_UNSET E_IETFVpnCommon_TagType = 0
	// IETFVpnCommon_TagType_c_vlan corresponds to the value c_vlan of IETFVpnCommon_TagType
	IETFVpnCommon_TagType_c_vlan E_IETFVpnCommon_TagType = 1
	// IETFVpnCommon_TagType_s_c_vlan corresponds to the value s_c_vlan of IETFVpnCommon_TagType
	IETFVpnCommon_TagType_s_c_vlan E_IETFVpnCommon_TagType = 2
	// IETFVpnCommon_TagType_s_vlan corresponds to the value s_vlan of IETFVpnCommon_TagType
	IETFVpnCommon_TagType_s_vlan E_IETFVpnCommon_TagType = 3
)

// E_IETFVpnCommon_TransportInstanceType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_TransportInstanceType. An additional value named
// IETFVpnCommon_TransportInstanceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_TransportInstanceType int64

// IsYANGGoEnum ensures that IETFVpnCommon_TransportInstanceType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_TransportInstanceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_TransportInstanceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_TransportInstanceType.
func (E_IETFVpnCommon_TransportInstanceType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_TransportInstanceType.
func (e E_IETFVpnCommon_TransportInstanceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_TransportInstanceType")
}

const (
	// IETFVpnCommon_TransportInstanceType_UNSET corresponds to the value UNSET of IETFVpnCommon_TransportInstanceType
	IETFVpnCommon_TransportInstanceType_UNSET E_IETFVpnCommon_TransportInstanceType = 0
	// IETFVpnCommon_TransportInstanceType_enhanced_vpn corresponds to the value enhanced_vpn of IETFVpnCommon_TransportInstanceType
	IETFVpnCommon_TransportInstanceType_enhanced_vpn E_IETFVpnCommon_TransportInstanceType = 1
	// IETFVpnCommon_TransportInstanceType_ietf_network_slice corresponds to the value ietf_network_slice of IETFVpnCommon_TransportInstanceType
	IETFVpnCommon_TransportInstanceType_ietf_network_slice E_IETFVpnCommon_TransportInstanceType = 2
	// IETFVpnCommon_TransportInstanceType_virtual_network corresponds to the value virtual_network of IETFVpnCommon_TransportInstanceType
	IETFVpnCommon_TransportInstanceType_virtual_network E_IETFVpnCommon_TransportInstanceType = 3
)

// E_IETFVpnCommon_VpnSignalingType is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_VpnSignalingType. An additional value named
// IETFVpnCommon_VpnSignalingType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_VpnSignalingType int64

// IsYANGGoEnum ensures that IETFVpnCommon_VpnSignalingType implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_VpnSignalingType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_VpnSignalingType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_VpnSignalingType.
func (E_IETFVpnCommon_VpnSignalingType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IETFVpnCommon_VpnSignalingType.
func (e E_IETFVpnCommon_VpnSignalingType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_VpnSignalingType")
}

const (
	// IETFVpnCommon_VpnSignalingType_UNSET corresponds to the value UNSET of IETFVpnCommon_VpnSignalingType
	IETFVpnCommon_VpnSignalingType_UNSET E_IETFVpnCommon_VpnSignalingType = 0
	// IETFVpnCommon_VpnSignalingType_bgp_signaling corresponds to the value bgp_signaling of IETFVpnCommon_VpnSignalingType
	IETFVpnCommon_VpnSignalingType_bgp_signaling E_IETFVpnCommon_VpnSignalingType = 1
	// IETFVpnCommon_VpnSignalingType_l2tp_signaling corresponds to the value l2tp_signaling of IETFVpnCommon_VpnSignalingType
	IETFVpnCommon_VpnSignalingType_l2tp_signaling E_IETFVpnCommon_VpnSignalingType = 2
	// IETFVpnCommon_VpnSignalingType_ldp_signaling corresponds to the value ldp_signaling of IETFVpnCommon_VpnSignalingType
	IETFVpnCommon_VpnSignalingType_ldp_signaling E_IETFVpnCommon_VpnSignalingType = 3
)

// E_IETFVpnCommon_VpnTopology is a derived int64 type which is used to represent
// the enumerated node IETFVpnCommon_VpnTopology. An additional value named
// IETFVpnCommon_VpnTopology_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFVpnCommon_VpnTopology int64

// IsYANGGoEnum ensures that IETFVpnCommon_VpnTopology implements the yang.GoEnum
// interface. This ensures that IETFVpnCommon_VpnTopology can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFVpnCommon_VpnTopology) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFVpnCommon_VpnTopology.
func (E_IETFVpnCommon_VpnTopology) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFVpnCommon_VpnTopology.
func (e E_IETFVpnCommon_VpnTopology) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFVpnCommon_VpnTopology")
}

const (
	// IETFVpnCommon_VpnTopology_UNSET corresponds to the value UNSET of IETFVpnCommon_VpnTopology
	IETFVpnCommon_VpnTopology_UNSET E_IETFVpnCommon_VpnTopology = 0
	// IETFVpnCommon_VpnTopology_any_to_any corresponds to the value any_to_any of IETFVpnCommon_VpnTopology
	IETFVpnCommon_VpnTopology_any_to_any E_IETFVpnCommon_VpnTopology = 1
	// IETFVpnCommon_VpnTopology_custom corresponds to the value custom of IETFVpnCommon_VpnTopology
	IETFVpnCommon_VpnTopology_custom E_IETFVpnCommon_VpnTopology = 2
	// IETFVpnCommon_VpnTopology_hub_spoke corresponds to the value hub_spoke of IETFVpnCommon_VpnTopology
	IETFVpnCommon_VpnTopology_hub_spoke E_IETFVpnCommon_VpnTopology = 3
	// IETFVpnCommon_VpnTopology_hub_spoke_disjoint corresponds to the value hub_spoke_disjoint of IETFVpnCommon_VpnTopology
	IETFVpnCommon_VpnTopology_hub_spoke_disjoint E_IETFVpnCommon_VpnTopology = 4
)

// E_IanaBgpL2Encaps_BgpL2EncapsType is a derived int64 type which is used to represent
// the enumerated node IanaBgpL2Encaps_BgpL2EncapsType. An additional value named
// IanaBgpL2Encaps_BgpL2EncapsType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IanaBgpL2Encaps_BgpL2EncapsType int64

// IsYANGGoEnum ensures that IanaBgpL2Encaps_BgpL2EncapsType implements the yang.GoEnum
// interface. This ensures that IanaBgpL2Encaps_BgpL2EncapsType can be identified as a
// mapped type for a YANG enumeration.
func (E_IanaBgpL2Encaps_BgpL2EncapsType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IanaBgpL2Encaps_BgpL2EncapsType.
func (E_IanaBgpL2Encaps_BgpL2EncapsType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IanaBgpL2Encaps_BgpL2EncapsType.
func (e E_IanaBgpL2Encaps_BgpL2EncapsType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IanaBgpL2Encaps_BgpL2EncapsType")
}

const (
	// IanaBgpL2Encaps_BgpL2EncapsType_UNSET corresponds to the value UNSET of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_UNSET E_IanaBgpL2Encaps_BgpL2EncapsType = 0
	// IanaBgpL2Encaps_BgpL2EncapsType_atm_aal5 corresponds to the value atm_aal5 of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_atm_aal5 E_IanaBgpL2Encaps_BgpL2EncapsType = 1
	// IanaBgpL2Encaps_BgpL2EncapsType_atm_cell corresponds to the value atm_cell of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_atm_cell E_IanaBgpL2Encaps_BgpL2EncapsType = 2
	// IanaBgpL2Encaps_BgpL2EncapsType_atm_to_vcc corresponds to the value atm_to_vcc of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_atm_to_vcc E_IanaBgpL2Encaps_BgpL2EncapsType = 3
	// IanaBgpL2Encaps_BgpL2EncapsType_atm_to_vpc corresponds to the value atm_to_vpc of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_atm_to_vpc E_IanaBgpL2Encaps_BgpL2EncapsType = 4
	// IanaBgpL2Encaps_BgpL2EncapsType_cas corresponds to the value cas of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_cas E_IanaBgpL2Encaps_BgpL2EncapsType = 5
	// IanaBgpL2Encaps_BgpL2EncapsType_circuit_emulation corresponds to the value circuit_emulation of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_circuit_emulation E_IanaBgpL2Encaps_BgpL2EncapsType = 6
	// IanaBgpL2Encaps_BgpL2EncapsType_dlci corresponds to the value dlci of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_dlci E_IanaBgpL2Encaps_BgpL2EncapsType = 7
	// IanaBgpL2Encaps_BgpL2EncapsType_ds1 corresponds to the value ds1 of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_ds1 E_IanaBgpL2Encaps_BgpL2EncapsType = 8
	// IanaBgpL2Encaps_BgpL2EncapsType_e1 corresponds to the value e1 of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_e1 E_IanaBgpL2Encaps_BgpL2EncapsType = 9
	// IanaBgpL2Encaps_BgpL2EncapsType_e3 corresponds to the value e3 of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_e3 E_IanaBgpL2Encaps_BgpL2EncapsType = 10
	// IanaBgpL2Encaps_BgpL2EncapsType_esf corresponds to the value esf of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_esf E_IanaBgpL2Encaps_BgpL2EncapsType = 11
	// IanaBgpL2Encaps_BgpL2EncapsType_ethernet_raw_mode corresponds to the value ethernet_raw_mode of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_ethernet_raw_mode E_IanaBgpL2Encaps_BgpL2EncapsType = 12
	// IanaBgpL2Encaps_BgpL2EncapsType_ethernet_tagged_mode corresponds to the value ethernet_tagged_mode of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_ethernet_tagged_mode E_IanaBgpL2Encaps_BgpL2EncapsType = 13
	// IanaBgpL2Encaps_BgpL2EncapsType_fr_port_mode corresponds to the value fr_port_mode of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_fr_port_mode E_IanaBgpL2Encaps_BgpL2EncapsType = 14
	// IanaBgpL2Encaps_BgpL2EncapsType_frame_relay corresponds to the value frame_relay of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_frame_relay E_IanaBgpL2Encaps_BgpL2EncapsType = 15
	// IanaBgpL2Encaps_BgpL2EncapsType_hdlc corresponds to the value hdlc of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_hdlc E_IanaBgpL2Encaps_BgpL2EncapsType = 16
	// IanaBgpL2Encaps_BgpL2EncapsType_layer_2_transport corresponds to the value layer_2_transport of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_layer_2_transport E_IanaBgpL2Encaps_BgpL2EncapsType = 17
	// IanaBgpL2Encaps_BgpL2EncapsType_ppp corresponds to the value ppp of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_ppp E_IanaBgpL2Encaps_BgpL2EncapsType = 18
	// IanaBgpL2Encaps_BgpL2EncapsType_sf corresponds to the value sf of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_sf E_IanaBgpL2Encaps_BgpL2EncapsType = 19
	// IanaBgpL2Encaps_BgpL2EncapsType_structure_aware corresponds to the value structure_aware of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_structure_aware E_IanaBgpL2Encaps_BgpL2EncapsType = 20
	// IanaBgpL2Encaps_BgpL2EncapsType_t1 corresponds to the value t1 of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_t1 E_IanaBgpL2Encaps_BgpL2EncapsType = 21
	// IanaBgpL2Encaps_BgpL2EncapsType_t3 corresponds to the value t3 of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_t3 E_IanaBgpL2Encaps_BgpL2EncapsType = 22
	// IanaBgpL2Encaps_BgpL2EncapsType_vpls corresponds to the value vpls of IanaBgpL2Encaps_BgpL2EncapsType
	IanaBgpL2Encaps_BgpL2EncapsType_vpls E_IanaBgpL2Encaps_BgpL2EncapsType = 23
)

// E_IanaPseudowireTypes_IanaPwTypes is a derived int64 type which is used to represent
// the enumerated node IanaPseudowireTypes_IanaPwTypes. An additional value named
// IanaPseudowireTypes_IanaPwTypes_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IanaPseudowireTypes_IanaPwTypes int64

// IsYANGGoEnum ensures that IanaPseudowireTypes_IanaPwTypes implements the yang.GoEnum
// interface. This ensures that IanaPseudowireTypes_IanaPwTypes can be identified as a
// mapped type for a YANG enumeration.
func (E_IanaPseudowireTypes_IanaPwTypes) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IanaPseudowireTypes_IanaPwTypes.
func (E_IanaPseudowireTypes_IanaPwTypes) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_IanaPseudowireTypes_IanaPwTypes.
func (e E_IanaPseudowireTypes_IanaPwTypes) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IanaPseudowireTypes_IanaPwTypes")
}

const (
	// IanaPseudowireTypes_IanaPwTypes_UNSET corresponds to the value UNSET of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_UNSET E_IanaPseudowireTypes_IanaPwTypes = 0
	// IanaPseudowireTypes_IanaPwTypes_atm_aal5 corresponds to the value atm_aal5 of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_atm_aal5 E_IanaPseudowireTypes_IanaPwTypes = 1
	// IanaPseudowireTypes_IanaPwTypes_atm_aal5_vcc corresponds to the value atm_aal5_vcc of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_atm_aal5_vcc E_IanaPseudowireTypes_IanaPwTypes = 2
	// IanaPseudowireTypes_IanaPwTypes_atm_cell corresponds to the value atm_cell of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_atm_cell E_IanaPseudowireTypes_IanaPwTypes = 3
	// IanaPseudowireTypes_IanaPwTypes_atm_one_to_one_vcc corresponds to the value atm_one_to_one_vcc of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_atm_one_to_one_vcc E_IanaPseudowireTypes_IanaPwTypes = 4
	// IanaPseudowireTypes_IanaPwTypes_atm_one_to_one_vpc corresponds to the value atm_one_to_one_vpc of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_atm_one_to_one_vpc E_IanaPseudowireTypes_IanaPwTypes = 5
	// IanaPseudowireTypes_IanaPwTypes_atm_to_vcc corresponds to the value atm_to_vcc of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_atm_to_vcc E_IanaPseudowireTypes_IanaPwTypes = 6
	// IanaPseudowireTypes_IanaPwTypes_atm_to_vpc corresponds to the value atm_to_vpc of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_atm_to_vpc E_IanaPseudowireTypes_IanaPwTypes = 7
	// IanaPseudowireTypes_IanaPwTypes_atm_vp_virtual_trunk corresponds to the value atm_vp_virtual_trunk of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_atm_vp_virtual_trunk E_IanaPseudowireTypes_IanaPwTypes = 8
	// IanaPseudowireTypes_IanaPwTypes_ces_over_psn corresponds to the value ces_over_psn of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_ces_over_psn E_IanaPseudowireTypes_IanaPwTypes = 9
	// IanaPseudowireTypes_IanaPwTypes_ces_over_psn_cas corresponds to the value ces_over_psn_cas of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_ces_over_psn_cas E_IanaPseudowireTypes_IanaPwTypes = 10
	// IanaPseudowireTypes_IanaPwTypes_circuit_emulation_mpls corresponds to the value circuit_emulation_mpls of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_circuit_emulation_mpls E_IanaPseudowireTypes_IanaPwTypes = 11
	// IanaPseudowireTypes_IanaPwTypes_circuit_emulation_packet corresponds to the value circuit_emulation_packet of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_circuit_emulation_packet E_IanaPseudowireTypes_IanaPwTypes = 12
	// IanaPseudowireTypes_IanaPwTypes_crtp corresponds to the value crtp of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_crtp E_IanaPseudowireTypes_IanaPwTypes = 13
	// IanaPseudowireTypes_IanaPwTypes_dlci corresponds to the value dlci of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_dlci E_IanaPseudowireTypes_IanaPwTypes = 14
	// IanaPseudowireTypes_IanaPwTypes_e1 corresponds to the value e1 of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_e1 E_IanaPseudowireTypes_IanaPwTypes = 15
	// IanaPseudowireTypes_IanaPwTypes_e3 corresponds to the value e3 of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_e3 E_IanaPseudowireTypes_IanaPwTypes = 16
	// IanaPseudowireTypes_IanaPwTypes_ecrtp corresponds to the value ecrtp of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_ecrtp E_IanaPseudowireTypes_IanaPwTypes = 17
	// IanaPseudowireTypes_IanaPwTypes_ethernet corresponds to the value ethernet of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_ethernet E_IanaPseudowireTypes_IanaPwTypes = 18
	// IanaPseudowireTypes_IanaPwTypes_ethernet_tagged_mode corresponds to the value ethernet_tagged_mode of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_ethernet_tagged_mode E_IanaPseudowireTypes_IanaPwTypes = 19
	// IanaPseudowireTypes_IanaPwTypes_fc_port_mode corresponds to the value fc_port_mode of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_fc_port_mode E_IanaPseudowireTypes_IanaPwTypes = 20
	// IanaPseudowireTypes_IanaPwTypes_fr_port_mode corresponds to the value fr_port_mode of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_fr_port_mode E_IanaPseudowireTypes_IanaPwTypes = 21
	// IanaPseudowireTypes_IanaPwTypes_frame_relay corresponds to the value frame_relay of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_frame_relay E_IanaPseudowireTypes_IanaPwTypes = 22
	// IanaPseudowireTypes_IanaPwTypes_hdlc corresponds to the value hdlc of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_hdlc E_IanaPseudowireTypes_IanaPwTypes = 23
	// IanaPseudowireTypes_IanaPwTypes_iphc corresponds to the value iphc of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_iphc E_IanaPseudowireTypes_IanaPwTypes = 24
	// IanaPseudowireTypes_IanaPwTypes_layer_2_transport corresponds to the value layer_2_transport of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_layer_2_transport E_IanaPseudowireTypes_IanaPwTypes = 25
	// IanaPseudowireTypes_IanaPwTypes_ppp corresponds to the value ppp of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_ppp E_IanaPseudowireTypes_IanaPwTypes = 26
	// IanaPseudowireTypes_IanaPwTypes_rohc corresponds to the value rohc of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_rohc E_IanaPseudowireTypes_IanaPwTypes = 27
	// IanaPseudowireTypes_IanaPwTypes_t1 corresponds to the value t1 of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_t1 E_IanaPseudowireTypes_IanaPwTypes = 28
	// IanaPseudowireTypes_IanaPwTypes_t3 corresponds to the value t3 of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_t3 E_IanaPseudowireTypes_IanaPwTypes = 29
	// IanaPseudowireTypes_IanaPwTypes_tdm_over_ip_aal1 corresponds to the value tdm_over_ip_aal1 of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_tdm_over_ip_aal1 E_IanaPseudowireTypes_IanaPwTypes = 30
	// IanaPseudowireTypes_IanaPwTypes_tdm_over_ip_aal2 corresponds to the value tdm_over_ip_aal2 of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_tdm_over_ip_aal2 E_IanaPseudowireTypes_IanaPwTypes = 31
	// IanaPseudowireTypes_IanaPwTypes_wildcard corresponds to the value wildcard of IanaPseudowireTypes_IanaPwTypes
	IanaPseudowireTypes_IanaPwTypes_wildcard E_IanaPseudowireTypes_IanaPwTypes = 32
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFL2VpnNtwVpnServices_ColorType": {
		1: {Name: "green", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "red", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		3: {Name: "yellow", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_EvpnServiceType": {
		1: {Name: "vlan-aware-bundle-service-interface", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "vlan-based-service-interface", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		3: {Name: "vlan-bundle-service-interface", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_LacpMode": {
		1: {Name: "lacp-active", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "lacp-passive", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_LoopPreventionType": {
		1: {Name: "shut", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "trap", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_MacAction": {
		1: {Name: "drop", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "flood", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		3: {Name: "warning", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_MacLearningMode": {
		1: {Name: "control-plane", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "data-plane", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_PmType": {
		1: {Name: "delay", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "loss", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_PrecedenceType": {
		1: {Name: "primary", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "secondary", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_PwType": {
		1: {Name: "ethernet", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "ethernet-tagged", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_TLdpPwType": {
		1: {Name: "hvpls", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		2: {Name: "vpls-type", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
		3: {Name: "vpws-type", DefiningModule: "ietf-l2vpn-ntw-vpn-services"},
	},
	"E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction": {
		1: {Name: "symmetric"},
	},
	"E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop": {
		1: {Name: "1"},
		2: {Name: "2"},
	},
	"E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate": {
		1: {Name: "1-to-1"},
		2: {Name: "1-to-2"},
		3: {Name: "2-to-1"},
		4: {Name: "2-to-2"},
	},
	"E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType": {
		1: {Name: "proactive"},
		2: {Name: "on-demand"},
	},
	"E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType": {
		1: {Name: "receiver-only"},
		2: {Name: "source-only"},
		3: {Name: "source-receiver"},
	},
	"E_IETFNetconfAcm_ActionType": {
		1: {Name: "permit"},
		2: {Name: "deny"},
	},
	"E_IETFVpnCommon_AdministrativeStatus": {
		1: {Name: "admin-down", DefiningModule: "ietf-vpn-common"},
		2: {Name: "admin-pre-deployment", DefiningModule: "ietf-vpn-common"},
		3: {Name: "admin-testing", DefiningModule: "ietf-vpn-common"},
		4: {Name: "admin-up", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_BwType": {
		1: {Name: "bw-per-cos", DefiningModule: "ietf-vpn-common"},
		2: {Name: "bw-per-port", DefiningModule: "ietf-vpn-common"},
		3: {Name: "bw-per-service", DefiningModule: "ietf-vpn-common"},
		4: {Name: "bw-per-site", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_CustomerApplication": {
		1:  {Name: "database", DefiningModule: "ietf-vpn-common"},
		2:  {Name: "embb", DefiningModule: "ietf-vpn-common"},
		3:  {Name: "file-transfer", DefiningModule: "ietf-vpn-common"},
		4:  {Name: "games", DefiningModule: "ietf-vpn-common"},
		5:  {Name: "mail", DefiningModule: "ietf-vpn-common"},
		6:  {Name: "mmtc", DefiningModule: "ietf-vpn-common"},
		7:  {Name: "network-management", DefiningModule: "ietf-vpn-common"},
		8:  {Name: "p2p", DefiningModule: "ietf-vpn-common"},
		9:  {Name: "social", DefiningModule: "ietf-vpn-common"},
		10: {Name: "urllc", DefiningModule: "ietf-vpn-common"},
		11: {Name: "video", DefiningModule: "ietf-vpn-common"},
		12: {Name: "voice", DefiningModule: "ietf-vpn-common"},
		13: {Name: "web", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_EncapsulationType": {
		1:  {Name: "dot1q", DefiningModule: "ietf-vpn-common"},
		2:  {Name: "ethernet-type", DefiningModule: "ietf-vpn-common"},
		3:  {Name: "lag-int", DefiningModule: "ietf-vpn-common"},
		4:  {Name: "priority-tagged", DefiningModule: "ietf-vpn-common"},
		5:  {Name: "qinany", DefiningModule: "ietf-vpn-common"},
		6:  {Name: "qinq", DefiningModule: "ietf-vpn-common"},
		7:  {Name: "tagged-int", DefiningModule: "ietf-vpn-common"},
		8:  {Name: "untagged-int", DefiningModule: "ietf-vpn-common"},
		9:  {Name: "vlan-type", DefiningModule: "ietf-vpn-common"},
		10: {Name: "vxlan", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_MulticastTreeType": {
		1: {Name: "asm-tree-type", DefiningModule: "ietf-vpn-common"},
		2: {Name: "bidir-tree-type", DefiningModule: "ietf-vpn-common"},
		3: {Name: "ssm-tree-type", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_NegMode": {
		1: {Name: "auto-neg", DefiningModule: "ietf-vpn-common"},
		2: {Name: "full-duplex", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_OperationalStatus": {
		1: {Name: "op-down", DefiningModule: "ietf-vpn-common"},
		2: {Name: "op-unknown", DefiningModule: "ietf-vpn-common"},
		3: {Name: "op-up", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_ProtocolType": {
		1:  {Name: "bgp-lu", DefiningModule: "ietf-vpn-common"},
		2:  {Name: "geneve", DefiningModule: "ietf-vpn-common"},
		3:  {Name: "gre", DefiningModule: "ietf-vpn-common"},
		4:  {Name: "gre-v4", DefiningModule: "ietf-vpn-common"},
		5:  {Name: "gre-v6", DefiningModule: "ietf-vpn-common"},
		6:  {Name: "ip-in-ip", DefiningModule: "ietf-vpn-common"},
		7:  {Name: "ip-in-ipv4", DefiningModule: "ietf-vpn-common"},
		8:  {Name: "ip-in-ipv6", DefiningModule: "ietf-vpn-common"},
		9:  {Name: "ldp", DefiningModule: "ietf-vpn-common"},
		10: {Name: "mpls-in-udp", DefiningModule: "ietf-vpn-common"},
		11: {Name: "rsvp-te", DefiningModule: "ietf-vpn-common"},
		12: {Name: "sr", DefiningModule: "ietf-vpn-common"},
		13: {Name: "sr-mpls", DefiningModule: "ietf-vpn-common"},
		14: {Name: "sr-mpls-over-ip", DefiningModule: "ietf-vpn-common"},
		15: {Name: "srv6", DefiningModule: "ietf-vpn-common"},
		16: {Name: "unknown", DefiningModule: "ietf-vpn-common"},
		17: {Name: "vxlan-trans", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_QosProfileDirection": {
		1: {Name: "both", DefiningModule: "ietf-vpn-common"},
		2: {Name: "site-to-wan", DefiningModule: "ietf-vpn-common"},
		3: {Name: "wan-to-site", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_Role": {
		1: {Name: "any-to-any-role", DefiningModule: "ietf-vpn-common"},
		2: {Name: "custom-role", DefiningModule: "ietf-vpn-common"},
		3: {Name: "hub-role", DefiningModule: "ietf-vpn-common"},
		4: {Name: "spoke-role", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_RouteTargetType": {
		1: {Name: "import"},
		2: {Name: "export"},
		3: {Name: "both"},
	},
	"E_IETFVpnCommon_ServiceType": {
		1: {Name: "l3vpn", DefiningModule: "ietf-vpn-common"},
		2: {Name: "mpls-evpn", DefiningModule: "ietf-vpn-common"},
		3: {Name: "pbb-evpn", DefiningModule: "ietf-vpn-common"},
		4: {Name: "vpls", DefiningModule: "ietf-vpn-common"},
		5: {Name: "vpws", DefiningModule: "ietf-vpn-common"},
		6: {Name: "vpws-evpn", DefiningModule: "ietf-vpn-common"},
		7: {Name: "vxlan-evpn", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_TagType": {
		1: {Name: "c-vlan", DefiningModule: "ietf-vpn-common"},
		2: {Name: "s-c-vlan", DefiningModule: "ietf-vpn-common"},
		3: {Name: "s-vlan", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_TransportInstanceType": {
		1: {Name: "enhanced-vpn", DefiningModule: "ietf-vpn-common"},
		2: {Name: "ietf-network-slice", DefiningModule: "ietf-vpn-common"},
		3: {Name: "virtual-network", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_VpnSignalingType": {
		1: {Name: "bgp-signaling", DefiningModule: "ietf-vpn-common"},
		2: {Name: "l2tp-signaling", DefiningModule: "ietf-vpn-common"},
		3: {Name: "ldp-signaling", DefiningModule: "ietf-vpn-common"},
	},
	"E_IETFVpnCommon_VpnTopology": {
		1: {Name: "any-to-any", DefiningModule: "ietf-vpn-common"},
		2: {Name: "custom", DefiningModule: "ietf-vpn-common"},
		3: {Name: "hub-spoke", DefiningModule: "ietf-vpn-common"},
		4: {Name: "hub-spoke-disjoint", DefiningModule: "ietf-vpn-common"},
	},
	"E_IanaBgpL2Encaps_BgpL2EncapsType": {
		1:  {Name: "atm-aal5", DefiningModule: "iana-bgp-l2-encaps"},
		2:  {Name: "atm-cell", DefiningModule: "iana-bgp-l2-encaps"},
		3:  {Name: "atm-to-vcc", DefiningModule: "iana-bgp-l2-encaps"},
		4:  {Name: "atm-to-vpc", DefiningModule: "iana-bgp-l2-encaps"},
		5:  {Name: "cas", DefiningModule: "iana-bgp-l2-encaps"},
		6:  {Name: "circuit-emulation", DefiningModule: "iana-bgp-l2-encaps"},
		7:  {Name: "dlci", DefiningModule: "iana-bgp-l2-encaps"},
		8:  {Name: "ds1", DefiningModule: "iana-bgp-l2-encaps"},
		9:  {Name: "e1", DefiningModule: "iana-bgp-l2-encaps"},
		10: {Name: "e3", DefiningModule: "iana-bgp-l2-encaps"},
		11: {Name: "esf", DefiningModule: "iana-bgp-l2-encaps"},
		12: {Name: "ethernet-raw-mode", DefiningModule: "iana-bgp-l2-encaps"},
		13: {Name: "ethernet-tagged-mode", DefiningModule: "iana-bgp-l2-encaps"},
		14: {Name: "fr-port-mode", DefiningModule: "iana-bgp-l2-encaps"},
		15: {Name: "frame-relay", DefiningModule: "iana-bgp-l2-encaps"},
		16: {Name: "hdlc", DefiningModule: "iana-bgp-l2-encaps"},
		17: {Name: "layer-2-transport", DefiningModule: "iana-bgp-l2-encaps"},
		18: {Name: "ppp", DefiningModule: "iana-bgp-l2-encaps"},
		19: {Name: "sf", DefiningModule: "iana-bgp-l2-encaps"},
		20: {Name: "structure-aware", DefiningModule: "iana-bgp-l2-encaps"},
		21: {Name: "t1", DefiningModule: "iana-bgp-l2-encaps"},
		22: {Name: "t3", DefiningModule: "iana-bgp-l2-encaps"},
		23: {Name: "vpls", DefiningModule: "iana-bgp-l2-encaps"},
	},
	"E_IanaPseudowireTypes_IanaPwTypes": {
		1:  {Name: "atm-aal5", DefiningModule: "iana-pseudowire-types"},
		2:  {Name: "atm-aal5-vcc", DefiningModule: "iana-pseudowire-types"},
		3:  {Name: "atm-cell", DefiningModule: "iana-pseudowire-types"},
		4:  {Name: "atm-one-to-one-vcc", DefiningModule: "iana-pseudowire-types"},
		5:  {Name: "atm-one-to-one-vpc", DefiningModule: "iana-pseudowire-types"},
		6:  {Name: "atm-to-vcc", DefiningModule: "iana-pseudowire-types"},
		7:  {Name: "atm-to-vpc", DefiningModule: "iana-pseudowire-types"},
		8:  {Name: "atm-vp-virtual-trunk", DefiningModule: "iana-pseudowire-types"},
		9:  {Name: "ces-over-psn", DefiningModule: "iana-pseudowire-types"},
		10: {Name: "ces-over-psn-cas", DefiningModule: "iana-pseudowire-types"},
		11: {Name: "circuit-emulation-mpls", DefiningModule: "iana-pseudowire-types"},
		12: {Name: "circuit-emulation-packet", DefiningModule: "iana-pseudowire-types"},
		13: {Name: "crtp", DefiningModule: "iana-pseudowire-types"},
		14: {Name: "dlci", DefiningModule: "iana-pseudowire-types"},
		15: {Name: "e1", DefiningModule: "iana-pseudowire-types"},
		16: {Name: "e3", DefiningModule: "iana-pseudowire-types"},
		17: {Name: "ecrtp", DefiningModule: "iana-pseudowire-types"},
		18: {Name: "ethernet", DefiningModule: "iana-pseudowire-types"},
		19: {Name: "ethernet-tagged-mode", DefiningModule: "iana-pseudowire-types"},
		20: {Name: "fc-port-mode", DefiningModule: "iana-pseudowire-types"},
		21: {Name: "fr-port-mode", DefiningModule: "iana-pseudowire-types"},
		22: {Name: "frame-relay", DefiningModule: "iana-pseudowire-types"},
		23: {Name: "hdlc", DefiningModule: "iana-pseudowire-types"},
		24: {Name: "iphc", DefiningModule: "iana-pseudowire-types"},
		25: {Name: "layer-2-transport", DefiningModule: "iana-pseudowire-types"},
		26: {Name: "ppp", DefiningModule: "iana-pseudowire-types"},
		27: {Name: "rohc", DefiningModule: "iana-pseudowire-types"},
		28: {Name: "t1", DefiningModule: "iana-pseudowire-types"},
		29: {Name: "t3", DefiningModule: "iana-pseudowire-types"},
		30: {Name: "tdm-over-ip-aal1", DefiningModule: "iana-pseudowire-types"},
		31: {Name: "tdm-over-ip-aal2", DefiningModule: "iana-pseudowire-types"},
		32: {Name: "wildcard", DefiningModule: "iana-pseudowire-types"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x7b, 0x6f, 0xdb, 0x48,
		0xb2, 0x36, 0xfe, 0xbf, 0x3f, 0x05, 0x21, 0xe0, 0x60, 0xed, 0xdd, 0xd0, 0x96, 0x64, 0x49, 0xbe,
		0x00, 0x3f, 0x2c, 0x9c, 0x49, 0xb2, 0x6f, 0x70, 0x9c, 0x8c, 0x77, 0x92, 0x09, 0xf0, 0xbe, 0x8e,
		0x8f, 0x41, 0x8b, 0x2d, 0x99, 0x18, 0xaa, 0xc9, 0x6d, 0xb6, 0xec, 0xf8, 0x24, 0xfe, 0xee, 0x3f,
		0x90, 0xba, 0x5b, 0x92, 0x2d, 0x92, 0x55, 0x4d, 0x52, 0x7e, 0x02, 0xec, 0x8e, 0x6f, 0xea, 0x26,
		0xbb, 0xab, 0x9f, 0xaa, 0x7a, 0xea, 0xd2, 0x3f, 0x77, 0x2c, 0xcb, 0xb2, 0x6a, 0x9f, 0x9d, 0x81,
		0xa8, 0x9d, 0x5a, 0x35, 0xbf, 0x29, 0x07, 0xb5, 0x37, 0xa3, 0x9f, 0xfd, 0xb7, 0x27, 0xdd, 0xda,
		0xa9, 0xd5, 0x18, 0x7f, 0xfb, 0x5b, 0x20, 0x7b, 0x5e, 0xbf, 0x76, 0x6a, 0xd5, 0xc7, 0x3f, 0x78,
		0xe7, 0xa9, 0xda, 0xa9, 0x35, 0x1a, 0x20, 0xf9, 0x81, 0x74, 0xba, 0x83, 0x85, 0x9f, 0x2c, 0x0c,
		0x9d, 0xfc, 0xf6, 0xcd, 0xe2, 0xef, 0x16, 0xa7, 0x98, 0xfe, 0xf8, 0xe9, 0x54, 0xd3, 0x5f, 0x5c,
		0x28, 0xd1, 0xf3, 0x7e, 0x2c, 0xcd, 0xf1, 0xd2, 0x3c, 0xc9, 0xef, 0xbf, 0x04, 0x43, 0xd5, 0x15,
		0x2b, 0x3f, 0x3b, 0x7a, 0x16, 0xf1, 0x70, 0x1f, 0xa8, 0xf8, 0x71, 0x6a, 0xe1, 0x68, 0x9a, 0x37,
		0xab, 0xff, 0xf0, 0xff, 0x38, 0xd1, 0x99, 0xea, 0x0f, 0x07, 0x42, 0xea, 0xda, 0xa9, 0xa5, 0xd5,
		0x50, 0xac, 0xf9, 0xc3, 0xb9, 0xbf, 0x1a, 0x3d, 0xd5, 0xd2, 0x9f, 0x3d, 0x2e, 0xfc, 0xe4, 0xf1,
		0xc9, 0xdb, 0x3e, 0x5d, 0xe0, 0xe9, 0x2f, 0x5c, 0x21, 0x3d, 0xe1, 0xda, 0xae, 0xa3, 0x1d, 0xfb,
		0x5e, 0x79, 0x5a, 0x44, 0xeb, 0x5f, 0x6b, 0xb2, 0x2c, 0x2b, 0x3e, 0xb3, 0xe6, 0xb1, 0xc7, 0x9b,
		0x52, 0x5f, 0xf3, 0xeb, 0xe9, 0xe6, 0x34, 0xd7, 0xfc, 0xc1, 0x33, 0x9b, 0xb4, 0xe9, 0x66, 0x6d,
		0xba, 0x69, 0xa9, 0x37, 0x2f, 0xf5, 0x26, 0xa6, 0xd8, 0xcc, 0xd5, 0x9b, 0xba, 0x66, 0x73, 0xa7,
		0xe3, 0x7e, 0x72, 0xa4, 0xeb, 0xe8, 0x40, 0x3d, 0x2c, 0x9f, 0x83, 0xe9, 0xdf, 0x7c, 0x7d, 0x08,
		0xc5, 0x66, 0xeb, 0xf9, 0xbf, 0x42, 0x05, 0xf6, 0x8d, 0x13, 0x09, 0xd7, 0xee, 0x06, 0x43, 0xa9,
		0x85, 0x3a, 0x6c, 0x3e, 0xb7, 0xbe, 0xe3, 0xbd, 0x3e, 0x7a, 0xe6, 0x4f, 0xde, 0x89, 0x9e, 0x33,
		0xf4, 0x93, 0xf7, 0xae, 0x3f, 0x37, 0xd4, 0xff, 0x71, 0xa2, 0xd9, 0x9f, 0x3e, 0xbf, 0xa0, 0xb5,
		0x3f, 0x1c, 0xd9, 0x8f, 0x9f, 0xf7, 0xf2, 0xd9, 0x35, 0x7f, 0x7e, 0xcf, 0x47, 0xab, 0xe7, 0xc9,
		0x17, 0x85, 0x63, 0xfa, 0xc7, 0xdf, 0x1c, 0x7f, 0x28, 0xd6, 0x4b, 0xf6, 0xd2, 0xdf, 0x7f, 0x50,
		0x4e, 0x57, 0x7b, 0x81, 0x7c, 0xe7, 0xf5, 0x3d, 0x1d, 0xa5, 0xf8, 0xe0, 0x67, 0xd1, 0x77, 0xb4,
		0x77, 0x17, 0xcf, 0xd5, 0x73, 0xfc, 0x48, 0xbc, 0xf8, 0xa9, 0xc7, 0x37, 0x1b, 0xbc, 0xaa, 0xf3,
		0x23, 0xfd, 0xab, 0xb6, 0x9a, 0x27, 0xad, 0x93, 0xce, 0x51, 0xf3, 0xa4, 0x5d, 0xbe, 0x77, 0xde,
		0xc9, 0xf6, 0xdb, 0xab, 0x9d, 0xcd, 0xfe, 0x7e, 0xc5, 0x9a, 0x4e, 0x40, 0x50, 0x06, 0xda, 0xeb,
		0x79, 0x5d, 0x27, 0x7e, 0xd1, 0xcd, 0xa1, 0x73, 0xf1, 0x53, 0x00, 0x4f, 0x80, 0x27, 0xc0, 0x13,
		0xe0, 0xf9, 0xea, 0xc0, 0x33, 0x08, 0x85, 0x4a, 0x89, 0x9c, 0x73, 0x1f, 0x01, 0x6c, 0x02, 0x36,
		0x01, 0x9b, 0x80, 0xcd, 0xd7, 0x03, 0x9b, 0x42, 0x3a, 0x37, 0xbe, 0xb0, 0xc5, 0x0f, 0x2d, 0x94,
		0x74, 0x7c, 0xbb, 0xaf, 0x82, 0x61, 0xb8, 0x01, 0x76, 0xae, 0xf9, 0xdc, 0x9a, 0xe3, 0x3a, 0x3b,
		0x06, 0xeb, 0xe5, 0xbb, 0x16, 0x9f, 0x90, 0xd5, 0x18, 0x72, 0x95, 0x13, 0x97, 0xeb, 0xc0, 0x65,
		0x02, 0x5c, 0xde, 0x1c, 0x73, 0x6f, 0x82, 0xc0, 0x17, 0x8e, 0xdc, 0x00, 0x66, 0x1b, 0x8d, 0xfc,
		0xb2, 0xbb, 0x92, 0xd8, 0x5b, 0x27, 0xb0, 0xcf, 0x6c, 0x23, 0xa4, 0x14, 0x52, 0xca, 0x21, 0xa5,
		0x3f, 0x44, 0xd7, 0x76, 0xa7, 0xa2, 0xf5, 0x92, 0x98, 0xce, 0xff, 0x75, 0x1e, 0x39, 0x0d, 0x85,
		0x1a, 0x78, 0x1a, 0x92, 0xba, 0x0d, 0x92, 0x3a, 0x32, 0x40, 0x6c, 0x1d, 0x7f, 0x60, 0x03, 0x69,
		0x6d, 0x3d, 0xf3, 0x37, 0xef, 0xe5, 0x70, 0xf0, 0xf2, 0xa2, 0x7e, 0x0d, 0xbe, 0x68, 0xe5, 0xc9,
		0xfe, 0x46, 0xe6, 0x55, 0xad, 0x9e, 0x2c, 0xfe, 0x48, 0xde, 0x36, 0x30, 0xdb, 0x1a, 0x63, 0xdf,
		0xeb, 0xa1, 0xb6, 0x93, 0xc3, 0x02, 0xac, 0x7d, 0x0d, 0x3e, 0x4a, 0xbd, 0xd9, 0x03, 0x26, 0x93,
		0xad, 0x75, 0x26, 0x56, 0x1d, 0x9b, 0x53, 0xab, 0x9e, 0xd1, 0x18, 0x7b, 0xcc, 0x01, 0x15, 0x9b,
		0x1a, 0x5f, 0xcf, 0x1b, 0x5b, 0xab, 0xc3, 0x56, 0x38, 0xc5, 0x3c, 0xa7, 0x78, 0x5d, 0x18, 0x6c,
		0x71, 0x53, 0x5f, 0x5e, 0x81, 0x85, 0xbd, 0x7d, 0xe9, 0xed, 0x9f, 0xdf, 0xe2, 0x8d, 0xb7, 0x3a,
		0xcd, 0x96, 0xa7, 0xdd, 0xfa, 0xb4, 0x22, 0x90, 0x59, 0x14, 0x32, 0x8b, 0x44, 0x06, 0xd1, 0xd8,
		0xd0, 0x53, 0x7b, 0x61, 0xb5, 0x5f, 0x12, 0x99, 0xe9, 0x1f, 0xca, 0xd1, 0x52, 0x6f, 0xb8, 0x70,
		0xb3, 0x8d, 0x19, 0x88, 0x4d, 0xd7, 0xec, 0x79, 0x8d, 0x9f, 0x59, 0xa0, 0xb2, 0x08, 0x56, 0x56,
		0x01, 0xcb, 0x2a, 0x68, 0xb9, 0x05, 0x2e, 0xb7, 0xe0, 0xe5, 0x10, 0xc0, 0xcd, 0x04, 0x31, 0x05,
		0x99, 0xb2, 0x99, 0x45, 0xf2, 0x3c, 0x6a, 0xd9, 0xb1, 0xe4, 0xbd, 0x64, 0xa5, 0xac, 0xc5, 0xb2,
		0xe3, 0x14, 0x9f, 0x39, 0x17, 0xb2, 0xaf, 0x6f, 0x5f, 0xa4, 0xcb, 0xd2, 0xd3, 0x67, 0xb9, 0xe8,
		0xb4, 0xb5, 0x9c, 0x53, 0xe3, 0x4d, 0xb6, 0xcf, 0x67, 0xa5, 0x9e, 0xf2, 0x53, 0x51, 0x19, 0x25,
		0x28, 0x33, 0x3d, 0xb7, 0x7e, 0xe9, 0x8e, 0x5b, 0xad, 0xce, 0x51, 0xab, 0x55, 0x3f, 0x3a, 0x3c,
		0xaa, 0x9f, 0xb4, 0xdb, 0x8d, 0x4e, 0xa3, 0x5d, 0xfd, 0xd5, 0xdc, 0xe1, 0xf9, 0xeb, 0xab, 0x14,
		0x47, 0xe8, 0xc2, 0xd1, 0x5a, 0x28, 0x99, 0xfa, 0x0c, 0xd5, 0x2e, 0xff, 0xe7, 0xfb, 0xf7, 0xbf,
		0x5f, 0xed, 0xff, 0x7d, 0x73, 0x90, 0xba, 0xda, 0xa1, 0x79, 0xcd, 0x4d, 0x38, 0xe1, 0x61, 0x24,
		0x94, 0x9d, 0x4d, 0x6f, 0xce, 0x3e, 0x0a, 0xe5, 0x09, 0xe5, 0x69, 0x50, 0x79, 0x4e, 0x05, 0x0f,
		0xba, 0x13, 0xba, 0x13, 0xba, 0xb3, 0x20, 0xdd, 0x49, 0x0a, 0x06, 0xe7, 0x5e, 0xa4, 0xcf, 0xb4,
		0x56, 0xe9, 0x00, 0xe1, 0x93, 0x27, 0xdf, 0xfb, 0x22, 0x06, 0xb3, 0x94, 0x4b, 0x1c, 0xcb, 0xcb,
		0xdc, 0x27, 0xf3, 0x6d, 0x7c, 0xed, 0x77, 0xe5, 0x0a, 0x25, 0xdc, 0xb7, 0x0f, 0xb5, 0x53, 0x4b,
		0x0e, 0x7d, 0x3f, 0xcb, 0x47, 0xff, 0x8c, 0x84, 0x4a, 0xb5, 0xc7, 0x8f, 0xcc, 0x4e, 0xf7, 0x7f,
		0x8b, 0x87, 0x0d, 0x9d, 0xe3, 0x74, 0x9b, 0x97, 0x7e, 0xd3, 0x48, 0x36, 0x2b, 0xc3, 0x26, 0x65,
		0xd8, 0x9c, 0x97, 0x16, 0xf5, 0x4c, 0xca, 0x40, 0x27, 0xb9, 0x33, 0x9b, 0xad, 0x55, 0xd4, 0xbd,
		0x15, 0x03, 0x27, 0x74, 0x12, 0xfd, 0x53, 0x3b, 0xf0, 0x84, 0xee, 0xd9, 0x52, 0xe8, 0x6e, 0x20,
		0x7b, 0xb6, 0xd3, 0x1d, 0x1c, 0xc4, 0xfa, 0xfb, 0x60, 0xc4, 0x6e, 0x1e, 0x6c, 0x42, 0x84, 0x8d,
		0x06, 0xd5, 0x6a, 0xd8, 0xd5, 0x63, 0x9b, 0xaf, 0xf6, 0xf1, 0xfd, 0xd7, 0x0f, 0x9f, 0x47, 0x43,
		0x9e, 0x75, 0x07, 0xd7, 0x9f, 0x9d, 0xee, 0xe0, 0xfa, 0x5f, 0xc9, 0x88, 0xa3, 0xff, 0xd4, 0x68,
		0x79, 0xdd, 0x75, 0xc9, 0xf5, 0x9b, 0x2d, 0x4c, 0x9a, 0x05, 0x79, 0x8e, 0x66, 0xdd, 0x74, 0x09,
		0x6a, 0x39, 0xc8, 0x69, 0x25, 0x1c, 0x77, 0xf3, 0x38, 0xd6, 0xc2, 0x5f, 0x23, 0x8e, 0x85, 0x38,
		0x16, 0xe2, 0x58, 0x6b, 0x9f, 0x71, 0xeb, 0xe2, 0x58, 0x6a, 0xe8, 0x0b, 0xdb, 0xf7, 0xa2, 0x4d,
		0x70, 0x62, 0xfa, 0xa7, 0x88, 0x66, 0xbd, 0xf2, 0x68, 0x56, 0x1d, 0xd1, 0x2c, 0x02, 0x5e, 0xc4,
		0x78, 0x34, 0x6b, 0x63, 0xde, 0x63, 0xc6, 0x77, 0xc8, 0xd8, 0x2e, 0xda, 0x60, 0xb1, 0x27, 0x67,
		0xff, 0x64, 0x83, 0xbf, 0x1d, 0x3f, 0xc6, 0x66, 0xa4, 0x46, 0x06, 0x92, 0x66, 0xe0, 0xe8, 0xee,
		0xad, 0xe3, 0xfb, 0x76, 0x94, 0x68, 0x14, 0x23, 0x54, 0x4d, 0x66, 0x8e, 0xf6, 0xfb, 0x77, 0x7a,
		0x7a, 0xf6, 0x0d, 0xd7, 0xca, 0x22, 0x76, 0x04, 0xfe, 0x0b, 0xfc, 0x57, 0xe1, 0xfc, 0xd7, 0x76,
		0xc7, 0x8e, 0xae, 0x72, 0xe9, 0x38, 0x30, 0x42, 0x1b, 0x38, 0x0c, 0xcf, 0x18, 0xce, 0x1b, 0x05,
		0xe4, 0xd2, 0x24, 0xb0, 0xc0, 0x66, 0x7c, 0x65, 0x36, 0xe3, 0xc8, 0xea, 0x4a, 0x63, 0x34, 0x6e,
		0x60, 0x13, 0xa4, 0xb5, 0x05, 0xd2, 0x51, 0xf9, 0xe9, 0x83, 0xa9, 0x19, 0x75, 0x7e, 0x6e, 0xed,
		0x94, 0x5d, 0x2b, 0x3d, 0xa6, 0x8b, 0x51, 0xe4, 0x58, 0x92, 0xdc, 0xba, 0xbc, 0xc8, 0x55, 0x32,
		0xa3, 0xc4, 0x32, 0x41, 0xb3, 0x1a, 0xfa, 0x29, 0xa0, 0x39, 0xf9, 0x6b, 0x24, 0xa7, 0x22, 0x39,
		0xd5, 0xaa, 0x39, 0xdd, 0xae, 0x88, 0xa2, 0x4d, 0x0a, 0xae, 0x9f, 0xe1, 0x83, 0x9f, 0x0e, 0xb1,
		0xe1, 0xa2, 0x6c, 0x12, 0x39, 0x58, 0xfa, 0xd0, 0x86, 0x56, 0xe7, 0x15, 0xb2, 0x7f, 0x36, 0xf7,
		0xbf, 0x91, 0xfd, 0x93, 0xd6, 0xa2, 0xc9, 0xcc, 0x86, 0x65, 0x61, 0xc5, 0xb2, 0xb1, 0x63, 0x39,
		0x28, 0x0f, 0x22, 0xb6, 0x2c, 0x0f, 0xc1, 0x93, 0xdb, 0x4b, 0xcd, 0xc6, 0xa2, 0xa5, 0x73, 0x58,
		0x33, 0x72, 0x23, 0x39, 0x76, 0x64, 0x09, 0x6b, 0x73, 0xef, 0x49, 0x06, 0x0a, 0xa4, 0xf6, 0xd6,
		0xd3, 0xd9, 0x79, 0x9d, 0x54, 0xd1, 0xbc, 0xb5, 0xa3, 0x24, 0x51, 0xbe, 0xae, 0x12, 0x8e, 0xce,
		0xf2, 0xf6, 0xd3, 0x61, 0x1a, 0x93, 0x28, 0x77, 0x9e, 0x41, 0x9a, 0x09, 0x00, 0x84, 0x6e, 0xce,
		0x67, 0x39, 0x1c, 0x45, 0x22, 0x7d, 0x91, 0x6f, 0x98, 0xd6, 0xa4, 0x00, 0xb5, 0x96, 0x69, 0x8c,
		0xc7, 0x37, 0x59, 0xb7, 0x75, 0xd3, 0x00, 0xe8, 0xda, 0x21, 0xc6, 0xdb, 0x99, 0x99, 0x96, 0xb3,
		0x46, 0xd1, 0xd5, 0x64, 0x01, 0x4f, 0xad, 0xc3, 0x1c, 0x83, 0x24, 0xcb, 0x77, 0x6a, 0xb5, 0x72,
		0x0c, 0x91, 0x08, 0x55, 0x66, 0xe2, 0x37, 0x19, 0x62, 0x2c, 0x52, 0xa7, 0x56, 0x33, 0xdb, 0x4e,
		0x56, 0x2d, 0x2b, 0x8f, 0x24, 0x75, 0x7c, 0xe4, 0x1d, 0x66, 0xb1, 0x62, 0xf5, 0xe6, 0x1a, 0x1c,
		0x66, 0x23, 0xcc, 0xc6, 0x05, 0x4e, 0xe4, 0xc5, 0x5e, 0x47, 0x84, 0xa6, 0xe6, 0x66, 0xf9, 0x37,
		0x6b, 0x15, 0x7e, 0x0a, 0x50, 0xdb, 0x2c, 0x3f, 0x87, 0x56, 0xc3, 0xa7, 0xcc, 0xdf, 0x59, 0xad,
		0xd1, 0x5f, 0xce, 0xe7, 0xc9, 0xa9, 0xf6, 0x72, 0xa8, 0xbb, 0x14, 0xf9, 0x3f, 0x4b, 0x1f, 0xdd,
		0x30, 0x1f, 0x28, 0x3b, 0x52, 0x3f, 0x1a, 0x44, 0xea, 0x6e, 0x30, 0x18, 0x1f, 0xde, 0x94, 0x50,
		0x3d, 0xf9, 0x20, 0xb0, 0x1a, 0x58, 0x6d, 0xd0, 0xc5, 0xdf, 0x38, 0x78, 0xb1, 0xec, 0xf7, 0x1a,
		0x3c, 0x55, 0x83, 0xc0, 0x1d, 0x26, 0x1d, 0x92, 0xb2, 0x14, 0xcf, 0xcd, 0x7f, 0x18, 0x24, 0x1e,
		0x4e, 0x38, 0x48, 0x3c, 0x90, 0x78, 0x20, 0xf1, 0xa8, 0x77, 0x24, 0xb5, 0x22, 0xc9, 0xa8, 0x50,
		0xca, 0xed, 0xa8, 0xa3, 0x2d, 0x0a, 0xd4, 0xc2, 0xd6, 0x1b, 0x7e, 0xc8, 0x68, 0x7d, 0xfa, 0x79,
		0x64, 0xb4, 0x22, 0xa3, 0xb5, 0xac, 0x2a, 0x29, 0x29, 0x63, 0xd2, 0x69, 0x70, 0x62, 0xb1, 0x02,
		0x2a, 0x85, 0x69, 0x35, 0x81, 0x88, 0x36, 0x94, 0x13, 0x94, 0xd3, 0xe6, 0xf9, 0x3a, 0x33, 0x12,
		0xd1, 0xd1, 0x8e, 0x2d, 0x03, 0x37, 0xc3, 0xaa, 0x4f, 0x2f, 0x4e, 0x98, 0x0e, 0x91, 0x72, 0xd1,
		0xc6, 0xa2, 0x9b, 0x32, 0x3a, 0x96, 0x5a, 0x84, 0xf3, 0x88, 0x72, 0x5e, 0x91, 0xce, 0x2b, 0xda,
		0x64, 0x22, 0x4e, 0x26, 0xea, 0x04, 0x22, 0x9f, 0x11, 0xea, 0x53, 0xee, 0x76, 0xda, 0xa3, 0x30,
		0xfd, 0xe0, 0xb8, 0xfe, 0x3e, 0xe3, 0x46, 0x4d, 0x04, 0x25, 0x19, 0x25, 0xe3, 0xd2, 0xa6, 0x73,
		0x38, 0xc8, 0x0e, 0x08, 0xc5, 0x41, 0xa1, 0x3a, 0x30, 0x54, 0x07, 0x87, 0xfc, 0x00, 0x91, 0x1f,
		0x24, 0xc2, 0x03, 0x95, 0xed, 0x60, 0xe5, 0xb0, 0x63, 0xad, 0x8c, 0x51, 0xcb, 0xfc, 0x4e, 0xd5,
		0x7a, 0x79, 0x0b, 0x5c, 0x61, 0x7b, 0x32, 0xd2, 0x8e, 0xec, 0x0a, 0xdb, 0x73, 0x85, 0xd4, 0x5e,
		0xcf, 0x13, 0x2a, 0x8f, 0x0c, 0x66, 0xa3, 0x4b, 0xb2, 0xef, 0x06, 0x2f, 0x30, 0xa6, 0x6c, 0xd3,
		0xb2, 0xf4, 0xf9, 0x8d, 0xba, 0x94, 0x4c, 0x2b, 0xf9, 0x93, 0xaf, 0x0e, 0xa6, 0x66, 0xed, 0xc1,
		0xcc, 0x5a, 0xe0, 0x0a, 0x3d, 0xa6, 0x30, 0x38, 0xe7, 0xaf, 0xc9, 0xcb, 0x6e, 0x00, 0x2d, 0x8c,
		0x02, 0x1b, 0x08, 0x36, 0x50, 0xf5, 0x6d, 0xa0, 0x79, 0x91, 0x4e, 0x17, 0x03, 0xdc, 0xe8, 0x94,
		0xa4, 0x89, 0x0c, 0xc2, 0x3a, 0x82, 0x75, 0x54, 0x61, 0xeb, 0x88, 0xce, 0xb2, 0x49, 0x1b, 0x55,
		0x5c, 0x6b, 0xc6, 0x9c, 0xe4, 0x18, 0x23, 0x53, 0xd4, 0xf1, 0xe9, 0xbf, 0x7c, 0xc2, 0x6a, 0x31,
		0x44, 0x25, 0xd7, 0x9b, 0x7c, 0x04, 0x63, 0xe5, 0x8d, 0x5a, 0x2e, 0x0d, 0x98, 0x29, 0x8a, 0x99,
		0x8d, 0x10, 0x25, 0x3e, 0x0e, 0x0c, 0x12, 0x90, 0x39, 0x0a, 0x4a, 0x6c, 0xe6, 0xe7, 0x83, 0x97,
		0xec, 0x3b, 0x02, 0xf7, 0x62, 0xde, 0xbd, 0x58, 0xb0, 0xc5, 0x4b, 0xe0, 0x61, 0x84, 0x2a, 0xd0,
		0x41, 0x37, 0xf0, 0x67, 0xa5, 0x36, 0xd9, 0xfd, 0x8c, 0x15, 0x63, 0xc1, 0xdb, 0x80, 0xb7, 0x51,
		0x7d, 0x6f, 0x43, 0x85, 0x5d, 0x22, 0x27, 0x63, 0x3a, 0x12, 0x7c, 0x0b, 0xf8, 0x16, 0xf0, 0x2d,
		0xe0, 0x5b, 0xc0, 0xb7, 0x80, 0x6f, 0x01, 0xdf, 0x02, 0xbe, 0x05, 0x85, 0x6f, 0xb1, 0xc2, 0xfe,
		0x2e, 0xb6, 0x7c, 0x6a, 0xd3, 0xa6, 0x31, 0xd9, 0x56, 0x2d, 0xdf, 0x6a, 0xd5, 0x70, 0xcf, 0xc3,
		0x93, 0x4f, 0x50, 0x77, 0xf5, 0xcb, 0x70, 0xa1, 0xd5, 0xa6, 0x49, 0x65, 0x19, 0x4c, 0xbf, 0x79,
		0x33, 0x2f, 0x18, 0x3d, 0xa5, 0x7d, 0xf3, 0x90, 0x26, 0xfb, 0x2b, 0x8f, 0x59, 0xb7, 0x60, 0xc2,
		0x25, 0x6f, 0x6a, 0x30, 0xdd, 0xef, 0x69, 0xdf, 0xc4, 0xf8, 0xd1, 0x73, 0x49, 0xad, 0xf8, 0xa1,
		0x95, 0x63, 0x0f, 0x65, 0xa4, 0x9d, 0x1b, 0x7f, 0xc3, 0xd6, 0x78, 0x73, 0x6b, 0xce, 0xd8, 0xf7,
		0x38, 0x85, 0x10, 0x59, 0x44, 0x19, 0x7d, 0x99, 0x84, 0xc9, 0x22, 0xcf, 0xea, 0xdb, 0x5c, 0xa8,
		0x2c, 0x73, 0x3d, 0xde, 0x8a, 0xb8, 0x90, 0x65, 0x11, 0xf0, 0x69, 0xae, 0x64, 0xf9, 0x63, 0xe8,
		0x8b, 0x18, 0x7f, 0x93, 0x2f, 0xcc, 0xdc, 0xc9, 0xf2, 0xb2, 0x66, 0xd8, 0x4c, 0x23, 0x6c, 0xae,
		0x09, 0x72, 0x69, 0x80, 0x14, 0xc8, 0x9f, 0xe6, 0xb0, 0xa6, 0x39, 0xa0, 0x99, 0x0f, 0x65, 0xa6,
		0x83, 0x98, 0xf2, 0xf0, 0x65, 0x6b, 0x77, 0xb8, 0x31, 0x72, 0xaf, 0x93, 0xa2, 0x14, 0x48, 0x9d,
		0x06, 0xa1, 0xd3, 0xb4, 0xcf, 0xdf, 0x0c, 0x91, 0xf3, 0xf4, 0x36, 0x4c, 0x8d, 0xc0, 0x34, 0xfd,
		0x0d, 0x37, 0x43, 0xdc, 0xc7, 0x8c, 0x62, 0x71, 0x55, 0xdc, 0x0d, 0x4e, 0x2f, 0xdd, 0x72, 0x92,
		0x12, 0x34, 0xf3, 0x5c, 0xe3, 0x74, 0xaf, 0x3c, 0x2d, 0x36, 0xbf, 0xc7, 0x69, 0xf1, 0xcf, 0xf3,
		0x5c, 0xe4, 0xb4, 0xbe, 0xb3, 0x06, 0xae, 0x71, 0xc2, 0x35, 0x4e, 0xcf, 0xd3, 0x84, 0xb8, 0xc6,
		0x89, 0xfd, 0x1a, 0xa7, 0x9d, 0x67, 0x5e, 0xb6, 0xf6, 0xfe, 0x47, 0x62, 0xc0, 0x2c, 0x9f, 0xee,
		0x9f, 0x3b, 0x2f, 0x9d, 0x82, 0x58, 0x44, 0x4f, 0xc7, 0xf8, 0x61, 0xc7, 0x6f, 0x6e, 0x3b, 0xbe,
		0xbf, 0x0e, 0x48, 0x16, 0x0f, 0x43, 0x52, 0x4e, 0xb6, 0x0e, 0x9e, 0xe7, 0x4e, 0x41, 0xed, 0x85,
		0xb7, 0x79, 0x82, 0x2f, 0x2f, 0x41, 0xfb, 0x46, 0x90, 0xbe, 0xe2, 0x0d, 0x5e, 0x06, 0xf0, 0xc5,
		0x07, 0x9d, 0x3d, 0xe4, 0xdc, 0x72, 0xd7, 0xee, 0x42, 0x69, 0x47, 0x42, 0xdd, 0x79, 0x2b, 0xd0,
		0x66, 0x7a, 0x02, 0xe7, 0xff, 0xe8, 0xc9, 0xcb, 0xad, 0xee, 0xbe, 0xbc, 0x16, 0x2c, 0x9f, 0x03,
		0xc9, 0xe9, 0x74, 0xc9, 0x0a, 0xf8, 0xcd, 0x78, 0x56, 0xa9, 0xef, 0x57, 0xbd, 0xfa, 0x0b, 0xf0,
		0xb8, 0x31, 0x2c, 0x6e, 0x0c, 0x87, 0x0b, 0x02, 0xf0, 0xe4, 0xf9, 0x52, 0x0a, 0xf7, 0xba, 0x20,
		0x66, 0xed, 0xa6, 0x1f, 0xda, 0x8e, 0x6b, 0x0b, 0x19, 0x5b, 0x7a, 0xee, 0xcb, 0xba, 0xf2, 0xc9,
		0xdf, 0x97, 0x40, 0xab, 0xbd, 0xb8, 0x71, 0x25, 0xd7, 0x6f, 0x2f, 0x6d, 0x2c, 0xb7, 0xa6, 0xbb,
		0x09, 0x02, 0x5f, 0x38, 0x72, 0x13, 0x2d, 0xd7, 0xc8, 0x61, 0x93, 0x75, 0x87, 0x91, 0x0e, 0x06,
		0x2f, 0x5d, 0x5c, 0x3f, 0xeb, 0x62, 0xb5, 0xf0, 0xe7, 0x25, 0x10, 0xb3, 0x78, 0x7f, 0xba, 0xc1,
		0x60, 0xf0, 0x6c, 0x40, 0xb1, 0xa4, 0x22, 0x36, 0xf7, 0xec, 0xc6, 0xc5, 0xeb, 0xc5, 0x60, 0xd3,
		0x0b, 0x41, 0xa4, 0xcd, 0xa4, 0xab, 0xef, 0x07, 0x37, 0x8e, 0x6f, 0x87, 0x8e, 0x72, 0x06, 0x42,
		0x0b, 0x15, 0xd9, 0xa1, 0x0a, 0x7a, 0x9e, 0x2f, 0xa2, 0x97, 0x45, 0xed, 0x99, 0xcf, 0x96, 0xe0,
		0xbe, 0x46, 0xc0, 0xdb, 0x4a, 0x6f, 0xec, 0xc5, 0x3b, 0x1c, 0xd7, 0x6d, 0x6a, 0x8a, 0x7b, 0x1d,
		0xd7, 0x0e, 0x51, 0x81, 0xcb, 0x21, 0x36, 0x16, 0x1b, 0x0a, 0x2a, 0xa5, 0x80, 0x6b, 0x22, 0x36,
		0x15, 0x2b, 0x9a, 0x80, 0xdb, 0xc6, 0x17, 0x46, 0x74, 0x85, 0x7d, 0xe7, 0x3b, 0x31, 0xda, 0xc6,
		0xd2, 0x22, 0x62, 0xfb, 0xd5, 0xc9, 0xd6, 0x71, 0x77, 0xed, 0x48, 0x5b, 0xd0, 0xde, 0x27, 0xb5,
		0x70, 0x52, 0x46, 0x5e, 0x4a, 0xd0, 0x4b, 0x21, 0xad, 0xf0, 0xa6, 0x8c, 0xbf, 0xb0, 0xb7, 0xfc,
		0x79, 0xd9, 0x64, 0x4c, 0x69, 0x42, 0xa6, 0x7f, 0xd1, 0x8d, 0x5a, 0xa8, 0x8e, 0x8f, 0x10, 0xcd,
		0x41, 0xc4, 0x21, 0xc4, 0x21, 0xc4, 0x21, 0x4c, 0x7f, 0x08, 0x03, 0xa9, 0x55, 0xe0, 0xdb, 0xf1,
		0xce, 0xdb, 0x52, 0xf4, 0x03, 0xed, 0x65, 0x3d, 0x88, 0xeb, 0x46, 0xc2, 0x61, 0xc4, 0x61, 0xdc,
		0xfa, 0xc3, 0xb8, 0xe1, 0x2b, 0x64, 0x48, 0xb2, 0x99, 0x7e, 0x56, 0x89, 0x9e, 0x50, 0x42, 0x76,
		0x8d, 0x36, 0x60, 0xfd, 0x22, 0x92, 0x48, 0x8b, 0x75, 0x64, 0x05, 0x3d, 0xeb, 0x8f, 0x0f, 0xbf,
		0x59, 0xc7, 0xf5, 0xa3, 0xa3, 0x82, 0x2b, 0x63, 0x66, 0x0b, 0x51, 0xa6, 0xe2, 0x98, 0xd5, 0x2b,
		0xf5, 0x2a, 0x5b, 0xd1, 0xf9, 0x41, 0xd7, 0xf1, 0x6d, 0x67, 0xa8, 0x03, 0x19, 0x0c, 0x82, 0x61,
		0x64, 0x47, 0x0f, 0x91, 0x16, 0x83, 0xf4, 0x3a, 0x65, 0xdd, 0x40, 0x50, 0x29, 0x50, 0x29, 0x05,
		0xab, 0x14, 0x27, 0xb2, 0xe5, 0x70, 0x70, 0x93, 0x2e, 0x33, 0x71, 0x2c, 0x90, 0x47, 0x29, 0x3e,
		0xf2, 0x87, 0x23, 0xfb, 0xa2, 0x32, 0x8d, 0x55, 0xeb, 0x68, 0xac, 0x9a, 0x75, 0xe9, 0x5a, 0xcd,
		0x93, 0xd6, 0x49, 0xe7, 0xa8, 0x79, 0x82, 0x76, 0xaa, 0x65, 0xd0, 0x61, 0x03, 0xa7, 0x6b, 0x87,
		0x81, 0xef, 0x75, 0x3d, 0x91, 0xe1, 0x5a, 0xd9, 0x85, 0x4f, 0xa7, 0xd3, 0x56, 0x0d, 0x68, 0x2b,
		0x68, 0xab, 0x7c, 0x3c, 0xf7, 0x82, 0x10, 0x3b, 0xae, 0xab, 0x6c, 0xdf, 0x1b, 0x64, 0xb8, 0xf6,
		0x72, 0x41, 0x9c, 0xe7, 0xc6, 0xc9, 0xd6, 0x00, 0xa0, 0x51, 0xa5, 0x06, 0x00, 0x99, 0x05, 0x9e,
		0xc3, 0xe1, 0x29, 0x61, 0x2b, 0x80, 0xac, 0x07, 0x22, 0xa3, 0x8a, 0x30, 0xd5, 0x14, 0x20, 0xe5,
		0x05, 0x8c, 0xeb, 0xad, 0xc3, 0xae, 0xce, 0x5e, 0xdb, 0xbc, 0x55, 0x0d, 0x01, 0x72, 0x1f, 0x24,
		0xaa, 0x03, 0x45, 0x7e, 0xb0, 0xc8, 0x0f, 0x18, 0xcb, 0x41, 0xcb, 0x76, 0xe0, 0x72, 0x58, 0xc3,
		0x16, 0x6d, 0x93, 0x80, 0x51, 0x33, 0x55, 0xfd, 0xa0, 0x44, 0x8f, 0xa2, 0x55, 0x40, 0x3b, 0xc7,
		0x18, 0x1f, 0xc7, 0x8f, 0xf2, 0xd6, 0x89, 0x08, 0xc4, 0x70, 0x41, 0xb7, 0xe6, 0x81, 0x8b, 0x45,
		0x4f, 0x22, 0x22, 0xa9, 0xca, 0xff, 0x49, 0x53, 0xd7, 0x3f, 0xed, 0xd6, 0xae, 0x82, 0x30, 0x7f,
		0x81, 0xff, 0xe3, 0x9b, 0xb2, 0xbd, 0x57, 0xcf, 0x0f, 0x02, 0x77, 0x1b, 0x5f, 0xec, 0xde, 0x51,
		0xd2, 0x93, 0x7d, 0x82, 0x57, 0xcb, 0x35, 0xc2, 0x95, 0x69, 0xb8, 0x33, 0x42, 0x17, 0xc4, 0x27,
		0x5e, 0x0e, 0x07, 0x19, 0x8d, 0xf2, 0x95, 0x00, 0x32, 0x1b, 0x0e, 0x26, 0x07, 0x4c, 0x0e, 0x98,
		0x1c, 0xb9, 0xe4, 0x67, 0xe8, 0x49, 0xdd, 0xe8, 0x10, 0x58, 0x1b, 0x9d, 0x1c, 0x43, 0x64, 0xe3,
		0x7d, 0xe9, 0xd5, 0x42, 0x2e, 0x5e, 0x78, 0x2d, 0xd9, 0x59, 0x7f, 0x43, 0x33, 0x1e, 0x15, 0xe7,
		0x49, 0xcf, 0x81, 0x32, 0xe8, 0xf8, 0x5c, 0x3c, 0xf3, 0xda, 0xad, 0xe8, 0xb4, 0xdb, 0x87, 0xed,
		0xd7, 0xb7, 0x1d, 0xdb, 0xde, 0x12, 0x29, 0x83, 0x5d, 0xa2, 0xbd, 0x81, 0xb0, 0x3d, 0xa9, 0x85,
		0xba, 0x73, 0xfc, 0xfc, 0x76, 0xc9, 0xe2, 0x70, 0xb0, 0x4b, 0x60, 0x97, 0xc0, 0x2e, 0xc9, 0x6d,
		0x97, 0x1c, 0x36, 0x09, 0xec, 0x92, 0x23, 0xd8, 0x25, 0xb0, 0x4b, 0xca, 0x6e, 0x97, 0xe4, 0x8d,
		0x87, 0xc3, 0x38, 0x29, 0xaf, 0x71, 0x52, 0xb9, 0x7e, 0x8d, 0x53, 0xad, 0x63, 0xcf, 0xd5, 0xbd,
		0x47, 0x07, 0x73, 0xdf, 0x1c, 0xac, 0xaf, 0x53, 0x5c, 0xff, 0xab, 0x83, 0xf9, 0x3c, 0x81, 0x83,
		0x5c, 0x51, 0x56, 0x6b, 0x75, 0xf9, 0xff, 0x79, 0xf3, 0x5b, 0x28, 0x3f, 0xeb, 0xfb, 0x6f, 0xa1,
		0xfc, 0x32, 0x7e, 0xea, 0xeb, 0xd9, 0xd7, 0xd7, 0xff, 0x4a, 0x9e, 0xec, 0x62, 0xfa, 0x60, 0x17,
		0xe3, 0x47, 0x5e, 0xf7, 0x8b, 0xeb, 0x4f, 0x4e, 0xf7, 0x62, 0xfc, 0xbc, 0xf1, 0xd7, 0x67, 0xae,
		0xab, 0xce, 0x93, 0xa7, 0x2d, 0x41, 0xdb, 0xfb, 0x78, 0xfd, 0xfc, 0x20, 0x08, 0xed, 0x50, 0x89,
		0x3b, 0x21, 0xf3, 0xf5, 0xbd, 0x5f, 0x35, 0x18, 0xe2, 0xde, 0xfc, 0xb6, 0x29, 0xe2, 0xde, 0x39,
		0xa0, 0x2f, 0x73, 0xdc, 0xbb, 0xa7, 0xc4, 0x7f, 0x86, 0x42, 0x76, 0x1f, 0xf2, 0xbb, 0x7d, 0xb3,
		0xa1, 0x32, 0x2e, 0xf7, 0x26, 0xad, 0x9c, 0x5e, 0x1c, 0xa4, 0x9d, 0xcd, 0x3d, 0xb8, 0x82, 0x9b,
		0x0a, 0x37, 0x15, 0x6e, 0x2a, 0xdc, 0x54, 0xb8, 0xa9, 0x70, 0x53, 0xe1, 0xa6, 0xbe, 0x72, 0x37,
		0x35, 0x83, 0xf5, 0x1b, 0xaa, 0x40, 0x8b, 0xb9, 0xe6, 0x84, 0xf9, 0xaf, 0x74, 0x7f, 0x32, 0x20,
		0x0c, 0x14, 0x18, 0x28, 0x30, 0x50, 0xf2, 0xc9, 0xcf, 0xb6, 0xa7, 0x14, 0x3e, 0xe1, 0x2d, 0x28,
		0xee, 0x10, 0x2a, 0x71, 0x72, 0x61, 0x74, 0x3b, 0xd4, 0xdb, 0x98, 0x83, 0xa7, 0x95, 0x13, 0x22,
		0x01, 0x8f, 0x43, 0x49, 0x2b, 0xa1, 0xd5, 0x83, 0xad, 0xbd, 0x81, 0x50, 0x04, 0xb7, 0xff, 0xcd,
		0x0d, 0x06, 0xe5, 0x0c, 0xe5, 0x0c, 0xe5, 0x0c, 0xf6, 0x00, 0xec, 0x01, 0xd8, 0x03, 0xb0, 0x07,
		0x60, 0x0f, 0xd2, 0x2e, 0xf2, 0xbd, 0x27, 0xdd, 0xe0, 0x3e, 0xbf, 0x4d, 0x32, 0x1e, 0xa7, 0xc8,
		0x00, 0x4c, 0xe3, 0xb8, 0x8e, 0x10, 0x0c, 0x8c, 0x28, 0x18, 0x51, 0x30, 0xa2, 0x60, 0x44, 0xc1,
		0x88, 0x82, 0x11, 0x05, 0x23, 0x0a, 0x99, 0x82, 0x94, 0x99, 0x82, 0xf9, 0x92, 0xd3, 0xac, 0x42,
		0xd2, 0x05, 0xcf, 0x83, 0x20, 0xbc, 0x98, 0x3d, 0xf2, 0xab, 0xbb, 0xc8, 0xda, 0x84, 0x70, 0xa4,
		0x69, 0xce, 0x64, 0x54, 0x00, 0x4c, 0xde, 0x8e, 0x3c, 0x18, 0xfa, 0xda, 0xeb, 0x3a, 0x91, 0xb6,
		0x7d, 0xef, 0x2f, 0x91, 0xa1, 0x7f, 0xd7, 0xe2, 0xe7, 0xd1, 0xc1, 0x0b, 0x1d, 0xbc, 0x48, 0xc0,
		0x24, 0x75, 0x07, 0xaf, 0xe9, 0x45, 0x4b, 0x5a, 0x09, 0x61, 0xf7, 0x7c, 0xe7, 0x2e, 0x50, 0x51,
		0xf6, 0xac, 0xe6, 0xd5, 0xc3, 0x21, 0xaf, 0x99, 0xdf, 0x93, 0x46, 0x5e, 0x73, 0x0e, 0x43, 0x2d,
		0x73, 0x5e, 0xf3, 0x9c, 0x98, 0x13, 0x14, 0xb4, 0xce, 0x0d, 0x06, 0x92, 0x0a, 0x24, 0x15, 0x48,
		0xaa, 0x7c, 0xf2, 0xb3, 0xf5, 0x9d, 0xbd, 0xa6, 0x46, 0x64, 0x82, 0x1c, 0xdb, 0x9d, 0x85, 0xe3,
		0x44, 0x83, 0xb9, 0xd7, 0xdc, 0xc2, 0x74, 0x9c, 0x1b, 0xcf, 0xf5, 0xd4, 0x76, 0xbf, 0x62, 0x44,
		0xbc, 0x87, 0xd5, 0x4a, 0x3d, 0xca, 0x08, 0x88, 0xe7, 0x5e, 0xa4, 0xcf, 0xb4, 0x56, 0xf9, 0x40,
		0xf1, 0x93, 0x27, 0xdf, 0xfb, 0x22, 0x56, 0x0d, 0x39, 0xf9, 0xc6, 0xda, 0x27, 0xe7, 0xc7, 0xdc,
		0x48, 0x8d, 0xe3, 0x56, 0xab, 0x73, 0xd4, 0x6a, 0xd5, 0x8f, 0x0e, 0x8f, 0xea, 0x27, 0xed, 0x76,
		0xa3, 0x93, 0x0b, 0x28, 0x7f, 0x57, 0xae, 0x50, 0xc2, 0x7d, 0xfb, 0x50, 0x3b, 0xb5, 0xe4, 0xd0,
		0xf7, 0x29, 0x86, 0xfa, 0x33, 0x4a, 0xd2, 0xb0, 0xb2, 0x13, 0xa2, 0xa0, 0x15, 0x73, 0x30, 0x47,
		0x0b, 0x44, 0xc7, 0x01, 0x85, 0x7f, 0x68, 0x8a, 0x59, 0x9a, 0x3c, 0xf9, 0xb9, 0xf7, 0x97, 0xb8,
		0xfe, 0x6d, 0xfc, 0xe0, 0x5f, 0x95, 0x10, 0x1f, 0xc6, 0x8f, 0x5d, 0x82, 0x92, 0xe4, 0x97, 0x2e,
		0xee, 0x7e, 0x11, 0x92, 0x9f, 0xbf, 0xc9, 0x7b, 0xbd, 0xc3, 0x94, 0x23, 0x84, 0x5f, 0x4b, 0x4e,
		0x62, 0xba, 0xd5, 0xbb, 0xca, 0x46, 0x21, 0xd4, 0x41, 0x21, 0x80, 0x42, 0x30, 0x03, 0xca, 0x99,
		0xfd, 0x96, 0x1c, 0x97, 0x88, 0x2d, 0xf9, 0x28, 0x0d, 0x44, 0x3c, 0x58, 0xf4, 0x56, 0xc9, 0x62,
		0x1e, 0xf3, 0x9a, 0xc9, 0x64, 0xd4, 0x63, 0xbc, 0x38, 0xb6, 0xe7, 0xa6, 0x8f, 0x78, 0xcc, 0x7d,
		0x16, 0xb7, 0x6b, 0x21, 0xda, 0x41, 0x02, 0x24, 0xd9, 0x6f, 0xd7, 0x8a, 0xb4, 0xf2, 0x64, 0x3f,
		0xcb, 0x7d, 0x8d, 0xc7, 0x06, 0xcf, 0x9b, 0x72, 0xed, 0xee, 0x6d, 0xe0, 0x75, 0x33, 0x04, 0x18,
		0x67, 0x1f, 0x4d, 0x77, 0xda, 0xda, 0x65, 0x3c, 0x6d, 0xb1, 0x98, 0x75, 0x83, 0xc1, 0x20, 0x55,
		0x16, 0xc2, 0x96, 0x9c, 0xb4, 0xb9, 0x77, 0xaf, 0x4a, 0x4c, 0xd1, 0x19, 0xea, 0xc0, 0x76, 0xa2,
		0xc8, 0xeb, 0xcb, 0x3c, 0xae, 0xc9, 0xe2, 0x30, 0xd9, 0x1c, 0x80, 0x56, 0x95, 0x1c, 0x80, 0x4c,
		0x62, 0xfe, 0x4a, 0x8c, 0xff, 0x2c, 0xc7, 0xc0, 0x8c, 0xe1, 0x9f, 0x39, 0x76, 0xa8, 0xdc, 0xe4,
		0xe6, 0x51, 0x82, 0x0a, 0xc1, 0xf1, 0x40, 0xf9, 0x62, 0x86, 0x8d, 0x6d, 0x88, 0x19, 0xe6, 0x3a,
		0x42, 0x54, 0x47, 0x89, 0xfc, 0x48, 0x91, 0x1f, 0x2d, 0xf2, 0x23, 0x56, 0x0c, 0x35, 0x9e, 0xf5,
		0xe8, 0xad, 0xd6, 0x54, 0xb6, 0x72, 0xe9, 0x62, 0x73, 0x4b, 0x23, 0xe7, 0xdc, 0xa8, 0x7c, 0x81,
		0xfd, 0xe5, 0xc3, 0xda, 0xcc, 0x39, 0x10, 0xc1, 0xa1, 0xe5, 0x39, 0xbc, 0xd4, 0x87, 0x98, 0xed,
		0x30, 0xb3, 0x1d, 0x6a, 0xb6, 0xc3, 0x9d, 0xef, 0x90, 0xe7, 0x3c, 0xec, 0xf9, 0x89, 0xb6, 0xf5,
		0xfa, 0x33, 0x18, 0x6a, 0x61, 0xbb, 0x5e, 0xa4, 0x3d, 0xd9, 0x1f, 0x7a, 0xd1, 0x6d, 0xe6, 0x4a,
		0xfb, 0xd5, 0x1e, 0x23, 0xc1, 0x58, 0x17, 0x8e, 0xd6, 0x42, 0x49, 0x92, 0xc0, 0x7c, 0x32, 0xe0,
		0x6e, 0xfd, 0x74, 0xb7, 0xd3, 0x6e, 0x1f, 0x5e, 0xd6, 0xed, 0xf6, 0xd5, 0xaf, 0x4e, 0xbb, 0x7d,
		0x59, 0xb7, 0x9b, 0x57, 0x97, 0x75, 0xfb, 0x24, 0xfe, 0xee, 0xb2, 0x6e, 0xb7, 0x46, 0xdf, 0xfc,
		0x6c, 0x3e, 0xfe, 0xea, 0xcc, 0x7d, 0x7b, 0xf8, 0xf8, 0xeb, 0xb2, 0x61, 0xb7, 0xc7, 0xdf, 0xb5,
		0x92, 0xef, 0x4e, 0xc6, 0xdf, 0xd5, 0xdf, 0x1c, 0x3e, 0xfe, 0xaa, 0xef, 0x9d, 0xee, 0x4e, 0x0b,
		0x26, 0x46, 0xa3, 0x4f, 0xbe, 0xbd, 0xac, 0xdb, 0xc7, 0xe3, 0x29, 0xc6, 0x3f, 0xba, 0xac, 0x37,
		0x66, 0xd3, 0x8c, 0x7e, 0x76, 0x59, 0xb7, 0x3b, 0xb3, 0xb9, 0x92, 0x9f, 0x25, 0xa3, 0x4c, 0x27,
		0x8c, 0x7f, 0x34, 0x1b, 0xe9, 0x67, 0x3b, 0xf9, 0xc9, 0x65, 0xdd, 0x3e, 0x1c, 0xff, 0xa0, 0x13,
		0xff, 0x60, 0xee, 0x0f, 0x8e, 0x1e, 0x7f, 0xb5, 0x66, 0xf3, 0x1c, 0x27, 0x4f, 0x3c, 0xf9, 0xdb,
		0x93, 0x27, 0xcf, 0x7f, 0x1c, 0x3f, 0xff, 0xde, 0xaf, 0xdd, 0xc6, 0xe9, 0xee, 0xee, 0xee, 0xe8,
		0x49, 0x67, 0xbf, 0xff, 0xd5, 0x98, 0x3e, 0x6a, 0x73, 0xb6, 0x22, 0xbf, 0x9a, 0xed, 0xe4, 0xf9,
		0xf6, 0xbe, 0x7f, 0xdf, 0xdf, 0xfb, 0x79, 0xf8, 0x98, 0xf6, 0x63, 0x7b, 0x6c, 0xfb, 0xb0, 0xf7,
		0x6b, 0xb7, 0x59, 0xf5, 0xbd, 0xe0, 0x5c, 0x9c, 0xce, 0xee, 0xe9, 0xa5, 0x63, 0xf7, 0xce, 0xec,
		0x0f, 0xe3, 0x31, 0xf6, 0x7e, 0x76, 0x1e, 0xf7, 0x7e, 0xed, 0xee, 0x5e, 0x1e, 0xda, 0xed, 0x23,
		0xfb, 0x64, 0xf4, 0xbb, 0xd1, 0x56, 0x8e, 0xbf, 0x8e, 0x87, 0x18, 0x7f, 0xf9, 0xb3, 0xf1, 0xe6,
		0xf0, 0x71, 0xef, 0x74, 0xf1, 0x27, 0x8d, 0xe6, 0xe3, 0x5e, 0x7e, 0x7c, 0xbd, 0x2a, 0xa8, 0xe8,
		0x26, 0x07, 0x32, 0x8f, 0xec, 0x9d, 0x41, 0xe0, 0x0a, 0x62, 0x13, 0x2a, 0x19, 0x92, 0xc6, 0x76,
		0x6a, 0x53, 0xd9, 0x4e, 0x75, 0xd8, 0x4e, 0xb0, 0x9d, 0x2a, 0x69, 0x3b, 0xe5, 0x75, 0x98, 0xa6,
		0x03, 0xf5, 0x54, 0x30, 0xb0, 0xc3, 0x20, 0xf0, 0xe9, 0x64, 0x64, 0xd6, 0xdf, 0x79, 0x32, 0x34,
		0xd1, 0x56, 0x66, 0xa3, 0x02, 0xd9, 0x61, 0x80, 0x03, 0x0e, 0x78, 0x61, 0x81, 0x0b, 0x1e, 0xd8,
		0x61, 0x82, 0x1d, 0x2e, 0xd8, 0x61, 0x83, 0x06, 0x3e, 0x88, 0x60, 0x84, 0x1c, 0x4e, 0xe6, 0x29,
		0xd1, 0xf8, 0xe4, 0xdb, 0xe3, 0xe8, 0x39, 0xb1, 0x78, 0xcd, 0xf1, 0xa5, 0xb3, 0x59, 0x88, 0x05,
		0x80, 0x86, 0xa7, 0x61, 0x07, 0x1d, 0x4e, 0xf0, 0x31, 0x03, 0x42, 0xdc, 0x60, 0x64, 0x0c, 0x94,
		0x8c, 0x81, 0x93, 0x31, 0x90, 0xa2, 0x05, 0x2b, 0x62, 0xd0, 0xa2, 0xe7, 0x91, 0xd6, 0xca, 0x7d,
		0xea, 0x24, 0x83, 0xf4, 0xd4, 0xd2, 0x4e, 0x39, 0xf7, 0xab, 0x5c, 0x6a, 0x2a, 0x67, 0xbe, 0xf4,
		0xda, 0x71, 0x4d, 0xe6, 0xa3, 0x4d, 0xf3, 0x39, 0x0e, 0x16, 0x22, 0x0b, 0x07, 0xe3, 0xd8, 0xdf,
		0xc1, 0xd4, 0x59, 0x3e, 0x98, 0xd9, 0xcf, 0x3b, 0xe5, 0xd8, 0x4a, 0x8a, 0xbe, 0x2e, 0xbd, 0xa1,
		0xef, 0xe7, 0x8b, 0x96, 0xae, 0xf7, 0x37, 0xa6, 0x43, 0xc3, 0xdf, 0x80, 0xbf, 0x01, 0x7f, 0xe3,
		0x35, 0xf9, 0x1b, 0xa4, 0x88, 0xb2, 0x74, 0x18, 0x08, 0x41, 0x05, 0xfe, 0x05, 0xfc, 0x0b, 0xf8,
		0x17, 0xf0, 0x2f, 0x16, 0xe4, 0x5e, 0x0c, 0x42, 0xfd, 0xc0, 0xe9, 0x5e, 0x1c, 0xc2, 0xbd, 0x80,
		0x7b, 0xf1, 0xd4, 0xbd, 0x98, 0x9a, 0xcb, 0x65, 0x71, 0x2f, 0x0a, 0x8d, 0xa8, 0x10, 0x6f, 0x7e,
		0x39, 0x37, 0xbd, 0x56, 0x54, 0x40, 0xda, 0x68, 0x36, 0x21, 0xd1, 0x56, 0x96, 0x69, 0x0b, 0xf3,
		0x24, 0xc1, 0xf2, 0xd7, 0xb1, 0xfd, 0xe1, 0x9e, 0x65, 0xc6, 0x11, 0xd4, 0xe4, 0x93, 0x0b, 0x4d,
		0x19, 0xea, 0xd9, 0x17, 0xd3, 0x66, 0xa3, 0x61, 0x2f, 0x8b, 0xf3, 0xb0, 0x26, 0x09, 0x77, 0x3c,
		0x1a, 0x0a, 0x49, 0x78, 0x1d, 0x1e, 0x14, 0x92, 0x64, 0x84, 0x90, 0xbc, 0x85, 0x24, 0x59, 0x8f,
		0xcb, 0x92, 0xf8, 0x3c, 0x19, 0x0f, 0x65, 0x25, 0x28, 0x2b, 0x29, 0x98, 0x01, 0xa8, 0x78, 0x59,
		0x49, 0xde, 0x93, 0xf9, 0x82, 0x62, 0x53, 0x6e, 0xbe, 0xa3, 0x4a, 0x4c, 0x2e, 0xa2, 0xc8, 0xa4,
		0x7c, 0x64, 0x20, 0x12, 0x25, 0x0b, 0x22, 0xef, 0x16, 0xae, 0x4c, 0x69, 0x74, 0x08, 0xeb, 0x4a,
		0x3a, 0x04, 0x43, 0xd1, 0x5c, 0xa1, 0x32, 0xf9, 0x47, 0xc8, 0x7d, 0x51, 0x5e, 0xa9, 0x32, 0x1d,
		0x94, 0xf8, 0x6a, 0x95, 0xe9, 0xb8, 0x5c, 0xd7, 0x79, 0xcc, 0x64, 0x88, 0xfa, 0x5a, 0x0f, 0x06,
		0xce, 0x9b, 0xf4, 0xea, 0x95, 0xa5, 0x2d, 0xeb, 0xb4, 0xdb, 0x87, 0x6d, 0x6c, 0x1b, 0x2d, 0xff,
		0x8d, 0x42, 0x15, 0x14, 0xaa, 0xc0, 0xfe, 0x82, 0xfd, 0x55, 0x42, 0xfb, 0x0b, 0x85, 0x2a, 0xf9,
		0x87, 0x43, 0xe2, 0x18, 0x12, 0xc7, 0x8c, 0xc3, 0x06, 0xb1, 0x89, 0x82, 0x42, 0x15, 0x14, 0xaa,
		0xb0, 0x81, 0x8f, 0x19, 0x10, 0xe2, 0x06, 0x23, 0x63, 0xa0, 0x64, 0x0c, 0x9c, 0x8c, 0x81, 0x14,
		0x2d, 0x58, 0x31, 0x38, 0xd5, 0x16, 0x0a, 0x55, 0x78, 0xf7, 0x0b, 0x99, 0x64, 0x86, 0x92, 0x0b,
		0xc6, 0x11, 0x8a, 0x83, 0xc5, 0xd8, 0x22, 0xca, 0x56, 0xb2, 0x7b, 0x1f, 0x28, 0x5b, 0x81, 0xf7,
		0x01, 0xef, 0xe3, 0x55, 0x7a, 0x1f, 0x28, 0x5b, 0x81, 0xb7, 0x01, 0x6f, 0x03, 0xde, 0x86, 0x85,
		0xb2, 0x95, 0x55, 0xce, 0x06, 0xca, 0x56, 0xe0, 0x6c, 0xbc, 0xe0, 0x6c, 0xa0, 0x88, 0x85, 0x51,
		0x14, 0xaa, 0x20, 0x02, 0x28, 0x69, 0xd9, 0x8a, 0x0d, 0xad, 0x42, 0x81, 0xcb, 0x97, 0xd1, 0x93,
		0xa2, 0xcc, 0xa5, 0x54, 0x82, 0x54, 0x86, 0x6a, 0x17, 0xd7, 0x53, 0xa2, 0xab, 0xfd, 0x07, 0x82,
		0xcb, 0x52, 0x96, 0x87, 0x42, 0x9d, 0x0b, 0xaf, 0x87, 0x84, 0x3a, 0x97, 0x8c, 0x18, 0x92, 0xa3,
		0xce, 0x85, 0xa2, 0xb6, 0x25, 0x67, 0x3d, 0x4b, 0x1d, 0xf5, 0x2c, 0xc4, 0x14, 0x03, 0xea, 0x59,
		0x98, 0xad, 0xc0, 0xdc, 0x2e, 0x3d, 0xd3, 0x4d, 0x09, 0x14, 0x37, 0x24, 0x90, 0xdd, 0x8c, 0x80,
		0x1b, 0x11, 0x70, 0x23, 0x02, 0x6e, 0x44, 0x28, 0xd9, 0x8d, 0x08, 0x57, 0x70, 0x9a, 0x0a, 0x73,
		0x9a, 0x96, 0x3d, 0x8a, 0x32, 0x7a, 0x4c, 0xb9, 0x7b, 0x04, 0xac, 0x1d, 0x11, 0xfe, 0x13, 0xfc,
		0xa7, 0xad, 0xeb, 0x13, 0x40, 0xd8, 0x22, 0x80, 0xa4, 0x3b, 0x00, 0xbc, 0x29, 0x78, 0x53, 0xaf,
		0xd6, 0x9b, 0xca, 0x5d, 0x12, 0x4c, 0x50, 0x0a, 0x4c, 0x54, 0x02, 0x4c, 0x10, 0x34, 0xa2, 0x2c,
		0xf9, 0xa5, 0x2e, 0xf5, 0x65, 0xab, 0x15, 0xa5, 0xaf, 0x11, 0xa5, 0x48, 0x5b, 0xa4, 0x2c, 0xe5,
		0xe5, 0x28, 0xe1, 0xad, 0xd2, 0x76, 0x14, 0x14, 0x67, 0x84, 0xe7, 0x54, 0x22, 0xcf, 0xa9, 0x44,
		0x21, 0x27, 0x19, 0x64, 0xb9, 0xe6, 0x78, 0xaa, 0xb2, 0x46, 0x1f, 0x87, 0x6b, 0x04, 0xd7, 0x68,
		0xbb, 0x5c, 0xa3, 0x6c, 0xc7, 0x82, 0xe4, 0x78, 0xc0, 0x25, 0x82, 0x4b, 0x04, 0x97, 0x88, 0x28,
		0x37, 0x34, 0x67, 0x0e, 0x28, 0xec, 0x1f, 0x0a, 0xfb, 0x67, 0x84, 0x82, 0x5c, 0xc6, 0xce, 0x0e,
		0xe1, 0x42, 0x67, 0x5d, 0xe0, 0x62, 0x16, 0x76, 0xb3, 0x25, 0x7d, 0x79, 0x81, 0x36, 0x58, 0x9c,
		0x5a, 0x74, 0xd7, 0xb5, 0x07, 0x7a, 0xb8, 0xf1, 0xaa, 0xcc, 0x6a, 0x49, 0xc7, 0x1f, 0xdc, 0x70,
		0x03, 0xd2, 0x29, 0xbd, 0xd4, 0x4a, 0x2e, 0x8b, 0x52, 0x9b, 0xbe, 0xca, 0xe2, 0xae, 0xa6, 0x40,
		0xa5, 0xac, 0x8a, 0x2b, 0xb7, 0xa2, 0xca, 0xad, 0x98, 0x16, 0x14, 0xd1, 0x93, 0xf7, 0x2f, 0xe8,
		0x88, 0xa6, 0x56, 0x2e, 0x0b, 0xfc, 0xda, 0x61, 0x33, 0xcd, 0xbe, 0x8d, 0xa5, 0xf1, 0x28, 0xc5,
		0x47, 0xb2, 0xf1, 0x67, 0x19, 0xb0, 0x3c, 0x0f, 0x3f, 0x96, 0x97, 0x0f, 0x23, 0x23, 0x5c, 0xf2,
		0x13, 0x2c, 0x19, 0x6c, 0x94, 0x5c, 0x7c, 0xd6, 0x74, 0xe9, 0xa6, 0x69, 0x03, 0xed, 0xea, 0xaf,
		0x21, 0x93, 0x6e, 0xbe, 0x32, 0xa8, 0xa0, 0x62, 0x54, 0x0a, 0x03, 0xdf, 0xeb, 0x7a, 0x22, 0x4a,
		0xaf, 0xa5, 0x16, 0x3e, 0x9d, 0x4e, 0x55, 0x35, 0xca, 0xa8, 0xaa, 0x32, 0xf9, 0x5b, 0x5b, 0xa2,
		0xa6, 0xb2, 0xf8, 0x4b, 0xb4, 0x2a, 0x2a, 0x2d, 0xed, 0x50, 0x13, 0x3f, 0xc2, 0x40, 0xe9, 0x91,
		0x04, 0x3e, 0x64, 0x67, 0xe3, 0x16, 0x87, 0xc9, 0xc6, 0xca, 0xd5, 0xc1, 0xca, 0x81, 0x95, 0xe3,
		0xf5, 0x62, 0x33, 0xd3, 0x03, 0xf9, 0x1b, 0xd4, 0x64, 0x6c, 0x40, 0xc3, 0xc3, 0xbd, 0x7b, 0x03,
		0x92, 0x53, 0xbf, 0x38, 0x0c, 0x4e, 0x3d, 0x4e, 0x3d, 0x4e, 0xbd, 0xe9, 0x53, 0x4f, 0x6a, 0x3e,
		0x88, 0x1f, 0x5a, 0x39, 0xf6, 0x50, 0x46, 0xda, 0xb9, 0xf1, 0x53, 0xfa, 0xba, 0x4a, 0xf4, 0x84,
		0x12, 0xb2, 0x6b, 0xc4, 0x05, 0x9d, 0x6c, 0xcc, 0x1f, 0x1f, 0x7e, 0xb3, 0x5a, 0x87, 0x9d, 0xd6,
		0xa9, 0xf5, 0xf6, 0x5f, 0x17, 0x07, 0x9f, 0x2e, 0xce, 0xbf, 0x58, 0x1f, 0x2f, 0xac, 0x6f, 0x9e,
		0xd2, 0x43, 0xc7, 0xb7, 0x2e, 0x94, 0x77, 0xe7, 0x68, 0x61, 0x7d, 0x16, 0xfa, 0x3e, 0x50, 0x7f,
		0x45, 0xd6, 0xee, 0xb7, 0x8b, 0xcf, 0xd1, 0xde, 0x77, 0x99, 0x7c, 0xac, 0x13, 0x7f, 0xec, 0x83,
		0x72, 0x06, 0x22, 0xfe, 0xa5, 0xd5, 0x0b, 0x94, 0x75, 0xee, 0x3c, 0x08, 0x65, 0x35, 0xd7, 0x0e,
		0xf0, 0x5d, 0xce, 0x9e, 0x61, 0xf7, 0xbc, 0x99, 0x8c, 0x56, 0x30, 0x12, 0xcc, 0x96, 0xbd, 0x4c,
		0x60, 0x50, 0x86, 0x7d, 0xa9, 0x9a, 0x33, 0xba, 0x45, 0x44, 0x71, 0x06, 0xa7, 0xd6, 0x32, 0x53,
		0x08, 0xfd, 0x2d, 0x94, 0x17, 0x93, 0x07, 0x33, 0xcc, 0x11, 0x68, 0x47, 0xf5, 0x85, 0xce, 0xc6,
		0x10, 0x8c, 0x3f, 0x0b, 0x7e, 0x00, 0xfc, 0x80, 0x59, 0x7e, 0xc0, 0xcb, 0x91, 0xa2, 0xe3, 0xb9,
		0xf0, 0x09, 0xe0, 0x13, 0x6c, 0xab, 0x4f, 0x30, 0xf4, 0xa4, 0x3e, 0xce, 0xe1, 0x12, 0x64, 0x20,
		0xef, 0x73, 0xa6, 0x48, 0xe7, 0xc8, 0x8a, 0xa0, 0x48, 0x89, 0xa6, 0x4a, 0x85, 0x26, 0xcf, 0xb9,
		0xa5, 0xcb, 0xb5, 0xcd, 0x73, 0x1d, 0x0c, 0x45, 0xaa, 0xf3, 0x74, 0x89, 0x9b, 0xed, 0xf6, 0xf6,
		0x2e, 0xb2, 0xa1, 0x84, 0x9a, 0xab, 0x12, 0x10, 0x75, 0xa3, 0x32, 0xf7, 0x91, 0xf5, 0x67, 0xeb,
		0x2c, 0x98, 0xf5, 0xa4, 0x62, 0x7e, 0x7e, 0x28, 0x28, 0x67, 0x28, 0xe7, 0x52, 0x2a, 0xe7, 0x4f,
		0x8e, 0x74, 0x1d, 0x1d, 0xa8, 0x87, 0xf4, 0xb7, 0xf6, 0x12, 0x28, 0xf6, 0xbc, 0x07, 0x65, 0xc1,
		0x05, 0xcb, 0xd0, 0xc4, 0xba, 0xf6, 0x5e, 0x0e, 0x07, 0xd9, 0x85, 0xee, 0x6b, 0xf0, 0x65, 0xc4,
		0x56, 0xe6, 0x4a, 0x83, 0xac, 0xcf, 0xf8, 0xfd, 0x3c, 0x49, 0x90, 0x8d, 0x59, 0x70, 0x30, 0xcf,
		0x30, 0xcd, 0x78, 0x98, 0x9b, 0x40, 0xdf, 0xd6, 0xcc, 0x66, 0x93, 0x06, 0x1f, 0xa5, 0xce, 0xb7,
		0x8e, 0xc9, 0x43, 0xe7, 0xba, 0x7f, 0x76, 0xb2, 0x7c, 0x99, 0x2f, 0xb0, 0xb6, 0x66, 0x11, 0x9f,
		0x18, 0x85, 0xcb, 0x99, 0x8e, 0xca, 0xae, 0x3d, 0x23, 0x1a, 0xcd, 0x19, 0x65, 0xd4, 0x9a, 0x0d,
		0x68, 0x4d, 0x68, 0xcd, 0xb2, 0x56, 0xe3, 0xcf, 0xc9, 0x37, 0x41, 0x41, 0xfe, 0xfc, 0x68, 0x28,
		0x40, 0x41, 0x01, 0x4a, 0x41, 0x87, 0x2d, 0xa7, 0xbb, 0x58, 0x92, 0x0e, 0x67, 0xb9, 0xce, 0x91,
		0x85, 0xd6, 0x66, 0x68, 0x6d, 0x86, 0xd6, 0x66, 0x68, 0x6d, 0x46, 0xc8, 0x73, 0x19, 0xf3, 0x08,
		0xde, 0xa4, 0x8e, 0xf4, 0xe5, 0x44, 0xcd, 0xda, 0xb9, 0x17, 0xe9, 0x33, 0xad, 0x33, 0x5a, 0x51,
		0x9f, 0x3c, 0xf9, 0xde, 0x17, 0xb1, 0xe6, 0xca, 0xc8, 0x96, 0xd6, 0x3e, 0x39, 0x3f, 0xe6, 0x46,
		0x68, 0x1c, 0xb7, 0x5a, 0x9d, 0xa3, 0x56, 0xab, 0x7e, 0x74, 0x78, 0x54, 0x3f, 0x69, 0xb7, 0x1b,
		0x9d, 0x46, 0x96, 0x90, 0xc1, 0xef, 0xca, 0x15, 0x4a, 0xb8, 0x6f, 0xe3, 0xd5, 0x91, 0x43, 0xdf,
		0xcf, 0x33, 0xc4, 0x9f, 0x91, 0x50, 0x99, 0xe8, 0xdb, 0x6d, 0xae, 0x36, 0x9c, 0x85, 0xe7, 0x0f,
		0xf2, 0x38, 0x8a, 0x96, 0xb1, 0xfc, 0x87, 0xaf, 0xc9, 0xf3, 0x5d, 0xff, 0x11, 0x3f, 0xec, 0xd7,
		0xf1, 0xb3, 0x56, 0x22, 0x3b, 0x6d, 0x7c, 0xc4, 0x37, 0x0e, 0x2b, 0x67, 0x3b, 0xd0, 0xd9, 0x0f,
		0x32, 0xe9, 0x01, 0xce, 0x71, 0x70, 0x73, 0x1c, 0x58, 0x24, 0x0a, 0x22, 0x51, 0xd0, 0x28, 0x9d,
		0x82, 0x44, 0xc1, 0xd4, 0x96, 0xd8, 0xb6, 0x25, 0x0a, 0xa6, 0x36, 0xd6, 0x4c, 0xaa, 0x49, 0xb2,
		0x24, 0xc1, 0x9d, 0x1c, 0x5b, 0x3a, 0xd1, 0x7c, 0xe3, 0x55, 0xb3, 0x5f, 0xd4, 0x80, 0xe9, 0x34,
		0x5f, 0x7a, 0x8d, 0x47, 0xa2, 0xe9, 0x32, 0x68, 0xb8, 0x0c, 0x9a, 0xed, 0xa5, 0xa5, 0x4d, 0x79,
		0x4a, 0x4c, 0x9e, 0x8e, 0xda, 0x26, 0xdd, 0x11, 0xb8, 0x8f, 0xc2, 0xf3, 0x07, 0x60, 0xbd, 0x58,
		0xaf, 0xfe, 0xcd, 0x9a, 0xdd, 0xd8, 0x74, 0x17, 0xe8, 0x57, 0xff, 0x99, 0x35, 0xa6, 0x5b, 0xdb,
		0xd5, 0x6b, 0xb8, 0xbc, 0x42, 0x2b, 0x56, 0xa7, 0x16, 0x3a, 0x4a, 0x48, 0x3d, 0x79, 0x13, 0xfb,
		0x99, 0x7c, 0xcc, 0xa9, 0xad, 0xb3, 0xfc, 0x91, 0x35, 0xab, 0xfe, 0x3c, 0xcd, 0xfe, 0x22, 0x8d,
		0xbe, 0x09, 0x4d, 0x9e, 0xbe, 0x85, 0xc5, 0xa6, 0x36, 0x4f, 0x6a, 0x2a, 0x3b, 0xb5, 0x01, 0x93,
		0xa9, 0x05, 0x45, 0x3a, 0xb9, 0x7f, 0x91, 0x2e, 0x5e, 0x08, 0x23, 0x3c, 0x8b, 0xfb, 0x2f, 0x94,
		0x1a, 0x6d, 0x26, 0x6d, 0x91, 0xd7, 0x97, 0x8e, 0xef, 0xc9, 0xfe, 0xf3, 0xc9, 0x46, 0xb3, 0xc2,
		0xa8, 0xc5, 0xbf, 0x87, 0x9c, 0x55, 0x5e, 0xce, 0x3c, 0x57, 0x48, 0xed, 0xe9, 0x07, 0x25, 0x7a,
		0x9b, 0x08, 0xdb, 0x33, 0x7a, 0xbe, 0xf6, 0x71, 0x3c, 0xd4, 0x5b, 0x27, 0xda, 0x60, 0x99, 0xe7,
		0x05, 0x7d, 0x23, 0xb1, 0x9a, 0x7e, 0x32, 0x49, 0x7a, 0x8c, 0x36, 0xf2, 0x26, 0x53, 0x96, 0x5e,
		0xdc, 0xf4, 0xc3, 0xd9, 0xb3, 0xd4, 0x28, 0x2a, 0x41, 0x52, 0x3e, 0x80, 0xdf, 0xd4, 0x45, 0x3f,
		0x81, 0x9b, 0xee, 0x01, 0x76, 0xb2, 0x39, 0x38, 0x8f, 0x79, 0x40, 0x4b, 0x3b, 0x7a, 0x18, 0x6d,
		0x00, 0x56, 0xa3, 0xbf, 0x7b, 0x1e, 0xa4, 0x1a, 0x26, 0x40, 0x6a, 0xa3, 0x98, 0x70, 0x49, 0x01,
		0x6a, 0x93, 0x98, 0x6c, 0x3a, 0x70, 0x7a, 0x29, 0x71, 0xa1, 0xe6, 0xb8, 0x03, 0x4f, 0xda, 0x2f,
		0x6c, 0xf3, 0xd2, 0x22, 0x2f, 0x7c, 0xea, 0x25, 0x07, 0x6b, 0xa3, 0x2c, 0x9d, 0x8d, 0x13, 0x0b,
		0xd2, 0x24, 0x10, 0x64, 0x4b, 0x14, 0x48, 0xcb, 0x0c, 0x65, 0x0e, 0xfc, 0x67, 0xa6, 0x7d, 0x32,
		0x07, 0xf2, 0xf3, 0xb9, 0xca, 0x9b, 0x66, 0xc1, 0xd4, 0x7c, 0x27, 0xd2, 0x76, 0xf7, 0x76, 0x5c,
		0x51, 0x91, 0x16, 0x15, 0xe7, 0x3e, 0xbc, 0x05, 0xfd, 0xe5, 0x50, 0x94, 0x57, 0x64, 0x51, 0x5e,
		0xf6, 0xbe, 0x72, 0xae, 0xa3, 0x85, 0xed, 0x48, 0xd7, 0xd6, 0xde, 0x40, 0x64, 0x68, 0x2f, 0x97,
		0x26, 0x29, 0x24, 0x73, 0x12, 0x48, 0x6d, 0x12, 0x0f, 0xb7, 0x77, 0x1b, 0x49, 0x24, 0xfd, 0x57,
		0x3d, 0x09, 0x8c, 0xef, 0xd9, 0xbb, 0xa3, 0x2f, 0x7e, 0x5d, 0x36, 0x7e, 0x4d, 0xe2, 0xeb, 0x87,
		0x97, 0x75, 0xbb, 0x71, 0xb5, 0xf7, 0x75, 0xb7, 0x3e, 0x9f, 0xc5, 0x90, 0xa4, 0x30, 0x1c, 0x5e,
		0x25, 0x71, 0xef, 0x71, 0x7c, 0x7d, 0xee, 0xcb, 0xdd, 0xef, 0xdf, 0xf7, 0x93, 0x2f, 0xfe, 0xb1,
		0xf7, 0xcf, 0xdd, 0xff, 0xf7, 0xeb, 0xf2, 0xfb, 0xf7, 0x7f, 0x7c, 0xff, 0x6e, 0x5f, 0xed, 0x26,
		0xd3, 0x1d, 0xc6, 0xd3, 0xc5, 0xbf, 0xdc, 0x3b, 0xdd, 0x9d, 0x7d, 0x64, 0xef, 0x57, 0xa3, 0x75,
		0x5a, 0xaf, 0xef, 0xed, 0xfd, 0xb3, 0x56, 0xca, 0x9e, 0x62, 0x1b, 0xea, 0xba, 0x74, 0x26, 0x0e,
		0x20, 0x09, 0x90, 0xc4, 0x0e, 0x49, 0x9b, 0xf9, 0x8f, 0x59, 0xfc, 0xc9, 0x7c, 0xfe, 0xe5, 0xf3,
		0x66, 0xa2, 0x17, 0x69, 0x95, 0x54, 0xa7, 0xd9, 0xa9, 0x4e, 0x50, 0x16, 0x17, 0x34, 0x7f, 0x50,
		0x73, 0x85, 0x95, 0xeb, 0x06, 0xf7, 0x59, 0xf2, 0x91, 0xdf, 0x14, 0xf3, 0xb4, 0xa1, 0x12, 0xb6,
		0x2b, 0x42, 0x3f, 0x78, 0x48, 0x24, 0xbe, 0x32, 0xcf, 0xad, 0x45, 0x72, 0xdd, 0x6c, 0x75, 0x1e,
		0x78, 0x18, 0x72, 0x07, 0x37, 0xaf, 0xa8, 0x01, 0x8a, 0xd9, 0x3d, 0x30, 0x14, 0xee, 0x19, 0xa1,
		0xc8, 0x41, 0x0a, 0x17, 0x34, 0x5b, 0xc4, 0xe1, 0x4b, 0x32, 0xf4, 0xf5, 0x59, 0x3c, 0xcf, 0xe8,
		0xeb, 0xcc, 0xf1, 0x9a, 0x67, 0x88, 0x88, 0x20, 0x14, 0x2a, 0xb5, 0xfb, 0x3d, 0xff, 0x21, 0x62,
		0xef, 0xbb, 0x09, 0xef, 0x1b, 0xde, 0xb7, 0x19, 0xef, 0xbb, 0x09, 0x53, 0x17, 0xa6, 0x2e, 0xbc,
		0x6f, 0x78, 0xdf, 0xe5, 0xf1, 0xbe, 0x01, 0x49, 0x80, 0xa4, 0xad, 0xf1, 0xbe, 0x63, 0x2b, 0x31,
		0x31, 0xc7, 0x1d, 0xbf, 0x72, 0xae, 0x77, 0x10, 0x56, 0xc6, 0xef, 0x0e, 0x42, 0x7b, 0x28, 0xff,
		0x92, 0x15, 0x7a, 0x5a, 0x78, 0xae, 0x85, 0x7a, 0xae, 0x9b, 0x7b, 0x6f, 0xb9, 0x1c, 0xd7, 0xdf,
		0x43, 0xa1, 0x72, 0xfa, 0xad, 0x65, 0xca, 0x33, 0x7c, 0x71, 0xc1, 0xb2, 0x2e, 0x54, 0x9e, 0x0c,
		0xc2, 0xa1, 0x74, 0x85, 0xf2, 0x9d, 0x07, 0x5b, 0x2b, 0x47, 0x46, 0xe3, 0x36, 0x20, 0x2f, 0xa4,
		0x4a, 0xac, 0xf8, 0x4c, 0x09, 0xd2, 0x26, 0x90, 0xdb, 0x95, 0xc5, 0xe7, 0xae, 0x6d, 0xd4, 0x37,
		0x6c, 0xba, 0xc8, 0x9b, 0x64, 0x5c, 0x6d, 0xd6, 0xc2, 0x10, 0xe9, 0x12, 0x5b, 0x44, 0xd8, 0x38,
		0x37, 0x91, 0x56, 0x4e, 0x37, 0x43, 0xff, 0xe2, 0xe9, 0x27, 0xd3, 0xf9, 0x45, 0x2d, 0x44, 0x25,
		0xe1, 0x17, 0x65, 0x13, 0xd6, 0xe9, 0x07, 0x3c, 0x19, 0x69, 0x47, 0x76, 0x45, 0xce, 0xd6, 0x89,
		0x8b, 0xc3, 0xa0, 0x6d, 0x22, 0x8f, 0xb8, 0x93, 0x89, 0x3d, 0x99, 0xf8, 0x93, 0x1d, 0x83, 0x6c,
		0x1e, 0x8a, 0xf9, 0x9e, 0xc6, 0xd9, 0xe8, 0x83, 0x3c, 0x34, 0x02, 0x0d, 0x9d, 0xb0, 0x6c, 0xc4,
		0x4c, 0xcc, 0x56, 0x3b, 0xcf, 0xd9, 0xa5, 0xe0, 0x18, 0xf2, 0xb9, 0xc4, 0x4b, 0x2f, 0x26, 0xe4,
		0x6d, 0xfc, 0x36, 0x6e, 0xec, 0x83, 0xd4, 0x8a, 0xe8, 0x53, 0x4c, 0xf4, 0x1e, 0x89, 0x29, 0x2c,
		0x47, 0x55, 0xb9, 0x76, 0xe4, 0x6f, 0x7c, 0xa7, 0x70, 0x39, 0xdf, 0xe6, 0x6e, 0x54, 0x6e, 0x3c,
		0x79, 0x21, 0xd3, 0xcd, 0xaa, 0xae, 0x2a, 0xd9, 0x9d, 0x71, 0xc5, 0x19, 0xcd, 0x73, 0xdb, 0xc0,
		0xea, 0xe1, 0xa0, 0xac, 0xa1, 0xac, 0x71, 0x29, 0xd9, 0x1a, 0x3d, 0x7d, 0x8c, 0x9b, 0xf1, 0x97,
		0x39, 0xbc, 0x65, 0xea, 0xeb, 0x20, 0x36, 0x1d, 0x0e, 0xa6, 0x6e, 0xac, 0xc1, 0x40, 0x64, 0xa8,
		0x02, 0x1d, 0x74, 0x03, 0x3f, 0xbd, 0xd3, 0x3d, 0xfd, 0x24, 0x9c, 0x6e, 0x38, 0xdd, 0x66, 0x9d,
		0xee, 0xd4, 0x42, 0x9b, 0x57, 0x78, 0xa1, 0xbd, 0xa1, 0xbd, 0xe1, 0x6a, 0x17, 0xe5, 0x6a, 0x4f,
		0x0e, 0xeb, 0x96, 0x38, 0xd8, 0x37, 0xfd, 0xd0, 0xf6, 0x87, 0x55, 0x76, 0x46, 0xfb, 0x42, 0x8a,
		0xbb, 0x4a, 0xbb, 0xd3, 0x7d, 0x25, 0xf2, 0xb6, 0xa5, 0x26, 0x10, 0x28, 0x9a, 0x97, 0x5a, 0xf5,
		0x72, 0xf6, 0x5d, 0xab, 0x96, 0x7b, 0xd0, 0xc7, 0x37, 0xa5, 0x7c, 0xb3, 0x0e, 0xc1, 0x9b, 0xe5,
		0x1a, 0xe1, 0xaa, 0xda, 0x82, 0x9f, 0x4b, 0x36, 0x4a, 0xf2, 0x06, 0x9d, 0x4a, 0x33, 0x93, 0xa1,
		0xed, 0x49, 0xdb, 0x0b, 0xb7, 0x17, 0x81, 0x26, 0x6f, 0xb8, 0x9d, 0x28, 0x34, 0x7d, 0x3b, 0x20,
		0x51, 0xc1, 0x32, 0x52, 0xa2, 0xb7, 0xa8, 0x34, 0x22, 0xf9, 0x6e, 0x58, 0xe5, 0xc7, 0x1f, 0x84,
		0x7e, 0x14, 0x6f, 0xc3, 0xb0, 0xda, 0xaf, 0xa1, 0xa2, 0xbb, 0xd0, 0xd6, 0x95, 0xb6, 0xab, 0x23,
		0xb5, 0xbd, 0x4a, 0x2d, 0x52, 0x76, 0x2c, 0x68, 0xdb, 0xa8, 0xd1, 0xc6, 0xaf, 0x66, 0x07, 0x77,
		0x42, 0xc5, 0x86, 0xc9, 0x56, 0xbe, 0x22, 0xd4, 0x75, 0xa1, 0xd2, 0x5f, 0x9a, 0x57, 0xc8, 0x2f,
		0xe5, 0x65, 0x78, 0x95, 0x6a, 0x1b, 0x1c, 0x99, 0x4b, 0x45, 0xca, 0xf3, 0x0a, 0x77, 0x3f, 0x7c,
		0x47, 0x8e, 0x42, 0x78, 0x5b, 0x97, 0x8d, 0x81, 0x6b, 0x6d, 0x16, 0x7b, 0x87, 0xe7, 0x24, 0xb0,
		0x87, 0x91, 0xc8, 0x6a, 0x17, 0x51, 0x5c, 0xcb, 0x37, 0x1f, 0x83, 0x09, 0x46, 0x6f, 0x65, 0xdf,
		0x3c, 0xe4, 0xb9, 0xf1, 0x8d, 0xf2, 0x4a, 0xbe, 0x85, 0x78, 0x4c, 0xb2, 0x52, 0xa6, 0x6e, 0x8b,
		0x22, 0xb8, 0xa8, 0x28, 0x7e, 0x75, 0xa4, 0x38, 0x6c, 0x9e, 0xe2, 0x30, 0x8d, 0xbb, 0xbe, 0xa6,
		0x82, 0xb7, 0x35, 0x8b, 0xb1, 0x15, 0xf5, 0x68, 0x1b, 0x97, 0x71, 0x59, 0x99, 0x6a, 0xd3, 0xfe,
		0x1c, 0x0f, 0xff, 0x75, 0x3a, 0x7a, 0x8e, 0x32, 0xb5, 0xf8, 0xb9, 0x5d, 0x11, 0x75, 0x95, 0x17,
		0x3e, 0xbb, 0x1e, 0x0b, 0x91, 0xf3, 0xf9, 0x0f, 0x94, 0xa0, 0xf9, 0x38, 0xfa, 0xfa, 0xce, 0x8f,
		0xbe, 0x79, 0xd3, 0xf1, 0x17, 0x53, 0xd9, 0x48, 0x9a, 0xdb, 0x27, 0xc7, 0x65, 0x34, 0xe3, 0x06,
		0xa2, 0x95, 0xfc, 0x25, 0x64, 0x0a, 0x32, 0xf5, 0xb2, 0x4c, 0x05, 0xae, 0x88, 0x36, 0x14, 0xaa,
		0xe4, 0x4f, 0x51, 0x4a, 0x5b, 0xd5, 0x52, 0xda, 0xc9, 0x1e, 0xa6, 0xbb, 0xce, 0x20, 0xf9, 0x44,
		0x05, 0x3a, 0x90, 0x6f, 0x2c, 0x14, 0x59, 0xfd, 0x9f, 0x82, 0xcb, 0x6a, 0x37, 0x15, 0x1a, 0x1a,
		0xfb, 0x75, 0xf3, 0xd2, 0xda, 0x6e, 0xd2, 0x79, 0xf4, 0x99, 0x4b, 0x8a, 0xd2, 0xd7, 0xdc, 0xbe,
		0x38, 0x64, 0xba, 0xbc, 0xe0, 0x46, 0x19, 0xf3, 0x82, 0x53, 0x8b, 0x6b, 0x5e, 0xb7, 0xbd, 0x64,
		0xb9, 0xc1, 0x69, 0xc5, 0x99, 0xc7, 0x77, 0x4d, 0x9d, 0x1f, 0xbc, 0xfe, 0xbe, 0xb3, 0xcc, 0x09,
		0xc3, 0x79, 0xae, 0x50, 0xcb, 0x21, 0xee, 0x99, 0xc5, 0x3e, 0x8f, 0xf8, 0xd3, 0x1d, 0x03, 0x2a,
		0x16, 0xab, 0xe4, 0x59, 0xc4, 0x59, 0x8f, 0x89, 0x19, 0x76, 0x36, 0xed, 0xf1, 0x99, 0x7e, 0xb0,
		0x2b, 0xec, 0x3b, 0xdf, 0x89, 0xed, 0xeb, 0x58, 0xda, 0x45, 0xec, 0xf2, 0x67, 0xbf, 0x31, 0x7b,
		0x41, 0xa0, 0xd6, 0x8e, 0x9c, 0x71, 0x33, 0xb2, 0xa5, 0xe5, 0xe7, 0x3e, 0x5c, 0x14, 0x87, 0x8c,
		0xfe, 0xb0, 0x51, 0x52, 0xc7, 0xa4, 0x87, 0x8f, 0x85, 0x3e, 0x26, 0x3f, 0x8c, 0xf9, 0x42, 0x33,
		0x19, 0xe3, 0x52, 0xd9, 0xd3, 0xfd, 0x97, 0xe4, 0xe7, 0x26, 0x08, 0x7c, 0xe1, 0xc8, 0x3c, 0x82,
		0x33, 0xd1, 0x51, 0x8d, 0x12, 0x33, 0xf1, 0x13, 0x08, 0xe1, 0x01, 0x26, 0x80, 0x12, 0x40, 0x09,
		0xa0, 0x04, 0x50, 0x4a, 0x0b, 0x4a, 0x81, 0xd4, 0x2a, 0xf0, 0xed, 0x58, 0x32, 0x6d, 0x29, 0xfa,
		0x81, 0xf6, 0xa8, 0x80, 0x69, 0xdd, 0xc8, 0x00, 0x27, 0x80, 0x13, 0xc0, 0xa9, 0xe2, 0xe0, 0x94,
		0x71, 0x09, 0xc4, 0x0f, 0xad, 0x1c, 0x7b, 0x28, 0x23, 0xed, 0xdc, 0xf8, 0x39, 0x17, 0x43, 0x89,
		0x9e, 0x50, 0x42, 0x26, 0xd2, 0x9f, 0x2f, 0xf5, 0x36, 0x7f, 0xe2, 0xe6, 0x74, 0x67, 0xbe, 0x88,
		0x6e, 0x0c, 0x72, 0xd6, 0x91, 0x15, 0xf4, 0xac, 0x3f, 0x3e, 0xfc, 0x66, 0x1d, 0xd7, 0x8f, 0x8e,
		0x6a, 0xf9, 0x73, 0x4b, 0xa9, 0x0e, 0xfa, 0xaa, 0x03, 0x3f, 0x5b, 0xc8, 0x37, 0x34, 0x63, 0x53,
		0x9f, 0xfd, 0x95, 0x18, 0xb0, 0x7a, 0xa5, 0x0b, 0xce, 0x97, 0xcd, 0xfe, 0xe9, 0xab, 0x12, 0x1b,
		0x09, 0x7e, 0xd0, 0x75, 0x7c, 0xdb, 0x19, 0xea, 0x40, 0x06, 0x83, 0x60, 0x18, 0xd9, 0xd1, 0x43,
		0xa4, 0xc5, 0x20, 0xbf, 0x8d, 0xb0, 0x6e, 0x60, 0x98, 0x08, 0x30, 0x11, 0x60, 0x22, 0xe4, 0x92,
		0x1f, 0x27, 0xb2, 0xe5, 0x70, 0x70, 0x23, 0x14, 0x81, 0x91, 0x70, 0x94, 0x63, 0x88, 0x3f, 0xc6,
		0xd7, 0x19, 0x15, 0xae, 0xa1, 0x3f, 0x79, 0x92, 0x4e, 0x7b, 0x26, 0x35, 0x3f, 0xd9, 0x91, 0x62,
		0x69, 0xbc, 0x0f, 0xca, 0x49, 0xb4, 0xd9, 0x3b, 0xaf, 0xef, 0x65, 0x4d, 0x2a, 0x5e, 0x2d, 0x0e,
		0xa2, 0x9f, 0xdc, 0xe1, 0x58, 0x3b, 0xb5, 0x7a, 0x8e, 0x1f, 0x89, 0x32, 0xd4, 0xc9, 0xd4, 0x3e,
		0x39, 0x3f, 0xe8, 0xb7, 0xa2, 0xd5, 0x3c, 0x69, 0x9d, 0x74, 0x8e, 0x9a, 0x27, 0xed, 0xd7, 0xb7,
		0x27, 0xb0, 0x59, 0x96, 0x16, 0x79, 0xe0, 0x74, 0xed, 0x30, 0xf0, 0xbd, 0xae, 0x97, 0x22, 0x57,
		0x60, 0x2d, 0x9a, 0x2e, 0x8c, 0x96, 0xcf, 0x3a, 0x69, 0xc0, 0x3a, 0x81, 0x75, 0x52, 0x4d, 0xeb,
		0x24, 0x6b, 0x5c, 0x76, 0xe1, 0x50, 0x3a, 0xae, 0xab, 0x6c, 0xdf, 0x1b, 0x78, 0x3a, 0xff, 0xa6,
		0xcf, 0x1f, 0xcf, 0xb9, 0x71, 0x73, 0x6e, 0x54, 0xbe, 0x83, 0x4a, 0x76, 0x60, 0x29, 0x0f, 0x2e,
		0xdf, 0x01, 0x36, 0x41, 0x50, 0x90, 0x1c, 0x68, 0xb3, 0xec, 0x04, 0xd5, 0x01, 0x27, 0x52, 0xf1,
		0x39, 0x25, 0x30, 0xef, 0xc1, 0x9f, 0x0e, 0x34, 0xb2, 0xa8, 0xe8, 0x84, 0x64, 0x3e, 0xb7, 0x2f,
		0x90, 0x54, 0x12, 0x92, 0x8f, 0x47, 0x60, 0x03, 0x02, 0x0e, 0x40, 0xe0, 0x07, 0x06, 0x2e, 0x80,
		0x60, 0x07, 0x0a, 0x76, 0xc0, 0x30, 0x02, 0x1c, 0x34, 0x00, 0x42, 0xe8, 0xfd, 0xd1, 0xf0, 0x1c,
		0xeb, 0xe5, 0x37, 0x57, 0x0f, 0xc9, 0x17, 0x6d, 0x82, 0x36, 0xe1, 0x98, 0x24, 0x3d, 0x27, 0x37,
		0xb3, 0x8d, 0x28, 0xe1, 0x71, 0xd1, 0xf3, 0xa6, 0x69, 0x7c, 0x42, 0xcf, 0xf7, 0x3c, 0xbb, 0x26,
		0xae, 0x0a, 0xc2, 0x1a, 0xf9, 0x14, 0x8f, 0x6f, 0xaa, 0xb6, 0x0e, 0x3d, 0x3f, 0x08, 0x5c, 0x2c,
		0x84, 0x55, 0xbb, 0x77, 0x94, 0xf4, 0x64, 0x9f, 0x61, 0x29, 0x48, 0x47, 0xbc, 0x2a, 0x9b, 0x3a,
		0x28, 0x05, 0x9d, 0x18, 0x23, 0x9c, 0x1c, 0x0e, 0x88, 0x9c, 0xca, 0x95, 0x00, 0x3a, 0x1b, 0x1e,
		0x26, 0x26, 0x4c, 0x4c, 0x98, 0x98, 0xaf, 0xda, 0xc4, 0x1c, 0x7a, 0x52, 0x37, 0x3a, 0x0c, 0xd6,
		0x65, 0x87, 0x70, 0x48, 0x9a, 0xb8, 0x1b, 0xbf, 0x1a, 0x26, 0x8d, 0xcb, 0xad, 0x36, 0x51, 0xe9,
		0x60, 0x71, 0x69, 0x7c, 0xae, 0x18, 0xd1, 0xb2, 0xec, 0x51, 0xc7, 0x8c, 0x0c, 0xd8, 0x6c, 0xa4,
		0x71, 0xbe, 0xb5, 0x5b, 0xdb, 0x69, 0xb7, 0x0f, 0xdb, 0xd8, 0x5e, 0xa3, 0x76, 0x28, 0xdd, 0x68,
		0x57, 0x5b, 0x64, 0x87, 0x6a, 0x6f, 0x20, 0x6c, 0x4f, 0x6a, 0xa1, 0xee, 0x1c, 0x9f, 0xde, 0x0e,
		0x5d, 0x1c, 0x1e, 0x76, 0x28, 0xec, 0x50, 0xd8, 0xa1, 0xaf, 0xde, 0x0e, 0x3d, 0x6c, 0x32, 0xd8,
		0xa1, 0x47, 0xb0, 0x43, 0x61, 0x87, 0xc2, 0x0e, 0x4d, 0xb7, 0xb5, 0xd4, 0xf9, 0x67, 0x30, 0x46,
		0x5f, 0xaf, 0x31, 0x5a, 0x68, 0xb0, 0x3f, 0x63, 0xe3, 0xcd, 0xb5, 0xe3, 0x65, 0xec, 0xd3, 0x38,
		0x6d, 0x0d, 0x36, 0xfd, 0xea, 0xe0, 0xc5, 0x0e, 0x3e, 0x07, 0x6b, 0x7f, 0x75, 0x30, 0x9f, 0xc1,
		0x77, 0x40, 0x9a, 0x2f, 0x64, 0x65, 0xea, 0x13, 0x19, 0xff, 0x32, 0x7e, 0xbb, 0xc9, 0x17, 0xd7,
		0x67, 0xc9, 0xcb, 0xfd, 0x2b, 0x79, 0x81, 0x8b, 0xe9, 0xf3, 0x5f, 0x8c, 0xdf, 0xec, 0x7a, 0xcd,
		0x2f, 0xae, 0x3f, 0x39, 0xdd, 0x8b, 0xf1, 0x6b, 0xc5, 0x5f, 0x9f, 0xb9, 0xae, 0x3a, 0x4f, 0x5e,
		0xaa, 0xa0, 0x9c, 0xd0, 0x1c, 0xd2, 0x97, 0x30, 0xed, 0x7e, 0x10, 0x84, 0x76, 0xa8, 0xc4, 0x9d,
		0x90, 0x24, 0x22, 0xb8, 0x40, 0xe3, 0x3f, 0x1d, 0x1c, 0x89, 0x62, 0xe6, 0x9d, 0x24, 0x24, 0x8a,
		0x21, 0x51, 0xec, 0xe5, 0x81, 0x7a, 0x4a, 0xfc, 0x67, 0x28, 0x64, 0xf7, 0x81, 0x9e, 0x47, 0x99,
		0x0d, 0x4d, 0xb4, 0x9d, 0xef, 0x44, 0xcf, 0x19, 0xfa, 0x9a, 0xd4, 0xc9, 0xa9, 0xb5, 0x69, 0xfc,
		0xe1, 0x2b, 0xf0, 0x44, 0xe0, 0x89, 0xc0, 0x13, 0x81, 0x27, 0x02, 0x4f, 0x04, 0x9e, 0x08, 0x3c,
		0x11, 0x78, 0x22, 0xf0, 0x44, 0x5b, 0xc4, 0x13, 0x11, 0x78, 0x63, 0xa1, 0x0a, 0xf4, 0xa8, 0x93,
		0xc6, 0xe8, 0xb2, 0x7a, 0x72, 0x73, 0xfb, 0xe9, 0x04, 0x30, 0x48, 0x61, 0x90, 0xc2, 0x20, 0x7d,
		0xd5, 0x06, 0x29, 0x6a, 0x34, 0x9e, 0x2c, 0xc8, 0x13, 0x5e, 0x92, 0x12, 0x28, 0x17, 0xed, 0x8f,
		0x4a, 0x56, 0x6b, 0x44, 0xb7, 0x43, 0x8d, 0x22, 0x05, 0xab, 0xa6, 0x95, 0x13, 0xa2, 0x42, 0xa1,
		0x8a, 0x46, 0x96, 0x12, 0x5a, 0x3d, 0xd8, 0xda, 0x1b, 0x08, 0x45, 0x6f, 0x60, 0xcd, 0x0f, 0x0e,
		0xe3, 0x0a, 0xc6, 0x15, 0x8c, 0xab, 0x57, 0x6d, 0x5c, 0x81, 0xed, 0x23, 0xa5, 0x84, 0xc0, 0xf6,
		0x95, 0x82, 0x09, 0x02, 0xdb, 0xb7, 0xfd, 0x7b, 0x0c, 0xb6, 0x8f, 0xdd, 0x10, 0xbd, 0xf7, 0xa4,
		0x1b, 0xdc, 0xd3, 0xdb, 0xa0, 0xe3, 0x71, 0xcb, 0x1c, 0x50, 0x6f, 0x1c, 0xd7, 0x11, 0x52, 0x87,
		0x91, 0x0d, 0x23, 0x1b, 0x46, 0x36, 0x8c, 0x6c, 0x18, 0xd9, 0x30, 0xc0, 0x60, 0x64, 0xc3, 0xc8,
		0x86, 0x91, 0x4d, 0x3a, 0x02, 0x4a, 0x2f, 0x36, 0x2a, 0xbd, 0xa0, 0x4d, 0xc3, 0xb7, 0xca, 0x54,
		0x7f, 0x71, 0x1e, 0x04, 0xe1, 0xc5, 0xec, 0xcd, 0x8a, 0x2a, 0xc2, 0x30, 0xda, 0x16, 0x98, 0x48,
		0x6a, 0x4b, 0x28, 0xad, 0x79, 0x1a, 0x5b, 0x97, 0x41, 0x22, 0x6b, 0x65, 0x6e, 0xd0, 0x3e, 0xf4,
		0xb5, 0xd7, 0x75, 0x22, 0x6d, 0xfb, 0xde, 0x5f, 0x82, 0xa0, 0x45, 0xfb, 0xe2, 0x78, 0x68, 0xd2,
		0x8e, 0x26, 0xed, 0x25, 0x71, 0x92, 0x2b, 0xd6, 0xa4, 0xbd, 0x3b, 0x8c, 0x74, 0x30, 0x10, 0xca,
		0xd6, 0x4a, 0x08, 0xbb, 0xe7, 0x3b, 0x77, 0x81, 0x8a, 0xe8, 0xea, 0xf0, 0x56, 0x0f, 0x8f, 0x4a,
		0x3c, 0xf3, 0x9c, 0x19, 0x2a, 0xf1, 0x50, 0x89, 0xf7, 0xf2, 0x40, 0x73, 0xc7, 0x94, 0xa1, 0xa7,
		0xd1, 0xdc, 0xe0, 0xa0, 0xd5, 0xcb, 0x07, 0x11, 0x5c, 0x50, 0xc1, 0x0e, 0x19, 0xec, 0xd0, 0x61,
		0x04, 0x42, 0x68, 0x79, 0x16, 0x24, 0x06, 0x57, 0xaf, 0x79, 0xfb, 0xd4, 0xa9, 0x49, 0x90, 0x12,
		0x79, 0xc1, 0x8b, 0x57, 0x1c, 0x0e, 0xe6, 0x96, 0x05, 0x09, 0xc2, 0xb5, 0x1b, 0xcf, 0xf5, 0x14,
		0x96, 0x64, 0x21, 0x77, 0x9c, 0x59, 0x46, 0xb6, 0x3b, 0x79, 0x9a, 0x48, 0x61, 0x9c, 0x7b, 0x91,
		0x3e, 0xd3, 0x5a, 0xd1, 0x2a, 0x8d, 0x4f, 0x9e, 0x7c, 0xef, 0x8b, 0x58, 0xf5, 0x12, 0x47, 0x64,
		0x6a, 0x9f, 0x9c, 0x1f, 0x73, 0x23, 0x37, 0x8e, 0x5b, 0xad, 0xce, 0x51, 0xab, 0x55, 0x3f, 0x3a,
		0x3c, 0xaa, 0x9f, 0xb4, 0xdb, 0x8d, 0x0e, 0xa9, 0x22, 0xf9, 0x5d, 0xb9, 0x42, 0x09, 0xf7, 0xed,
		0x43, 0xed, 0xd4, 0x92, 0x43, 0xdf, 0xe7, 0x18, 0xfa, 0xcf, 0x28, 0x49, 0x3c, 0xa7, 0x0b, 0x29,
		0x21, 0xd0, 0xb2, 0x38, 0x5e, 0x49, 0xa8, 0xeb, 0x05, 0x0a, 0xf4, 0x80, 0x83, 0x69, 0xb1, 0x8a,
		0xa5, 0xb6, 0x27, 0x2f, 0x78, 0xee, 0xfd, 0x25, 0xae, 0x7f, 0x1b, 0xbf, 0xdf, 0x57, 0x25, 0xc4,
		0x87, 0xf1, 0xdb, 0x55, 0xb0, 0xeb, 0x95, 0x90, 0xce, 0x8d, 0x2f, 0x5c, 0x3a, 0x86, 0x6d, 0x32,
		0x60, 0x5e, 0x06, 0x81, 0x30, 0x0b, 0xaf, 0x96, 0x40, 0x4f, 0xbe, 0xdd, 0xb9, 0xa2, 0xe1, 0x08,
		0xeb, 0xe0, 0x08, 0xc1, 0x11, 0x82, 0x23, 0x24, 0x75, 0xe4, 0x67, 0x1e, 0x48, 0x10, 0xf8, 0xc2,
		0x21, 0x89, 0xe8, 0x4f, 0x9c, 0xf6, 0x06, 0x62, 0xe8, 0x15, 0x37, 0x44, 0xaa, 0x19, 0x45, 0x9f,
		0x37, 0x35, 0xca, 0x1c, 0x47, 0x1f, 0xaf, 0xb9, 0xed, 0xb9, 0xf9, 0x63, 0xe8, 0x73, 0x63, 0xe5,
		0x8b, 0x9f, 0xd7, 0x11, 0x3f, 0x67, 0x50, 0xa2, 0x88, 0x9f, 0x1b, 0x40, 0xe2, 0xdc, 0x4a, 0x71,
		0xc6, 0x3d, 0x69, 0xe5, 0xc9, 0x7e, 0x1e, 0xb9, 0x99, 0xe8, 0xc0, 0xe3, 0x12, 0xe3, 0x4f, 0x74,
		0xd7, 0xb5, 0x07, 0x7a, 0x98, 0x1f, 0x7c, 0x26, 0x03, 0x01, 0x79, 0x80, 0x3c, 0x40, 0x9e, 0x5c,
		0xf2, 0x93, 0xbb, 0x3c, 0x85, 0xa0, 0x1c, 0x85, 0xa8, 0xfc, 0x84, 0xc0, 0x39, 0xa1, 0x2c, 0x2f,
		0xa1, 0x2e, 0x27, 0x61, 0x2b, 0x2d, 0xa0, 0x2f, 0x25, 0xa0, 0xa8, 0x3f, 0xa5, 0x2c, 0x07, 0x61,
		0x2b, 0xff, 0xa8, 0xd2, 0x9e, 0x14, 0xe4, 0x1c, 0x5f, 0x99, 0x32, 0x48, 0x76, 0x18, 0x25, 0x34,
		0x56, 0x6a, 0xb9, 0xbc, 0x9e, 0x7c, 0x81, 0xad, 0xfc, 0x01, 0x2c, 0x96, 0x40, 0x15, 0x41, 0x40,
		0x8a, 0x20, 0xf0, 0x94, 0x76, 0x2b, 0x73, 0xf2, 0x27, 0xe5, 0xe0, 0x4d, 0x6a, 0x59, 0xcc, 0xef,
		0x82, 0x08, 0x92, 0x74, 0x46, 0xd5, 0xe6, 0xe7, 0x78, 0xb3, 0xbf, 0xdc, 0x50, 0x3c, 0xb2, 0x8a,
		0x85, 0x49, 0x71, 0x48, 0xb1, 0xe9, 0xec, 0x9b, 0xbd, 0xd9, 0xa6, 0xbe, 0xbc, 0x45, 0x1b, 0x6c,
		0x4f, 0xed, 0xa6, 0x1f, 0xda, 0xce, 0x50, 0x07, 0xb6, 0xeb, 0x45, 0xdd, 0xe0, 0x4e, 0xa8, 0xcd,
		0xaf, 0x7a, 0x98, 0xd1, 0xcd, 0xcb, 0x63, 0x6c, 0x28, 0x18, 0xe9, 0x12, 0xc6, 0x53, 0x7b, 0x87,
		0x59, 0xbc, 0xc1, 0xfc, 0xde, 0x5f, 0x56, 0x6f, 0x2f, 0xb7, 0x77, 0x97, 0xdb, 0x9b, 0x23, 0xf1,
		0xde, 0x68, 0xa1, 0x23, 0x6d, 0x02, 0x75, 0x22, 0x8c, 0x99, 0x5a, 0x28, 0x2f, 0x88, 0x73, 0x86,
		0x14, 0xbf, 0x89, 0x30, 0xa7, 0x54, 0xf6, 0x99, 0x29, 0x8f, 0x3c, 0x54, 0x07, 0x1d, 0xc5, 0x91,
		0x97, 0xda, 0x20, 0xa3, 0x34, 0xc8, 0xa8, 0x0c, 0x52, 0x0a, 0x83, 0xd7, 0x72, 0xce, 0x5a, 0x5d,
		0x50, 0x13, 0xf1, 0x0b, 0xdd, 0xf4, 0xc3, 0xfc, 0x74, 0xe1, 0x74, 0xa4, 0x7c, 0x7c, 0x61, 0x0b,
		0x7c, 0x21, 0xf8, 0xc2, 0x57, 0x5a, 0xe9, 0x97, 0x98, 0x4e, 0x2a, 0x18, 0x6a, 0x61, 0x6b, 0x47,
		0xf5, 0x85, 0xa6, 0xcb, 0x41, 0x5a, 0x1e, 0xba, 0x64, 0xd9, 0x3b, 0x4d, 0x64, 0xef, 0x94, 0xe0,
		0x58, 0xb3, 0x1d, 0x6f, 0xd6, 0x63, 0x4e, 0xc4, 0xbe, 0x95, 0x2e, 0x7b, 0x87, 0xf0, 0xbc, 0x2e,
		0x38, 0x59, 0xc7, 0x04, 0x63, 0x5d, 0x38, 0x5a, 0x0b, 0x25, 0xc9, 0xea, 0x54, 0x6a, 0xbb, 0xf5,
		0xd3, 0xdd, 0x4e, 0xbb, 0x7d, 0x78, 0x59, 0xb7, 0xdb, 0x57, 0xbf, 0x3a, 0xed, 0xf6, 0x65, 0xdd,
		0x6e, 0x5e, 0x5d, 0xd6, 0xed, 0x93, 0xf8, 0xbb, 0xcb, 0xba, 0xdd, 0x1a, 0x7d, 0xf3, 0xb3, 0xf9,
		0xf8, 0xab, 0x33, 0xf7, 0xed, 0xe1, 0xe3, 0xaf, 0xcb, 0x86, 0xdd, 0x1e, 0x7f, 0xd7, 0x4a, 0xbe,
		0x3b, 0x19, 0x7f, 0x57, 0x7f, 0x73, 0xf8, 0xf8, 0xab, 0xbe, 0x77, 0xba, 0x3b, 0xa5, 0xa4, 0x47,
		0xa3, 0x4f, 0xbe, 0xbd, 0xac, 0xdb, 0xc7, 0xe3, 0x29, 0xc6, 0x3f, 0xba, 0xac, 0x37, 0x66, 0xd3,
		0x8c, 0x7e, 0x76, 0x59, 0xb7, 0x3b, 0xb3, 0xb9, 0x92, 0x9f, 0x25, 0xa3, 0x4c, 0x27, 0x8c, 0x7f,
		0x34, 0x1b, 0xe9, 0x67, 0x3b, 0xf9, 0xc9, 0x65, 0xdd, 0x3e, 0x1c, 0xff, 0xa0, 0x13, 0xff, 0x60,
		0xee, 0x0f, 0x8e, 0x1e, 0x7f, 0xb5, 0x66, 0xf3, 0x1c, 0x27, 0x4f, 0x3c, 0xf9, 0xdb, 0x93, 0x27,
		0xcf, 0x7f, 0x1c, 0x3f, 0xff, 0xde, 0xaf, 0xdd, 0xc6, 0xe9, 0xee, 0xee, 0xee, 0xe8, 0x49, 0x67,
		0xbf, 0xff, 0xd5, 0x98, 0x3e, 0x6a, 0x73, 0xb6, 0x22, 0xbf, 0x9a, 0xed, 0xe4, 0xf9, 0xf6, 0xbe,
		0x7f, 0xdf, 0xdf, 0xfb, 0x79, 0xf8, 0x98, 0xf6, 0x63, 0x7b, 0x6c, 0xfb, 0xb0, 0xf7, 0x6b, 0xb7,
		0x59, 0xf5, 0xbd, 0xe0, 0x5c, 0x9c, 0xce, 0xee, 0xe9, 0xa5, 0x63, 0xf7, 0xce, 0xec, 0x0f, 0xe3,
		0x31, 0xf6, 0x7e, 0x76, 0x1e, 0xf7, 0x7e, 0xed, 0xee, 0x5e, 0x1e, 0xda, 0xed, 0x23, 0xfb, 0x64,
		0xf4, 0xbb, 0xd1, 0x56, 0x8e, 0xbf, 0x8e, 0x87, 0x18, 0x7f, 0xf9, 0xb3, 0xf1, 0xe6, 0xf0, 0x71,
		0xef, 0x74, 0xf1, 0x27, 0x8d, 0xe6, 0xe3, 0x5e, 0x7e, 0x60, 0xbd, 0x2a, 0x14, 0x58, 0xc5, 0x0f,
		0xad, 0x1c, 0x7b, 0x28, 0x23, 0xed, 0xdc, 0xf8, 0x44, 0x10, 0x7b, 0x7f, 0x2b, 0xe8, 0xb0, 0x8b,
		0xa1, 0xf2, 0x72, 0x7f, 0xff, 0x60, 0x64, 0xb2, 0x69, 0x7b, 0x94, 0x3e, 0x6e, 0xfd, 0x7f, 0xd6,
		0xdf, 0x62, 0x35, 0xfc, 0xb7, 0x8a, 0x55, 0x11, 0x27, 0x0b, 0x5d, 0xe5, 0x1a, 0xe2, 0x67, 0x76,
		0x82, 0xae, 0x3c, 0x8c, 0x70, 0x4f, 0xdf, 0x89, 0xa8, 0xab, 0xbc, 0x90, 0xac, 0x96, 0x66, 0xa5,
		0x78, 0xfe, 0xe6, 0x48, 0x2b, 0x90, 0xfe, 0x83, 0x75, 0x23, 0xac, 0x61, 0x24, 0x5c, 0x2b, 0xde,
		0x66, 0x2b, 0x59, 0xa7, 0x3f, 0xde, 0x59, 0x5e, 0x64, 0x8d, 0x6b, 0x1e, 0xf6, 0xa9, 0xb7, 0x9e,
		0x49, 0x62, 0x9f, 0x4a, 0xad, 0x3b, 0xb7, 0x88, 0x0c, 0x5d, 0x18, 0xb9, 0x05, 0x78, 0x49, 0x88,
		0x37, 0xdf, 0xaf, 0x92, 0xf6, 0x23, 0x2c, 0xcb, 0xed, 0x33, 0x57, 0x15, 0x2c, 0x68, 0x5a, 0x84,
		0x2f, 0x6a, 0x4e, 0x61, 0x3a, 0x2e, 0xca, 0x9b, 0x58, 0x09, 0x12, 0x94, 0x37, 0x81, 0x20, 0x01,
		0x41, 0xb2, 0x28, 0x7f, 0xe5, 0x2b, 0x6f, 0x2a, 0xa1, 0xab, 0xa3, 0x44, 0x4f, 0x28, 0x21, 0xbb,
		0xa2, 0xcc, 0xfe, 0xce, 0x1f, 0x1f, 0x7e, 0xb3, 0x8e, 0x5a, 0x87, 0xcd, 0x53, 0xeb, 0xed, 0xbf,
		0x2e, 0xac, 0x4f, 0x17, 0xe7, 0x5f, 0xec, 0xb7, 0x4e, 0x6c, 0xa8, 0xbc, 0xd7, 0xb7, 0x42, 0x49,
		0xa1, 0xad, 0x6f, 0x17, 0x9f, 0xdf, 0x7c, 0x97, 0xb3, 0x8f, 0x7e, 0x19, 0x5d, 0x62, 0x6b, 0x1d,
		0xed, 0x37, 0xea, 0xfb, 0x8d, 0x8a, 0x79, 0x45, 0xb3, 0x3d, 0xa9, 0xb2, 0x6b, 0x94, 0x7b, 0xd3,
		0x60, 0x1e, 0x96, 0xc0, 0x3c, 0x4c, 0x02, 0xb7, 0x24, 0x77, 0x4d, 0x2f, 0xc6, 0x82, 0x09, 0x9a,
		0x23, 0xc1, 0x88, 0x82, 0x11, 0x05, 0x23, 0x8a, 0xd9, 0x88, 0xca, 0x5d, 0x16, 0xb7, 0x64, 0x43,
		0x1d, 0xa3, 0x44, 0x3c, 0xc5, 0x38, 0x74, 0xb9, 0xad, 0xcb, 0xe9, 0x97, 0x07, 0x93, 0x14, 0xb6,
		0x83, 0x69, 0x7a, 0x4e, 0x89, 0x4b, 0x17, 0x47, 0x6f, 0x4d, 0x92, 0x8d, 0x34, 0x1b, 0x0a, 0xe9,
		0x48, 0x48, 0x47, 0x2a, 0x89, 0x06, 0xa9, 0x58, 0x3a, 0x52, 0xfc, 0xbe, 0x1e, 0x61, 0x1f, 0xa4,
		0xf1, 0x78, 0x30, 0x09, 0x61, 0x12, 0xc2, 0x24, 0x2c, 0xb5, 0x49, 0x48, 0x72, 0x52, 0x29, 0x4d,
		0x42, 0xd0, 0x6a, 0xd9, 0x69, 0xb5, 0x4e, 0xa7, 0xd9, 0x3a, 0xb5, 0xce, 0x9d, 0x07, 0xa1, 0xac,
		0xa6, 0xf5, 0xcd, 0x53, 0x7a, 0xe8, 0xf8, 0xd6, 0x85, 0xf2, 0xee, 0x1c, 0x2d, 0xac, 0xcf, 0x42,
		0xdf, 0x07, 0xea, 0xaf, 0xc8, 0xfa, 0x33, 0xf2, 0x64, 0x7f, 0x9e, 0xab, 0x79, 0xfb, 0xaf, 0x0b,
		0xab, 0x17, 0x28, 0xeb, 0x2c, 0xb6, 0x28, 0xdf, 0x4d, 0x2c, 0x4a, 0xcb, 0x91, 0xae, 0xf5, 0xc5,
		0xeb, 0x4b, 0xc7, 0xa7, 0xf1, 0x1a, 0x40, 0xbb, 0x65, 0xa1, 0xdd, 0x58, 0x37, 0x15, 0xb4, 0x1c,
		0x1c, 0x52, 0x76, 0x87, 0x74, 0xe6, 0xa1, 0x6d, 0x45, 0xed, 0x7a, 0x79, 0x0a, 0x9e, 0x9f, 0x59,
		0x74, 0xb6, 0x22, 0xe1, 0x14, 0x35, 0x91, 0xca, 0xb5, 0xbb, 0xb7, 0x81, 0xd7, 0xcd, 0x51, 0x97,
		0x37, 0x1b, 0xe2, 0x15, 0x14, 0xe6, 0xc5, 0xfb, 0xda, 0x0d, 0x06, 0x83, 0x4c, 0x99, 0x48, 0x5b,
		0x5e, 0x94, 0x37, 0xb7, 0x36, 0xdb, 0x52, 0x90, 0x97, 0x9c, 0x5c, 0x27, 0x8a, 0xbc, 0xbe, 0x14,
		0x04, 0x1d, 0x04, 0x17, 0x87, 0x03, 0x17, 0x96, 0xef, 0x38, 0xbd, 0x72, 0x1e, 0x2c, 0xcf, 0x71,
		0xab, 0x28, 0x07, 0xa6, 0xdc, 0x44, 0x97, 0xd2, 0x91, 0x60, 0x93, 0x01, 0x71, 0xc1, 0x9e, 0x99,
		0xa3, 0x0a, 0x06, 0x8c, 0xed, 0x28, 0x97, 0x83, 0xfd, 0x22, 0xbb, 0x58, 0x6f, 0x41, 0x55, 0xda,
		0xca, 0xa5, 0xbf, 0x5d, 0x6f, 0x69, 0x86, 0x92, 0x5f, 0xb1, 0xd7, 0xac, 0xc0, 0x15, 0x7b, 0xa4,
		0x20, 0x61, 0x92, 0x8b, 0xda, 0x82, 0xeb, 0xf5, 0x28, 0x41, 0x84, 0x98, 0x32, 0x2a, 0xfd, 0xd5,
		0x7a, 0xa3, 0xda, 0x5e, 0xd7, 0x8b, 0xb4, 0x27, 0xfb, 0x43, 0x2f, 0xba, 0x15, 0x8a, 0xe3, 0x8a,
		0xbd, 0x63, 0xc2, 0x31, 0xa9, 0x4b, 0x7e, 0xa7, 0x03, 0xa3, 0xf4, 0x17, 0xa5, 0xbf, 0x28, 0xfd,
		0x2d, 0x67, 0xe9, 0x2f, 0x0d, 0x85, 0x4e, 0x87, 0xee, 0x14, 0x5d, 0x6f, 0x13, 0x3b, 0x6c, 0x10,
		0xb8, 0x82, 0xc9, 0xc4, 0x4b, 0x86, 0xa6, 0xb5, 0xed, 0xda, 0xaf, 0xf1, 0xfa, 0x64, 0xd8, 0x76,
		0xb0, 0xed, 0xf8, 0x6c, 0x3b, 0x2a, 0xc7, 0x71, 0x3a, 0x60, 0x4f, 0x05, 0x03, 0x3b, 0x0c, 0x02,
		0x9f, 0xaf, 0xee, 0x7a, 0x36, 0x05, 0xf1, 0xd6, 0xe7, 0xa3, 0x78, 0x8d, 0xc1, 0x0d, 0x27, 0xec,
		0x98, 0x81, 0x1f, 0x6e, 0x18, 0x32, 0x06, 0x47, 0xc6, 0x60, 0xc9, 0x18, 0x3c, 0xd1, 0xc2, 0x14,
		0x31, 0x5c, 0xb1, 0xc1, 0xd6, 0x3c, 0xd5, 0x1d, 0x23, 0x8b, 0x3d, 0x6e, 0x67, 0xcc, 0x7c, 0x11,
		0xf4, 0xc2, 0x6c, 0x4c, 0x02, 0x43, 0xcb, 0x8b, 0x19, 0x03, 0x37, 0x13, 0x20, 0x67, 0x16, 0xec,
		0x4c, 0x81, 0x9e, 0x71, 0xf0, 0x33, 0x0e, 0x82, 0xc6, 0xc1, 0x90, 0x07, 0x14, 0x99, 0xc0, 0x91,
		0x8f, 0xb7, 0x5b, 0x7b, 0x6e, 0xc8, 0xaa, 0xa7, 0x5e, 0xa6, 0xf2, 0x76, 0xaa, 0xb1, 0xaf, 0xe5,
		0x56, 0x9f, 0xc4, 0x37, 0x8d, 0x2f, 0x8d, 0xcf, 0x9a, 0xc7, 0x35, 0x4d, 0x7c, 0x3a, 0x58, 0x08,
		0x25, 0x1d, 0x8c, 0x83, 0xca, 0x07, 0x53, 0xf6, 0xe1, 0x60, 0xe6, 0x28, 0x94, 0xb5, 0xa1, 0x0f,
		0xa1, 0x47, 0xdf, 0x1b, 0xfa, 0x3e, 0x4d, 0x98, 0x7e, 0xbd, 0xe3, 0x35, 0x9d, 0x02, 0x8e, 0x17,
		0x1c, 0x2f, 0x38, 0x5e, 0x70, 0xbc, 0xe8, 0x06, 0x66, 0x41, 0xae, 0xa5, 0x43, 0xc5, 0x00, 0x5e,
		0x70, 0xb4, 0xe0, 0x68, 0xc1, 0xd1, 0x82, 0xa3, 0x65, 0xe4, 0xdc, 0x88, 0x41, 0xa8, 0x1f, 0x4c,
		0xf8, 0x59, 0x87, 0xf0, 0xb3, 0xe0, 0x67, 0x6d, 0xec, 0x67, 0x4d, 0xfd, 0x82, 0xed, 0x6e, 0x9c,
		0x4a, 0x95, 0x82, 0xca, 0x23, 0x15, 0x25, 0x91, 0x86, 0x5a, 0x59, 0x72, 0x24, 0x0a, 0x4d, 0xc8,
		0x25, 0xde, 0xe3, 0x42, 0xf7, 0x96, 0x22, 0xf1, 0x3c, 0xff, 0x25, 0x91, 0x6f, 0xfb, 0xe1, 0xd9,
		0x50, 0x07, 0xd3, 0x72, 0xdd, 0xeb, 0x3f, 0xdc, 0xb3, 0xdc, 0x90, 0x83, 0xaa, 0x56, 0x7e, 0x31,
		0x2a, 0x73, 0xb3, 0xa5, 0xc5, 0x64, 0xf4, 0x68, 0xd8, 0xcb, 0xe3, 0x01, 0xad, 0x49, 0x71, 0x1f,
		0x8f, 0x8a, 0xb2, 0x33, 0x94, 0x9d, 0x15, 0xec, 0x75, 0x55, 0xb3, 0xec, 0x2c, 0xef, 0xb1, 0x5c,
		0x12, 0xc3, 0x27, 0xe3, 0xa2, 0x08, 0xcd, 0x2c, 0x5d, 0x83, 0x22, 0x34, 0x14, 0xa1, 0xa5, 0xd1,
		0xca, 0xca, 0xa5, 0x42, 0x80, 0x17, 0x14, 0xb5, 0x72, 0x69, 0x20, 0x81, 0x89, 0x11, 0x46, 0x49,
		0x1a, 0xd2, 0x96, 0x8b, 0x63, 0x68, 0x5f, 0x4b, 0x49, 0xda, 0xd0, 0x93, 0xba, 0xd1, 0x61, 0xa8,
		0x42, 0xeb, 0x10, 0x0e, 0xf9, 0x87, 0x23, 0xfb, 0x82, 0xbc, 0x04, 0x8d, 0x81, 0xa0, 0xfc, 0xe4,
		0x49, 0xbe, 0xa0, 0xde, 0x37, 0xc7, 0x1f, 0x0a, 0xc6, 0x80, 0xd8, 0x07, 0xe5, 0x24, 0x8d, 0xfa,
		0xdf, 0x79, 0x7d, 0x4f, 0x47, 0x8c, 0x13, 0x7d, 0x16, 0x7d, 0x47, 0x7b, 0x77, 0xf1, 0xbb, 0x24,
		0x77, 0xf6, 0xd0, 0xb3, 0xe4, 0x0c, 0x19, 0x04, 0x9f, 0x9c, 0x1f, 0xfc, 0x5b, 0xdb, 0x69, 0xb7,
		0x0f, 0xdb, 0xd8, 0x5e, 0x23, 0xd8, 0x4c, 0x3f, 0x1a, 0xca, 0xe5, 0x36, 0xb7, 0x42, 0x51, 0x2e,
		0x07, 0xbb, 0x13, 0x76, 0x67, 0xd9, 0xed, 0x4e, 0x94, 0xcb, 0x2d, 0xc3, 0x0c, 0xb2, 0x36, 0x91,
		0xb5, 0x59, 0x36, 0x58, 0x32, 0x06, 0x4f, 0x4c, 0x26, 0x18, 0xca, 0xe5, 0x56, 0x1d, 0x2e, 0x94,
		0xcb, 0x15, 0x0a, 0x72, 0x66, 0xc1, 0xce, 0x14, 0xe8, 0x19, 0x07, 0x3f, 0xe3, 0x20, 0x68, 0x1c,
		0x0c, 0x79, 0x40, 0x91, 0x91, 0xcc, 0xb0, 0x50, 0x2e, 0x57, 0xec, 0xbe, 0x22, 0x8d, 0xd3, 0x74,
		0x56, 0xce, 0x38, 0xd4, 0x75, 0xb0, 0x18, 0x0c, 0x47, 0xf1, 0x1c, 0x8a, 0xe7, 0xe0, 0x86, 0xc1,
		0x0d, 0x83, 0x1b, 0x66, 0xa1, 0x78, 0xee, 0xe9, 0xa1, 0x42, 0xf1, 0x1c, 0xdc, 0x2e, 0xb8, 0x5d,
		0x70, 0xbb, 0xaa, 0xea, 0x76, 0xa1, 0x78, 0x0e, 0x5e, 0x57, 0xe9, 0xbd, 0x2e, 0x94, 0xd2, 0x95,
		0x40, 0x46, 0x4a, 0x29, 0x1b, 0x28, 0xac, 0xdb, 0x96, 0xc2, 0xba, 0xd5, 0x3b, 0x5d, 0xea, 0x32,
		0xbb, 0x2f, 0xa3, 0x47, 0x44, 0xb1, 0x5d, 0x35, 0x44, 0xab, 0xcc, 0x35, 0x77, 0xae, 0xa7, 0x44,
		0x57, 0xfb, 0x0f, 0x84, 0x17, 0xbc, 0x2d, 0x0f, 0x89, 0x6a, 0x3b, 0x54, 0xdb, 0x15, 0xec, 0xa6,
		0x55, 0xae, 0xda, 0x8e, 0xb2, 0xc2, 0x8e, 0xa8, 0xaa, 0xae, 0x8e, 0xaa, 0xba, 0x82, 0xf8, 0x1a,
		0x54, 0xd5, 0x95, 0xc4, 0xe0, 0x25, 0xe3, 0x47, 0x98, 0x6f, 0x5d, 0xa2, 0xbc, 0x6d, 0x89, 0xfc,
		0x96, 0x25, 0xdc, 0xae, 0x84, 0xdb, 0x95, 0x70, 0xbb, 0x52, 0x49, 0x6f, 0x57, 0xba, 0x82, 0x57,
		0x59, 0x3e, 0xaf, 0x72, 0xd9, 0xa5, 0xaa, 0x92, 0x4b, 0x49, 0xd6, 0xca, 0x65, 0xed, 0xc8, 0x70,
		0x30, 0xe1, 0x60, 0xc2, 0xc1, 0x4c, 0xe7, 0x60, 0x72, 0x74, 0x72, 0x21, 0x6d, 0xe2, 0x02, 0x77,
		0x13, 0xee, 0x26, 0xdc, 0x4d, 0x62, 0x77, 0x93, 0xac, 0xa3, 0x02, 0x61, 0x27, 0x05, 0xe2, 0x0e,
		0x0a, 0x84, 0x91, 0x47, 0x8e, 0x8e, 0x09, 0x5c, 0x9d, 0x12, 0xd8, 0x4b, 0xe8, 0xf9, 0x4a, 0xe7,
		0x29, 0x93, 0x87, 0x39, 0x3a, 0x21, 0x70, 0x76, 0x40, 0xa8, 0xf2, 0xb6, 0x95, 0x24, 0x06, 0x0e,
		0x97, 0xb5, 0x0a, 0x2e, 0x6b, 0x05, 0x82, 0xa1, 0x32, 0xb0, 0x15, 0x41, 0x00, 0x74, 0x34, 0x0c,
		0x7c, 0x52, 0xf8, 0xa4, 0xf0, 0x49, 0xcd, 0x1d, 0x3f, 0xd2, 0x63, 0x08, 0x5f, 0x14, 0xbe, 0x28,
		0x7c, 0x51, 0x66, 0x5f, 0x94, 0x2a, 0x05, 0x9c, 0x28, 0xd5, 0x1b, 0x86, 0x20, 0x8b, 0x21, 0x38,
		0x82, 0x61, 0x53, 0x56, 0xdf, 0x0e, 0xe3, 0x0e, 0xe4, 0x5d, 0x79, 0x43, 0x2b, 0x9e, 0x6e, 0xad,
		0x37, 0x5f, 0xb1, 0x14, 0xab, 0x95, 0xc0, 0x5e, 0x18, 0xf8, 0x5e, 0xd7, 0x13, 0x51, 0xea, 0xb5,
		0x5a, 0x50, 0x4c, 0xd3, 0x51, 0x52, 0xee, 0x55, 0xb6, 0x4e, 0xe0, 0x99, 0x15, 0x75, 0x1e, 0xc5,
		0x4c, 0xa3, 0x88, 0xf3, 0x2a, 0x5e, 0x32, 0x45, 0x4b, 0xa6, 0x58, 0xc9, 0x14, 0x29, 0x2f, 0x2a,
		0x64, 0xb5, 0x7b, 0x6b, 0xe2, 0x47, 0x18, 0x28, 0x3d, 0x92, 0xf0, 0x87, 0xfc, 0x6e, 0xe7, 0xe2,
		0x70, 0xf9, 0xdc, 0xcf, 0x3a, 0xdc, 0x4f, 0xb8, 0x9f, 0xd5, 0x72, 0x3f, 0x73, 0xdb, 0xa7, 0x74,
		0x1d, 0x61, 0x72, 0x76, 0x7c, 0x31, 0x43, 0x76, 0x79, 0x03, 0x52, 0xf4, 0x59, 0x1c, 0x0e, 0xe8,
		0x03, 0xf4, 0x01, 0xfa, 0xbc, 0x16, 0xf4, 0x61, 0x35, 0xaf, 0xc4, 0x0f, 0xad, 0x1c, 0x7b, 0x28,
		0x23, 0xed, 0xdc, 0xf8, 0xd9, 0xd6, 0xb8, 0xa6, 0x44, 0x4f, 0x28, 0x21, 0xbb, 0xd9, 0x83, 0xcc,
		0x04, 0x1b, 0xfb, 0xc7, 0x87, 0xdf, 0xac, 0xd6, 0x61, 0xa7, 0x75, 0x6a, 0xbd, 0xfd, 0xd7, 0xc5,
		0xc1, 0xa7, 0x8b, 0xf3, 0x2f, 0xd6, 0xc7, 0x0b, 0xeb, 0x9b, 0xa7, 0xf4, 0xd0, 0xf1, 0xad, 0x0b,
		0xe5, 0xdd, 0x39, 0x5a, 0x58, 0x9f, 0x85, 0xbe, 0x0f, 0xd4, 0x5f, 0x91, 0xb5, 0xfb, 0xed, 0xe2,
		0x73, 0xb4, 0xf7, 0x5d, 0x26, 0x1f, 0xeb, 0xc4, 0x1f, 0xfb, 0xa0, 0x9c, 0x81, 0x88, 0x7f, 0x69,
		0xf5, 0x02, 0x65, 0x9d, 0x3b, 0x0f, 0x42, 0x59, 0xcd, 0xb5, 0x03, 0x7c, 0x97, 0xb3, 0x67, 0xd8,
		0x3d, 0x6f, 0x26, 0xa3, 0x95, 0x0c, 0x89, 0x66, 0xdb, 0x52, 0x66, 0x30, 0x2a, 0xc3, 0xbe, 0x99,
		0x46, 0xc1, 0xd4, 0x9f, 0xba, 0x7a, 0xbd, 0xc4, 0x4b, 0x0e, 0x96, 0xc2, 0x62, 0x2a, 0x13, 0xfe,
		0x16, 0xca, 0x8b, 0xc9, 0x13, 0x95, 0x84, 0x0d, 0xd2, 0x8e, 0xea, 0x0b, 0x9d, 0x8f, 0x0b, 0x1a,
		0x8f, 0x01, 0x26, 0x08, 0x4c, 0xd0, 0x76, 0x31, 0x41, 0x1e, 0x41, 0xd6, 0x81, 0xe7, 0xc2, 0xeb,
		0x82, 0xd7, 0x05, 0xaf, 0x2b, 0x9b, 0xdc, 0x0c, 0x3d, 0xa9, 0x8f, 0x09, 0x9c, 0xae, 0x1c, 0xd9,
		0x81, 0x44, 0x69, 0xb0, 0x04, 0x01, 0x5a, 0xca, 0xb4, 0x57, 0xea, 0x74, 0x57, 0xb6, 0x7c, 0x49,
		0xfa, 0x3c, 0x49, 0x8a, 0x9b, 0x8e, 0x28, 0xd3, 0x59, 0xa7, 0x5b, 0xd1, 0x6c, 0xb7, 0x5f, 0xdf,
		0x66, 0x14, 0x94, 0x1b, 0x70, 0x55, 0x62, 0x0a, 0x78, 0x54, 0x7b, 0x3e, 0xb2, 0xaa, 0x6d, 0x9d,
		0x07, 0x4b, 0x9f, 0x94, 0xb3, 0xcf, 0x0f, 0x09, 0xa3, 0x04, 0x46, 0xc9, 0xab, 0x32, 0x4a, 0x3e,
		0x39, 0xd2, 0x75, 0x74, 0xa0, 0x1e, 0xb2, 0x5f, 0x44, 0x4e, 0x68, 0xd8, 0x50, 0x1d, 0xc8, 0x05,
		0x57, 0x3a, 0x47, 0x7b, 0xf3, 0xda, 0x7b, 0x39, 0x1c, 0xe4, 0x17, 0xe2, 0xaf, 0xc1, 0x97, 0x11,
		0x4f, 0x4e, 0x92, 0x91, 0x56, 0x9f, 0x45, 0xb0, 0x28, 0xf2, 0xd1, 0x1a, 0xb3, 0x70, 0x3c, 0xc5,
		0x70, 0xcd, 0x78, 0xb8, 0x9b, 0x40, 0xdf, 0xd6, 0x8a, 0x4d, 0x00, 0x0c, 0x3e, 0x4a, 0x4d, 0xb3,
		0xde, 0xc9, 0xcb, 0x90, 0x5c, 0x9d, 0x3d, 0x59, 0xe6, 0xdc, 0x77, 0xfe, 0x5b, 0xb3, 0x98, 0x68,
		0xac, 0x35, 0xaa, 0x95, 0x49, 0x68, 0xdc, 0x5a, 0x88, 0x68, 0x2d, 0x85, 0x28, 0xa7, 0x95, 0xd0,
		0x80, 0x95, 0x00, 0x2b, 0xe1, 0xb5, 0x55, 0xf0, 0xcf, 0x9d, 0x1f, 0xc2, 0x22, 0xfe, 0xf9, 0x51,
		0x51, 0x3b, 0x61, 0xe6, 0xd0, 0x52, 0x1f, 0x5e, 0xb6, 0x43, 0xcc, 0x76, 0x98, 0xd9, 0x0e, 0x35,
		0x91, 0xfb, 0x5f, 0xd2, 0xb6, 0x71, 0x24, 0xe7, 0xd4, 0x42, 0xbf, 0x38, 0xf4, 0x8b, 0x43, 0xbf,
		0x38, 0xf4, 0x8b, 0x33, 0xc8, 0x6f, 0x16, 0xe6, 0x29, 0xbd, 0xc9, 0x1c, 0x11, 0x27, 0x42, 0xdd,
		0xda, 0xb9, 0x17, 0xe9, 0x33, 0xad, 0x73, 0x5a, 0x7f, 0x9f, 0x3c, 0xf9, 0xde, 0x17, 0xb1, 0xa6,
		0xcc, 0xc9, 0xba, 0xd7, 0x3e, 0x39, 0x3f, 0xe6, 0x46, 0x6a, 0x1c, 0xb7, 0x5a, 0x9d, 0xa3, 0x56,
		0xab, 0x7e, 0x74, 0x78, 0x54, 0x3f, 0x69, 0xb7, 0x1b, 0x9d, 0x46, 0x9e, 0x90, 0xd6, 0xef, 0xca,
		0x15, 0x4a, 0xb8, 0x6f, 0xe3, 0xd5, 0x93, 0x43, 0xdf, 0xa7, 0x18, 0xea, 0xcf, 0x48, 0xa8, 0x5c,
		0x61, 0x81, 0xad, 0x2e, 0xbc, 0x9b, 0xe5, 0xc9, 0x1c, 0x50, 0x78, 0xd8, 0x16, 0x5f, 0x86, 0xd2,
		0xd7, 0xe4, 0xc1, 0xae, 0xff, 0x88, 0x9f, 0xf2, 0xeb, 0xf8, 0x21, 0xb7, 0x22, 0x63, 0x75, 0x0c,
		0x16, 0xa9, 0x13, 0x32, 0xf2, 0x41, 0x43, 0x7e, 0x48, 0x60, 0x81, 0x02, 0x02, 0x08, 0x20, 0x38,
		0xfa, 0x48, 0x3a, 0x46, 0xd2, 0x31, 0x92, 0x8e, 0x91, 0x74, 0x6c, 0x50, 0xdd, 0x9b, 0x52, 0xf3,
		0xe5, 0x49, 0x39, 0x1e, 0x29, 0x71, 0xb6, 0x84, 0xe3, 0x1d, 0xc2, 0x4d, 0xce, 0xba, 0xb9, 0xac,
		0x9b, 0x9a, 0x62, 0x27, 0x19, 0x76, 0x70, 0xb3, 0x7d, 0x7b, 0x79, 0x17, 0x36, 0xd8, 0x81, 0x9a,
		0x2b, 0xa2, 0xae, 0xf2, 0xc2, 0x54, 0xcb, 0x3f, 0xeb, 0x02, 0x3d, 0xf7, 0xe1, 0x0d, 0x77, 0x3b,
		0x1d, 0x13, 0x9d, 0x9a, 0x71, 0xce, 0xc2, 0x2c, 0xcf, 0xf2, 0x76, 0x17, 0x44, 0x28, 0x8d, 0x0c,
		0x64, 0x54, 0x8e, 0xb9, 0x59, 0xe1, 0xdc, 0x9a, 0x6f, 0x41, 0xd3, 0x3d, 0x79, 0xff, 0x82, 0xf0,
		0x20, 0x35, 0x43, 0x9b, 0xbd, 0x5e, 0x2f, 0x65, 0x7d, 0x1e, 0xcd, 0x89, 0x93, 0xc2, 0x4e, 0x91,
		0x64, 0x3e, 0xeb, 0xa1, 0x95, 0x7c, 0x0c, 0xa7, 0x0c, 0xa7, 0x0c, 0xa7, 0x6c, 0x83, 0x53, 0xa6,
		0x82, 0x14, 0xce, 0xe2, 0x5c, 0x2c, 0xc7, 0xdf, 0xd4, 0x19, 0xa9, 0xbd, 0x13, 0x3d, 0x67, 0xe8,
		0xeb, 0x54, 0x2e, 0xe5, 0x5c, 0x20, 0xed, 0xd4, 0x91, 0x0f, 0xb6, 0x0e, 0xec, 0xf8, 0x3f, 0xc9,
		0xb4, 0x1b, 0x0d, 0x72, 0x05, 0x00, 0x00, 0x00, 0x14, 0x0c, 0x00, 0x9e, 0x2b, 0xa4, 0xf6, 0xf4,
		0x83, 0x12, 0xbd, 0x2c, 0x28, 0x90, 0x82, 0xb9, 0xaa, 0x7d, 0x1c, 0x4f, 0xf5, 0xd6, 0x89, 0x44,
		0xf6, 0x82, 0xc5, 0x14, 0xa7, 0x7a, 0xfa, 0xd9, 0x24, 0x41, 0x3f, 0xca, 0xc4, 0x17, 0xe5, 0xcc,
		0xc6, 0xca, 0x84, 0x0b, 0x39, 0x49, 0xf5, 0x9c, 0x8f, 0xdc, 0x1d, 0x46, 0x3a, 0x18, 0x54, 0xe6,
		0x71, 0x6f, 0x87, 0x37, 0x95, 0x79, 0xd6, 0x28, 0x0c, 0xfe, 0x12, 0x59, 0x9f, 0x76, 0x87, 0x87,
		0xc2, 0x79, 0x34, 0xaa, 0xc7, 0x87, 0x5a, 0xa8, 0x4c, 0x16, 0xf3, 0xec, 0xa3, 0x50, 0x9a, 0x50,
		0x9a, 0x05, 0x2b, 0xcd, 0xb4, 0xc2, 0x68, 0x65, 0x4c, 0x05, 0xca, 0x9c, 0xf2, 0x53, 0x5b, 0x9b,
		0xb9, 0x32, 0x4e, 0x3c, 0x49, 0x9f, 0xbb, 0xb2, 0xfe, 0x83, 0x9b, 0xef, 0xdf, 0x95, 0x41, 0xac,
		0x89, 0xbc, 0xbe, 0x74, 0x7c, 0x4f, 0xf6, 0xed, 0x20, 0x23, 0x21, 0xb6, 0x34, 0x42, 0x3a, 0xe4,
		0x69, 0x00, 0x79, 0x80, 0x3c, 0x6b, 0xbc, 0xcd, 0x94, 0x49, 0xca, 0x35, 0xc7, 0xbd, 0x13, 0x4a,
		0x7b, 0x91, 0xb0, 0x07, 0x7a, 0x98, 0xdd, 0x76, 0x5e, 0x1c, 0x26, 0x5b, 0xbf, 0x8f, 0x7a, 0x95,
		0xfa, 0x7d, 0x64, 0x16, 0xf7, 0xbc, 0x62, 0x4f, 0x26, 0xfe, 0x64, 0xc7, 0x80, 0xf4, 0x38, 0x64,
		0x33, 0x4a, 0xd3, 0x46, 0x0a, 0x33, 0xa7, 0xf7, 0x4e, 0xf7, 0xff, 0x26, 0x08, 0x7c, 0xe1, 0x64,
		0x6a, 0xf6, 0x32, 0x41, 0xf1, 0x06, 0x12, 0x22, 0x36, 0x59, 0xe9, 0x71, 0x84, 0xfc, 0xe8, 0xf4,
		0xa5, 0x98, 0xf8, 0x38, 0x0e, 0xbe, 0x37, 0x1f, 0x1a, 0x7f, 0xff, 0x43, 0x0b, 0x19, 0x79, 0x81,
		0x8c, 0x16, 0xa2, 0xea, 0x5f, 0x87, 0x52, 0x8a, 0x58, 0x01, 0xcf, 0xff, 0xed, 0x85, 0x0a, 0x74,
		0xd0, 0x0d, 0xfc, 0x78, 0x9c, 0xaf, 0x17, 0x7b, 0x6f, 0xac, 0x2f, 0x22, 0x29, 0x95, 0xb7, 0x5a,
		0xfb, 0x87, 0x48, 0x89, 0xc8, 0x80, 0x01, 0xe5, 0xd8, 0xb9, 0x6d, 0x4b, 0x8a, 0x60, 0x69, 0xf8,
		0x35, 0xd0, 0x43, 0xdb, 0xf1, 0xfd, 0xe0, 0xde, 0x1e, 0x78, 0xd1, 0xc0, 0xd1, 0xdd, 0xdb, 0xec,
		0xb6, 0xc0, 0x8a, 0xb1, 0x60, 0x10, 0xc0, 0x20, 0x80, 0x41, 0x00, 0x83, 0x00, 0x06, 0x01, 0x0c,
		0x02, 0x18, 0x04, 0x55, 0x30, 0x08, 0x32, 0x93, 0x5c, 0x54, 0x64, 0xd7, 0x53, 0x74, 0x6c, 0xc3,
		0x18, 0x80, 0x31, 0x60, 0xc6, 0x18, 0xc8, 0xdc, 0x15, 0xf4, 0xa6, 0x1f, 0xe6, 0x6f, 0xb3, 0x11,
		0x0f, 0x82, 0xab, 0x48, 0xf3, 0x1f, 0x21, 0x4e, 0x75, 0x5b, 0x81, 0x06, 0x1b, 0x79, 0x8f, 0x58,
		0x4e, 0xa5, 0x57, 0x54, 0x93, 0x8d, 0x9b, 0x7e, 0x98, 0xaf, 0x31, 0xde, 0xaa, 0xf3, 0x98, 0xb7,
		0x0d, 0x97, 0x45, 0xd3, 0x6f, 0xd4, 0x2a, 0x7d, 0x73, 0x0d, 0xb2, 0x43, 0x4b, 0x7d, 0x78, 0xd9,
		0x0e, 0x31, 0xdb, 0x61, 0x66, 0x3d, 0xd4, 0xf9, 0x0e, 0x77, 0xce, 0x43, 0x4e, 0x76, 0xd8, 0x67,
		0xae, 0x6d, 0xbc, 0x20, 0x79, 0x94, 0xef, 0x5a, 0x81, 0x9e, 0x8e, 0x4c, 0xb4, 0x99, 0xf9, 0x34,
		0x34, 0x1b, 0x18, 0x70, 0x80, 0x02, 0x3f, 0x38, 0x70, 0x81, 0x04, 0x3b, 0x58, 0xb0, 0x83, 0x86,
		0x11, 0xf0, 0xa0, 0x01, 0x11, 0x22, 0x30, 0x21, 0x07, 0x95, 0x45, 0x70, 0xc9, 0x7c, 0x35, 0x6a,
		0x3a, 0xa4, 0xc9, 0x71, 0x2b, 0xc9, 0x46, 0x0c, 0x23, 0xf1, 0xb0, 0xd4, 0xf0, 0xc3, 0x09, 0x43,
		0xe6, 0xe0, 0x88, 0x1b, 0x96, 0x8c, 0xc1, 0x93, 0x31, 0x98, 0x32, 0x0a, 0x57, 0xb4, 0xb0, 0x45,
		0x0c, 0x5f, 0x6c, 0x30, 0x36, 0x1d, 0xd8, 0x51, 0xa1, 0x1d, 0xaa, 0xe0, 0xc7, 0x03, 0x9f, 0x5c,
		0x4e, 0x93, 0x82, 0xa6, 0x53, 0x31, 0x89, 0x0b, 0x0f, 0xac, 0xb1, 0xc3, 0x9b, 0x09, 0x98, 0x33,
		0x0f, 0x77, 0xa6, 0x60, 0xcf, 0x38, 0xfc, 0x19, 0x87, 0xc1, 0x42, 0xe0, 0x90, 0x07, 0x16, 0x99,
		0xe0, 0x91, 0x1d, 0x26, 0x17, 0xe0, 0x32, 0x1a, 0x86, 0xa1, 0x12, 0x51, 0x94, 0xb7, 0x8f, 0x54,
		0x6a, 0xf0, 0x9c, 0x9f, 0x98, 0x59, 0xd4, 0xb2, 0x94, 0x29, 0x66, 0x9e, 0x2c, 0x69, 0x07, 0x54,
		0x63, 0x9d, 0xe7, 0x8a, 0x79, 0xbd, 0x68, 0x5a, 0xe5, 0x16, 0xae, 0x82, 0x4c, 0xaa, 0xa2, 0xe2,
		0x54, 0x92, 0x69, 0xd5, 0x54, 0x98, 0x8a, 0x2a, 0x4c, 0x55, 0x15, 0xaa, 0xb2, 0x78, 0x55, 0x17,
		0xb3, 0x0a, 0x9b, 0xae, 0x1c, 0x59, 0xcb, 0xe1, 0x8d, 0xcf, 0x5f, 0xf6, 0x94, 0xa5, 0xcc, 0x96,
		0x7a, 0xa3, 0xd2, 0x5b, 0x44, 0x90, 0x42, 0x95, 0x7a, 0xce, 0xfc, 0x29, 0x57, 0x69, 0xff, 0x99,
		0xc1, 0x46, 0xeb, 0x69, 0x4a, 0xd7, 0x51, 0xeb, 0xb0, 0x99, 0x34, 0x4f, 0xb3, 0x3e, 0x5d, 0x9c,
		0x7f, 0xb1, 0xdf, 0x3a, 0x91, 0x70, 0xad, 0xf7, 0xfa, 0x56, 0x28, 0x29, 0xb4, 0xf5, 0xed, 0xe2,
		0xb3, 0x21, 0xec, 0x2c, 0x42, 0x51, 0xac, 0x52, 0x18, 0x54, 0x29, 0x5d, 0x95, 0xd1, 0x1d, 0x2b,
		0x75, 0xc8, 0x66, 0x92, 0x61, 0xec, 0xf9, 0x1e, 0x77, 0xb6, 0x63, 0x96, 0xab, 0x9d, 0x6a, 0x3e,
		0x3f, 0x23, 0xc2, 0xd7, 0xdc, 0x61, 0xe8, 0x7b, 0x5d, 0x47, 0x0b, 0xdb, 0x0b, 0x6d, 0x57, 0xe8,
		0x51, 0xca, 0xa0, 0xed, 0x49, 0x2d, 0xd4, 0x9d, 0xe3, 0x9b, 0x73, 0xfd, 0x5e, 0x7a, 0x10, 0xb8,
		0x36, 0x70, 0x6d, 0xe0, 0xda, 0xc0, 0xb5, 0x81, 0x6b, 0xb3, 0xf6, 0xfc, 0x0d, 0x3d, 0xa9, 0x1b,
		0x1d, 0x83, 0x9e, 0x4d, 0xc7, 0xc0, 0x54, 0x34, 0xd7, 0x4d, 0x97, 0xd0, 0x0d, 0xa0, 0xbc, 0xbe,
		0x7a, 0xe3, 0x49, 0x89, 0xaf, 0xb9, 0xde, 0x78, 0x5e, 0xae, 0x1b, 0x98, 0x37, 0x3f, 0x23, 0xd4,
		0x37, 0x35, 0x97, 0x04, 0x66, 0x16, 0x45, 0xca, 0xf9, 0x51, 0x9c, 0x48, 0x75, 0xda, 0xed, 0xc3,
		0x36, 0xc4, 0x0a, 0x3e, 0x19, 0x7c, 0xb2, 0x9c, 0x42, 0x25, 0xa4, 0x11, 0xa6, 0x6d, 0x96, 0x85,
		0x35, 0x9a, 0x0f, 0xc1, 0xb6, 0x74, 0x92, 0x0b, 0x8f, 0x14, 0x1e, 0x29, 0x3c, 0x52, 0x78, 0xa4,
		0xf0, 0x48, 0xd7, 0x9e, 0x3f, 0x04, 0xdb, 0xd2, 0xaa, 0x7e, 0x04, 0xdb, 0x78, 0x24, 0x71, 0xa3,
		0x90, 0xca, 0x9b, 0xf9, 0x72, 0xfa, 0x49, 0xf5, 0x7c, 0xa3, 0x8e, 0x18, 0x9c, 0xb5, 0xd5, 0x2a,
		0x65, 0xa5, 0x6a, 0xc9, 0x25, 0x30, 0x70, 0x03, 0xe1, 0x06, 0xe6, 0x96, 0x46, 0x2f, 0xb4, 0x07,
		0xc1, 0x8d, 0xe7, 0x7b, 0xfa, 0xc1, 0xd6, 0xb7, 0x4a, 0x44, 0xb7, 0x81, 0xef, 0x9a, 0xf3, 0x0a,
		0x57, 0x4f, 0x0f, 0xa7, 0x07, 0x4e, 0x0f, 0x9c, 0x1e, 0x38, 0x3d, 0x70, 0x7a, 0xd6, 0x9e, 0x3f,
		0x84, 0xe1, 0xaa, 0xe4, 0x20, 0x20, 0x0c, 0x67, 0xf2, 0x01, 0x10, 0x86, 0xe3, 0x16, 0x29, 0x84,
		0xe1, 0x10, 0x86, 0x7b, 0x45, 0xfe, 0x57, 0xa5, 0x0a, 0xf7, 0x72, 0xde, 0xd5, 0xbc, 0xf1, 0x3c,
		0x74, 0xd7, 0xff, 0x3e, 0xed, 0x63, 0xb8, 0xfc, 0x83, 0x9b, 0x7e, 0x78, 0x30, 0xe9, 0x16, 0x75,
		0x30, 0xe9, 0x1c, 0x73, 0xb0, 0xd0, 0xd8, 0xe1, 0x80, 0xbb, 0x26, 0xda, 0xa2, 0xb9, 0x6b, 0xf8,
		0xcb, 0xe4, 0xdd, 0x7e, 0x4f, 0x5e, 0xed, 0xfa, 0xfd, 0x5d, 0x28, 0x2f, 0xc6, 0xef, 0x70, 0x7d,
		0xa6, 0xc2, 0x8b, 0xe4, 0x15, 0x76, 0xaa, 0x21, 0xc7, 0x0c, 0x32, 0x5c, 0xbb, 0x19, 0x0e, 0xec,
		0x81, 0x23, 0x9d, 0xbe, 0x18, 0xfb, 0x22, 0xcc, 0xb5, 0xf4, 0x4f, 0xe6, 0x43, 0x41, 0x7d, 0x51,
		0x1c, 0x03, 0x0a, 0xea, 0xab, 0xcb, 0x21, 0xa0, 0xa0, 0xfe, 0xc5, 0x15, 0x62, 0x2f, 0xa8, 0x77,
		0xbd, 0xa8, 0xeb, 0x28, 0xd7, 0xbe, 0x51, 0x81, 0xe3, 0x76, 0x9d, 0x48, 0x1b, 0xac, 0xab, 0x58,
		0x9a, 0x1a, 0x14, 0x6e, 0xd9, 0xe0, 0xb5, 0x38, 0x98, 0x35, 0x0d, 0xb7, 0x85, 0xc1, 0x6e, 0x61,
		0xf0, 0x5b, 0x28, 0x0c, 0x9b, 0x71, 0x20, 0x91, 0xb7, 0x42, 0x60, 0x7d, 0x36, 0x10, 0x01, 0x5d,
		0xab, 0x36, 0x87, 0xf2, 0x2f, 0x19, 0xdc, 0x4b, 0x7b, 0x30, 0xf4, 0xb5, 0x57, 0x8c, 0xfa, 0x5c,
		0x7e, 0x04, 0xa8, 0x51, 0xa8, 0x51, 0xa8, 0x51, 0xa8, 0x51, 0xa8, 0x51, 0xa8, 0xd1, 0x6a, 0xa9,
		0xd1, 0xa1, 0x2c, 0x58, 0x89, 0x4e, 0x1e, 0x00, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x14, 0x2a, 0x14,
		0x2a, 0x14, 0x2a, 0xb4, 0xac, 0x23, 0x23, 0x16, 0x4c, 0x1b, 0x0b, 0x36, 0x12, 0xd3, 0xb3, 0x0c,
		0x04, 0x84, 0xdf, 0x0e, 0x07, 0x9f, 0x66, 0xef, 0xf1, 0x8a, 0xa3, 0xc2, 0x3d, 0x3f, 0x08, 0x96,
		0x6c, 0x3b, 0x3b, 0x1a, 0xb2, 0xb7, 0x0f, 0x9e, 0x82, 0xe4, 0x8b, 0x4f, 0xc0, 0x15, 0x37, 0x32,
		0x50, 0xd2, 0xcc, 0x59, 0xca, 0x7c, 0xc5, 0x1b, 0x51, 0xaf, 0x23, 0xa2, 0x5e, 0x22, 0x03, 0x1b,
		0x11, 0xf5, 0x4a, 0x1b, 0xd0, 0xd5, 0xb2, 0x6e, 0xd8, 0x0d, 0x65, 0x83, 0x06, 0x32, 0xb3, 0x61,
		0x5c, 0x0d, 0x25, 0xef, 0xc9, 0x7e, 0xac, 0x4c, 0x6d, 0x25, 0x46, 0x6d, 0x1a, 0x8d, 0xe8, 0xf5,
		0x55, 0x93, 0x42, 0x65, 0x41, 0x65, 0x41, 0x65, 0x41, 0x65, 0x41, 0x65, 0x15, 0xa8, 0xb2, 0x98,
		0xb6, 0xc0, 0x60, 0xf7, 0x0b, 0x83, 0x5d, 0x2f, 0x0c, 0xb2, 0x85, 0xd9, 0x9b, 0x16, 0x1c, 0xef,
		0x1f, 0xee, 0x37, 0xf6, 0x1b, 0x5b, 0x4e, 0xf0, 0x9b, 0x6e, 0x6d, 0x51, 0x0e, 0x8e, 0x3f, 0xbf,
		0x54, 0x54, 0x3d, 0x2c, 0xc0, 0x36, 0xfa, 0xd5, 0x2b, 0x76, 0x09, 0x06, 0x4e, 0xd7, 0xf6, 0x85,
		0xa3, 0xa4, 0x27, 0xfb, 0xf6, 0x20, 0x70, 0x05, 0xbf, 0x43, 0xb0, 0x3c, 0x25, 0xdc, 0x01, 0xb8,
		0x03, 0x70, 0x07, 0xe0, 0x0e, 0x54, 0xd8, 0x1d, 0xf0, 0x5c, 0x21, 0xb5, 0xa7, 0x1f, 0x94, 0xe8,
		0x99, 0x70, 0x09, 0x18, 0x8b, 0xc3, 0x6b, 0x1f, 0xc7, 0xaf, 0x12, 0x9b, 0x17, 0xe6, 0xd2, 0x8b,
		0x4c, 0x69, 0x85, 0xe9, 0xc4, 0x49, 0xad, 0x7d, 0x64, 0xa4, 0x1b, 0x86, 0x21, 0x1b, 0x79, 0xb2,
		0x94, 0xdd, 0x40, 0x6a, 0x15, 0xf8, 0x76, 0xe8, 0x3b, 0x52, 0x18, 0x30, 0xfb, 0xde, 0x6c, 0xdb,
		0x02, 0xba, 0x8e, 0x76, 0x8c, 0xad, 0x1e, 0x6f, 0x7f, 0xe3, 0xaa, 0x29, 0x82, 0x4a, 0x18, 0xcd,
		0xd2, 0x35, 0x75, 0x11, 0xf9, 0x74, 0x26, 0x94, 0x4d, 0xc3, 0x44, 0x86, 0x89, 0x0c, 0x13, 0x99,
		0x7c, 0x85, 0xf8, 0xcb, 0xa6, 0x71, 0x39, 0x9d, 0x85, 0x44, 0xf6, 0x8a, 0x41, 0xb0, 0x69, 0x28,
		0x2e, 0x0c, 0x92, 0x0b, 0x83, 0xe6, 0x42, 0x21, 0xda, 0x8c, 0xf1, 0x8d, 0xae, 0x98, 0xb9, 0xd1,
		0x12, 0x5d, 0x31, 0x73, 0xbc, 0x18, 0xba, 0x62, 0x9a, 0x7c, 0x00, 0x74, 0xc5, 0xe4, 0x16, 0x29,
		0x74, 0xc5, 0x44, 0x57, 0xcc, 0xf4, 0xff, 0x70, 0x2b, 0xc1, 0xb2, 0x50, 0xe1, 0x72, 0xba, 0xdc,
		0x93, 0xe1, 0x72, 0x3a, 0x78, 0xa4, 0xf0, 0x48, 0xe1, 0x91, 0xc2, 0x23, 0x2d, 0xd4, 0x23, 0xc5,
		0xe5, 0x74, 0x69, 0x55, 0x3f, 0x2e, 0xa7, 0xe3, 0x91, 0x44, 0x5c, 0x4e, 0xb7, 0xb1, 0x1e, 0xc1,
		0xe5, 0x74, 0xb8, 0x9c, 0x0e, 0x6e, 0x60, 0xf1, 0x6e, 0x20, 0x2e, 0xa7, 0x83, 0xd3, 0x03, 0xa7,
		0x07, 0x4e, 0x0f, 0x9c, 0x9e, 0x6a, 0x39, 0x3d, 0x08, 0xc3, 0x55, 0xc9, 0x41, 0x40, 0x18, 0xce,
		0xe4, 0x03, 0x20, 0x0c, 0xc7, 0x2d, 0x52, 0x08, 0xc3, 0x21, 0x0c, 0x07, 0xff, 0x8b, 0x42, 0xa8,
		0xa4, 0x6b, 0x47, 0xc3, 0x90, 0xbd, 0xc5, 0xda, 0x92, 0xfd, 0xf0, 0x64, 0x5e, 0x84, 0xe5, 0xd2,
		0x49, 0x32, 0x3c, 0x54, 0x78, 0xa8, 0xf0, 0x50, 0xe1, 0xa1, 0xc2, 0x43, 0x5d, 0x7b, 0xfe, 0xd0,
		0xf1, 0xb8, 0xe0, 0x91, 0xd1, 0xf1, 0x98, 0xb6, 0xe3, 0x31, 0x73, 0x21, 0x9e, 0x65, 0xa0, 0xd7,
		0xf1, 0x67, 0xf7, 0xd5, 0xdf, 0x7d, 0x1b, 0x36, 0x07, 0xa1, 0xd9, 0xee, 0x87, 0x4b, 0x33, 0xa2,
		0xd7, 0x49, 0x51, 0x46, 0x22, 0x0a, 0x39, 0xab, 0x6b, 0x04, 0xa2, 0x90, 0xb3, 0x78, 0x23, 0x0f,
		0xad, 0x0f, 0x5f, 0x7a, 0x6a, 0xb4, 0x3e, 0xcc, 0x29, 0x59, 0x79, 0x9b, 0xdc, 0x35, 0xd1, 0xfa,
		0x70, 0x0b, 0x9d, 0xfd, 0xfc, 0x52, 0x81, 0xd6, 0x87, 0x6b, 0xfe, 0xbd, 0xe6, 0xd6, 0x87, 0xe1,
		0xcd, 0x8d, 0x01, 0xfb, 0xff, 0xe6, 0x06, 0xbd, 0x5b, 0x60, 0xf2, 0xc3, 0xe4, 0x87, 0xc9, 0x4f,
		0xbf, 0x42, 0xec, 0xbd, 0x5b, 0x6e, 0x9c, 0xee, 0x5f, 0x37, 0x81, 0x14, 0x76, 0xa4, 0xba, 0xf6,
		0xc0, 0xe9, 0x9a, 0x0b, 0x51, 0x2e, 0xcd, 0x8c, 0xa0, 0x5b, 0xd9, 0xc0, 0xb5, 0x38, 0x90, 0x2d,
		0x83, 0x29, 0x8e, 0xa0, 0x1b, 0x82, 0x6e, 0xc5, 0xf2, 0x31, 0x4b, 0xe7, 0x6f, 0xe0, 0x74, 0x6d,
		0xc7, 0x75, 0x95, 0x88, 0x22, 0x93, 0x81, 0xb7, 0x63, 0x03, 0x73, 0x5d, 0x38, 0x5a, 0x0b, 0x25,
		0x8d, 0xa5, 0x87, 0xd6, 0x2e, 0xeb, 0xf6, 0x89, 0x63, 0xf7, 0xce, 0xec, 0x0f, 0x57, 0x3f, 0x9b,
		0x8f, 0xbb, 0xa7, 0x8b, 0xdf, 0xef, 0xfd, 0x6c, 0x3f, 0xd6, 0xaa, 0x9e, 0x32, 0x85, 0x42, 0xc3,
		0x4a, 0x90, 0x63, 0xab, 0x49, 0xb2, 0x4e, 0xf3, 0xf0, 0xd4, 0xba, 0x50, 0xc1, 0x9d, 0xe7, 0x0a,
		0x65, 0xbd, 0x1d, 0x5b, 0x4b, 0xd6, 0x5b, 0xe5, 0xb9, 0x7d, 0x4f, 0xf6, 0xe7, 0xc9, 0x90, 0xdf,
		0x82, 0xc1, 0x8d, 0x27, 0x85, 0x6b, 0xdd, 0x7b, 0xfa, 0x76, 0x81, 0x33, 0x99, 0xff, 0xab, 0xdd,
		0x8b, 0xb7, 0x6f, 0xed, 0xf7, 0xdf, 0x2e, 0x3e, 0xef, 0xbd, 0x99, 0xa3, 0x4f, 0x1a, 0xa8, 0x4c,
		0xb4, 0xb6, 0x5a, 0xc1, 0xaf, 0x27, 0xdc, 0x8c, 0x49, 0x18, 0x52, 0x69, 0xcb, 0xa5, 0x17, 0xe0,
		0x5c, 0x5b, 0x08, 0xe6, 0x10, 0xe8, 0xa9, 0x8f, 0xef, 0xdf, 0xbf, 0xb7, 0x8e, 0xeb, 0xcd, 0xfd,
		0x86, 0x73, 0xbb, 0x16, 0x49, 0x04, 0x22, 0x36, 0x5b, 0xe8, 0x29, 0x6e, 0xb8, 0xf5, 0x08, 0xcb,
		0xac, 0x43, 0x78, 0x46, 0x82, 0xfa, 0xfe, 0x56, 0xc8, 0x6d, 0x82, 0x19, 0x57, 0x28, 0xef, 0x4e,
		0xb8, 0x76, 0x4f, 0x05, 0x03, 0x3b, 0x50, 0x76, 0x24, 0xfc, 0xde, 0xee, 0xfe, 0xfe, 0xc1, 0xfe,
		0xfe, 0x28, 0x85, 0x4f, 0x3f, 0x84, 0xe2, 0x8d, 0xf5, 0xb7, 0xf0, 0xe6, 0xc6, 0x8e, 0xbf, 0xff,
		0xdb, 0xde, 0x96, 0x23, 0x4e, 0xb2, 0xbf, 0xaf, 0x09, 0x6c, 0xd2, 0x0b, 0xc0, 0x36, 0x5c, 0x89,
		0x52, 0x7b, 0x27, 0xa2, 0xae, 0xf2, 0x42, 0x6d, 0xa2, 0x72, 0x68, 0xe9, 0xd0, 0xfd, 0x2e, 0xfd,
		0x07, 0xcb, 0x09, 0x43, 0xdf, 0x13, 0x91, 0xd5, 0x0b, 0x94, 0x75, 0xf1, 0xf6, 0xad, 0x15, 0xdb,
		0xf6, 0xfb, 0xa6, 0x44, 0xaf, 0x00, 0x67, 0x71, 0xfe, 0x94, 0xb9, 0x73, 0xab, 0x6f, 0xd0, 0x45,
		0x2e, 0xd2, 0x4d, 0x5c, 0x38, 0x74, 0xcf, 0x08, 0xc0, 0x96, 0x78, 0x59, 0x48, 0xe9, 0x30, 0xe1,
		0x65, 0xbd, 0xd6, 0x7a, 0x02, 0xbe, 0xbc, 0x10, 0xcb, 0x40, 0x29, 0xc1, 0xc5, 0xcd, 0xcd, 0x6b,
		0x2e, 0x23, 0x18, 0x4a, 0x57, 0x28, 0xdf, 0x79, 0xb0, 0x07, 0x43, 0x5f, 0x7b, 0x5d, 0x27, 0xd2,
		0xfc, 0x89, 0x44, 0x2b, 0xe6, 0xe4, 0xca, 0x2a, 0x30, 0x50, 0xaf, 0xcb, 0x59, 0xa7, 0x7b, 0x85,
		0x12, 0x8b, 0x95, 0x13, 0x20, 0xdf, 0x8a, 0xc8, 0xf6, 0x43, 0xbe, 0x55, 0xc9, 0xcd, 0x20, 0x94,
		0x58, 0x6c, 0x0e, 0x67, 0x5c, 0x25, 0x16, 0x95, 0x50, 0xe4, 0x77, 0xe1, 0x7d, 0x64, 0xdf, 0xf9,
		0x8e, 0xb4, 0x9d, 0x7b, 0x47, 0x19, 0xb8, 0xfb, 0xfc, 0xe9, 0x84, 0x50, 0xe1, 0x50, 0xe1, 0x50,
		0xe1, 0x50, 0xe1, 0x50, 0xe1, 0x50, 0xe1, 0xaf, 0x40, 0x85, 0xef, 0x94, 0x58, 0x44, 0xb8, 0xa9,
		0xa8, 0xb2, 0x51, 0x50, 0x0c, 0x82, 0xc9, 0x4c, 0x3b, 0xd1, 0x62, 0x18, 0x9d, 0x30, 0x12, 0x0a,
		0x62, 0x6d, 0x1a, 0xb1, 0x22, 0x97, 0xc1, 0xd9, 0x65, 0x4c, 0xd3, 0x29, 0x88, 0x0f, 0x10, 0x8f,
		0x75, 0xc5, 0x66, 0x55, 0x71, 0x5a, 0x53, 0xe6, 0xac, 0x28, 0x6e, 0xeb, 0xc9, 0x98, 0xd5, 0x64,
		0xcc, 0x5a, 0x32, 0x6a, 0x25, 0x95, 0x5b, 0xe5, 0xb1, 0x59, 0x43, 0x53, 0xf9, 0x8f, 0xb4, 0xf2,
		0x64, 0x9f, 0x43, 0xee, 0xa7, 0xe5, 0x07, 0xaf, 0x40, 0x2b, 0x8c, 0x6d, 0x81, 0xd1, 0x5d, 0xe5,
		0x3d, 0xa7, 0x2b, 0x98, 0x55, 0xc4, 0x9a, 0xf9, 0xa0, 0x2f, 0xa0, 0x2f, 0xa0, 0x2f, 0xa0, 0x2f,
		0x38, 0xe5, 0xdf, 0x15, 0x52, 0x7b, 0xfa, 0x41, 0x89, 0x1e, 0xa7, 0xd2, 0x60, 0xe8, 0x5f, 0x5e,
		0xfb, 0x38, 0x7e, 0xf4, 0xb7, 0x4e, 0x64, 0x80, 0x49, 0x16, 0x73, 0x3e, 0x22, 0x07, 0x3a, 0x4f,
		0x27, 0x4c, 0xda, 0xbe, 0x47, 0xac, 0x54, 0xb2, 0xa1, 0x9a, 0xf2, 0x19, 0xef, 0x6e, 0xdf, 0x0c,
		0xa5, 0xeb, 0x0b, 0x7b, 0x49, 0xcf, 0xd5, 0xaa, 0xd8, 0x47, 0xdc, 0xe4, 0xf2, 0xdd, 0x38, 0x91,
		0x70, 0xb1, 0x6e, 0xe9, 0xd7, 0xcd, 0xbc, 0xc0, 0xf1, 0x44, 0x66, 0xca, 0xae, 0xf1, 0x76, 0xca,
		0x35, 0x12, 0x91, 0xf8, 0x72, 0x91, 0x93, 0xc5, 0x93, 0x92, 0x34, 0x07, 0x20, 0xff, 0x66, 0x11,
		0x6c, 0x54, 0x6d, 0xb4, 0x70, 0xf1, 0x4b, 0x51, 0xed, 0xd1, 0x14, 0x44, 0x66, 0x43, 0x13, 0x09,
		0xd4, 0xd8, 0x12, 0x6a, 0x11, 0x0d, 0x47, 0xed, 0x74, 0x71, 0x38, 0x5b, 0xfc, 0x4e, 0x16, 0x97,
		0x73, 0xc5, 0xee, 0x54, 0xb1, 0x3b, 0x53, 0x46, 0x9c, 0xa8, 0x72, 0x41, 0x36, 0x75, 0x77, 0xa6,
		0x5a, 0x6c, 0x37, 0xb8, 0x7c, 0xa4, 0xcf, 0x68, 0x78, 0x70, 0x3c, 0xe0, 0x78, 0xc0, 0xf1, 0x80,
		0xe3, 0x61, 0x94, 0x7f, 0xb6, 0xeb, 0x2b, 0x19, 0xaf, 0xab, 0x64, 0xbe, 0x9e, 0x92, 0x31, 0x1f,
		0xc5, 0xc4, 0xf5, 0x93, 0xa6, 0xae, 0x9b, 0x34, 0x7e, 0x0f, 0xa0, 0xb9, 0x7b, 0xff, 0x38, 0xef,
		0x99, 0x33, 0x71, 0x5d, 0xa4, 0xc9, 0xeb, 0x21, 0xb7, 0x59, 0x0c, 0x2a, 0x92, 0xca, 0x75, 0x55,
		0x6a, 0x1d, 0x66, 0xa0, 0x77, 0x8b, 0x81, 0x9e, 0x2d, 0x06, 0x92, 0x14, 0xff, 0xf8, 0xf0, 0x9b,
		0xd5, 0xe9, 0x34, 0x5b, 0xa7, 0xd6, 0xb9, 0xf3, 0x20, 0x94, 0xd5, 0xb4, 0xbe, 0x79, 0x4a, 0x0f,
		0x1d, 0xdf, 0xba, 0x50, 0xde, 0x9d, 0xa3, 0x85, 0xf5, 0x59, 0xe8, 0xfb, 0x40, 0xfd, 0x15, 0xcd,
		0x77, 0x72, 0xfa, 0x33, 0xf2, 0x64, 0x3f, 0x69, 0xc6, 0xde, 0x0b, 0x94, 0x75, 0x36, 0xd4, 0x81,
		0xfd, 0xce, 0x8b, 0xba, 0xc1, 0x9d, 0x50, 0x0f, 0x96, 0x23, 0xdd, 0x85, 0x56, 0xec, 0x13, 0x16,
		0x68, 0xcb, 0x32, 0x88, 0x4d, 0x35, 0x76, 0x29, 0x36, 0x89, 0xd8, 0xa4, 0x7c, 0x00, 0x53, 0x5f,
		0x41, 0x26, 0x4b, 0x57, 0xd8, 0x6a, 0x6c, 0x49, 0xf3, 0xd1, 0x18, 0xa3, 0x19, 0xc0, 0x64, 0x80,
		0xc9, 0x00, 0x93, 0x01, 0x26, 0x03, 0x4c, 0x06, 0x98, 0x0c, 0x30, 0x19, 0x60, 0x32, 0xc0, 0x64,
		0x80, 0xc9, 0x00, 0x93, 0x01, 0x26, 0x03, 0x4c, 0x06, 0x98, 0x0c, 0x30, 0x19, 0x60, 0x32, 0x72,
		0x0a, 0x57, 0x78, 0x6f, 0x0b, 0xd9, 0x75, 0xc2, 0x68, 0xe8, 0x27, 0x79, 0x79, 0xcc, 0x25, 0x39,
		0xab, 0xa7, 0x03, 0xc7, 0x01, 0x8e, 0x03, 0x1c, 0x07, 0x38, 0x0e, 0x54, 0xe4, 0xac, 0x1a, 0xdb,
		0x6c, 0x45, 0xce, 0x4d, 0x3f, 0xb4, 0xfd, 0xe6, 0x18, 0xa5, 0x51, 0x92, 0xb3, 0xd1, 0x9a, 0x39,
		0x7a, 0x60, 0x3b, 0x8e, 0xdf, 0x46, 0xfd, 0xc8, 0xf3, 0x6b, 0xd4, 0x15, 0xbe, 0x8f, 0x35, 0x7a,
		0x7e, 0x8d, 0x74, 0x60, 0xdf, 0x75, 0xbb, 0x58, 0xa5, 0x97, 0x57, 0x29, 0xc4, 0x2a, 0x3d, 0xb3,
		0x4a, 0x5d, 0x27, 0xc2, 0xf2, 0x3c, 0xb3, 0x3c, 0x9e, 0xea, 0x0e, 0x3d, 0x6d, 0x8b, 0xc1, 0xd8,
		0x13, 0xc1, 0x62, 0xad, 0x5f, 0x2c, 0xd7, 0xef, 0x7a, 0x58, 0x9f, 0x67, 0xd6, 0x27, 0x6a, 0x60,
		0x79, 0xd6, 0x2f, 0x8f, 0xc0, 0xea, 0x3c, 0xb7, 0x3a, 0x87, 0x58, 0x9d, 0x67, 0x56, 0x27, 0xea,
		0x61, 0x79, 0x9e, 0x59, 0x9e, 0xf1, 0x2d, 0x95, 0xb6, 0x72, 0xee, 0xed, 0x41, 0xe0, 0xa2, 0x84,
		0x7d, 0x93, 0xc5, 0xd2, 0x4e, 0xbf, 0x2f, 0x5c, 0xac, 0xd7, 0x0b, 0xeb, 0xd5, 0x53, 0x76, 0x18,
		0x28, 0x8d, 0x75, 0x7a, 0x71, 0x9d, 0x9c, 0x81, 0xb0, 0x95, 0xf0, 0x9d, 0x07, 0x2c, 0xd3, 0xfa,
		0x65, 0xba, 0x75, 0x7d, 0x78, 0x6c, 0xcf, 0xac, 0x8f, 0xef, 0x3c, 0x08, 0x65, 0x37, 0x6d, 0xad,
		0x1c, 0x19, 0xc5, 0x07, 0x0f, 0x8b, 0xb5, 0x7e, 0xb1, 0xc2, 0x30, 0xc4, 0xf2, 0xac, 0x5f, 0x1e,
		0x58, 0x4d, 0xcf, 0xae, 0x4e, 0xd2, 0xe0, 0x77, 0xa8, 0xc4, 0xf8, 0xfe, 0x02, 0x2c, 0xd5, 0xda,
		0xa5, 0xd2, 0xf0, 0xdd, 0x9e, 0x5b, 0x1d, 0xf8, 0x6e, 0xcf, 0xac, 0xce, 0x5d, 0xe8, 0x47, 0xe8,
		0x0c, 0xf5, 0xf8, 0x0a, 0xb2, 0x48, 0xe2, 0x9d, 0xb6, 0x3d, 0x19, 0x69, 0x47, 0x76, 0x19, 0xb3,
		0x47, 0x16, 0xa7, 0xe1, 0xc9, 0x1a, 0x69, 0x20, 0x6b, 0x04, 0x59, 0x23, 0x19, 0x26, 0x42, 0xd6,
		0x88, 0x69, 0x8d, 0x46, 0xde, 0x9a, 0x68, 0x11, 0xce, 0x84, 0xdb, 0x67, 0xe9, 0x54, 0xb4, 0x1a,
		0xd5, 0x26, 0xb3, 0xe1, 0xca, 0x28, 0xd3, 0x60, 0x67, 0x1e, 0xf4, 0x4c, 0x81, 0x9f, 0x71, 0x10,
		0x34, 0x0e, 0x86, 0x85, 0x80, 0x22, 0xaf, 0x01, 0x5a, 0xfd, 0x2b, 0xa3, 0xd8, 0xca, 0x09, 0x9f,
		0xa2, 0x59, 0x87, 0x71, 0x0a, 0xde, 0xf2, 0x42, 0x33, 0x8e, 0x98, 0x65, 0xaa, 0xdc, 0x70, 0x3a,
		0x99, 0xa1, 0xb2, 0xc3, 0xe9, 0x7c, 0xa6, 0xeb, 0xce, 0x66, 0xb2, 0x6e, 0xaa, 0xfe, 0xcc, 0x00,
		0x1b, 0x30, 0x13, 0x15, 0x03, 0x65, 0x89, 0x4b, 0xa2, 0x62, 0xa0, 0x3c, 0xf1, 0x35, 0x8a, 0xcb,
		0x4e, 0x35, 0x47, 0xbf, 0xaa, 0x94, 0x4e, 0x35, 0x50, 0xd6, 0x38, 0x9d, 0x8b, 0xbf, 0xbc, 0xd1,
		0xa0, 0x52, 0x9a, 0x2f, 0x77, 0x6c, 0x1d, 0x75, 0x1a, 0xa7, 0x4b, 0x65, 0x6c, 0xe7, 0x67, 0x9f,
		0xad, 0xf1, 0xf5, 0x7a, 0xf3, 0xd5, 0x69, 0xbb, 0xdf, 0x2e, 0xce, 0xbf, 0xec, 0xad, 0x2a, 0x68,
		0x9b, 0xff, 0xab, 0x85, 0xe2, 0x36, 0x23, 0x15, 0x8f, 0xa6, 0x4d, 0xfa, 0x55, 0xa6, 0xbd, 0xa9,
		0x0a, 0xc8, 0xc2, 0xac, 0xfc, 0x95, 0xd6, 0xbe, 0x61, 0x11, 0x02, 0x72, 0x9b, 0x45, 0xee, 0x8a,
		0x5c, 0xc0, 0x3e, 0x63, 0x70, 0x98, 0x1a, 0x43, 0x3d, 0xcb, 0x1a, 0xb1, 0xb4, 0x8a, 0x02, 0x77,
		0x04, 0xee, 0x08, 0xdc, 0x11, 0xb8, 0x23, 0x70, 0x47, 0xe0, 0x8e, 0xc0, 0x1d, 0x81, 0x3b, 0x02,
		0x77, 0x04, 0xee, 0x08, 0xdc, 0x11, 0xb8, 0x23, 0x70, 0x47, 0xe0, 0x8e, 0xc0, 0x1d, 0x81, 0x3b,
		0x7a, 0x8d, 0xdc, 0x51, 0xa9, 0xd3, 0xa1, 0x98, 0x2e, 0xd7, 0x9c, 0x8e, 0x5f, 0xd8, 0x25, 0x9b,
		0xd3, 0x5b, 0x23, 0x0f, 0x38, 0x13, 0x40, 0x47, 0xef, 0x98, 0x54, 0x06, 0xc8, 0xb1, 0x8a, 0xf9,
		0xf8, 0xfe, 0xeb, 0x87, 0xf3, 0xe6, 0xb7, 0x50, 0x7e, 0xd6, 0xf7, 0xdf, 0x42, 0x39, 0x06, 0x84,
		0xe8, 0x7a, 0xf6, 0x75, 0xfc, 0xe5, 0xe7, 0xf8, 0xe5, 0x26, 0x5f, 0x5c, 0x4f, 0x8f, 0xfb, 0xef,
		0xc9, 0x9b, 0x5c, 0x7f, 0x0b, 0xfd, 0xe8, 0xe3, 0xe4, 0x89, 0x71, 0x49, 0x6c, 0x71, 0x72, 0x5c,
		0x02, 0xf9, 0x2d, 0xcd, 0x2d, 0xb1, 0x3b, 0x05, 0xee, 0x33, 0xf5, 0xfe, 0x16, 0xb6, 0xaf, 0xf9,
		0x76, 0x33, 0xfb, 0x1e, 0x64, 0xfb, 0x64, 0xc6, 0x5d, 0xa3, 0xf4, 0x53, 0x6a, 0xf7, 0xb7, 0x42,
		0xe6, 0x76, 0x41, 0x08, 0x24, 0x66, 0xda, 0xb7, 0x43, 0x28, 0xef, 0x4e, 0xb8, 0x76, 0x4f, 0x05,
		0x03, 0x3b, 0x50, 0x76, 0x24, 0xfc, 0xde, 0xee, 0xfe, 0xdc, 0xae, 0xc7, 0xdb, 0xfc, 0xc6, 0xfa,
		0x5b, 0x2c, 0x20, 0xdd, 0x60, 0x30, 0x08, 0xe4, 0x69, 0xbc, 0xf9, 0xd3, 0xdf, 0xff, 0x6d, 0x8f,
		0x40, 0x07, 0x51, 0x9b, 0xfd, 0xf3, 0x66, 0x7d, 0xb2, 0xe0, 0x44, 0xb0, 0xcc, 0x65, 0xb1, 0x2f,
		0x58, 0xe4, 0x04, 0x3b, 0x52, 0x8a, 0x3b, 0xb4, 0xdf, 0x89, 0xa8, 0xab, 0xbc, 0x90, 0x54, 0x89,
		0x4d, 0xc5, 0xf6, 0x77, 0xe9, 0x3f, 0x58, 0x4e, 0x18, 0xfa, 0x9e, 0x88, 0xac, 0x78, 0x8b, 0xad,
		0x6f, 0x17, 0x9f, 0xad, 0xe9, 0x1a, 0x58, 0xf1, 0x1a, 0x59, 0x5e, 0x14, 0x3b, 0x28, 0xfb, 0x54,
		0xbb, 0xcf, 0xe0, 0x9b, 0xce, 0x0b, 0xaa, 0x3b, 0xb7, 0x5e, 0x84, 0x75, 0x49, 0x9c, 0x5e, 0xe6,
		0x82, 0xdc, 0xa6, 0xda, 0x92, 0xed, 0xb0, 0x02, 0x76, 0xcc, 0x7a, 0x7b, 0x59, 0xf5, 0x17, 0x91,
		0xb5, 0x61, 0xda, 0xca, 0xc8, 0x26, 0x24, 0xe9, 0x37, 0x25, 0xc3, 0xb2, 0xd6, 0x7c, 0x37, 0x8c,
		0xb1, 0xd9, 0x6f, 0xea, 0x30, 0xf3, 0x9a, 0xce, 0xba, 0x1e, 0xcc, 0x0d, 0x96, 0x71, 0x8b, 0xc7,
		0x21, 0xbd, 0x56, 0xc6, 0x8f, 0xe7, 0x4d, 0x40, 0xa0, 0x48, 0x30, 0xa0, 0x4f, 0x20, 0xa0, 0x42,
		0x6c, 0xf2, 0x04, 0x00, 0x72, 0x50, 0x66, 0x09, 0xe0, 0x9b, 0x35, 0xb2, 0xf3, 0x56, 0xb2, 0x91,
		0x1c, 0x49, 0x86, 0xa3, 0xf9, 0xf4, 0x88, 0xe6, 0x2c, 0xae, 0x25, 0xcb, 0x15, 0xa2, 0xcc, 0x09,
		0xe2, 0xcb, 0xfd, 0xe1, 0xf4, 0x0c, 0x48, 0x73, 0x79, 0xcc, 0xf8, 0x06, 0xd4, 0xb9, 0x39, 0xc5,
		0xb2, 0x20, 0x54, 0xc5, 0xab, 0x35, 0xa7, 0xef, 0xd1, 0xbb, 0x18, 0xf1, 0xa0, 0x44, 0x5b, 0x48,
		0x9b, 0x3e, 0x48, 0x9e, 0x2e, 0xc8, 0x91, 0x1e, 0xc8, 0x9f, 0x0e, 0xc8, 0x15, 0x2b, 0x64, 0x4f,
		0xf7, 0x63, 0x0f, 0xfc, 0x19, 0x49, 0xe7, 0x2b, 0x17, 0x61, 0x4e, 0x9e, 0x9e, 0x37, 0x95, 0x5f,
		0x15, 0x0c, 0xb5, 0xb0, 0x5d, 0x2f, 0xd2, 0x9e, 0xec, 0x0f, 0xbd, 0xe8, 0x56, 0x28, 0x4a, 0x21,
		0x9e, 0x58, 0x05, 0xc7, 0x84, 0x63, 0x5e, 0x38, 0x5a, 0x0b, 0x25, 0xc9, 0x33, 0x1d, 0x6a, 0xbb,
		0xf5, 0xd3, 0xdd, 0x4e, 0xbb, 0x7d, 0x78, 0x59, 0xb7, 0xdb, 0x57, 0xbf, 0x3a, 0xed, 0xf6, 0x65,
		0xdd, 0x6e, 0x5e, 0x5d, 0xd6, 0xed, 0x93, 0xf8, 0xbb, 0xcb, 0xba, 0xdd, 0x1a, 0x7d, 0xf3, 0xb3,
		0xf9, 0xf8, 0xab, 0x33, 0xf7, 0xed, 0xe1, 0xe3, 0xaf, 0xcb, 0x86, 0xdd, 0x1e, 0x7f, 0xd7, 0x4a,
		0xbe, 0x3b, 0x19, 0x7f, 0x57, 0x7f, 0x73, 0xf8, 0xf8, 0xab, 0xbe, 0x77, 0xba, 0xdb, 0x6a, 0x9e,
		0xb4, 0x4e, 0x3a, 0x47, 0xcd, 0x93, 0xd1, 0xe8, 0x93, 0x6f, 0x2f, 0xeb, 0xf6, 0xf1, 0x78, 0x8a,
		0xf1, 0x8f, 0x2e, 0xeb, 0x8d, 0xd9, 0x34, 0xa3, 0x9f, 0x5d, 0xd6, 0xed, 0xce, 0x6c, 0xae, 0xe4,
		0x67, 0xc9, 0x28, 0xd3, 0x09, 0xe3, 0x1f, 0xcd, 0x46, 0xfa, 0xd9, 0x4e, 0x7e, 0x72, 0x59, 0xb7,
		0x0f, 0xc7, 0x3f, 0xe8, 0xc4, 0x3f, 0x98, 0xfb, 0x83, 0xa3, 0xc7, 0x5f, 0xad, 0xd9, 0x3c, 0xc7,
		0xc9, 0x13, 0x4f, 0xfe, 0xf6, 0xe4, 0xc9, 0xf3, 0x1f, 0xc7, 0xcf, 0xbf, 0xf7, 0x6b, 0xb7, 0x71,
		0xba, 0xbb, 0xbb, 0x3b, 0x7a, 0xd2, 0xd9, 0xef, 0x7f, 0x35, 0xa6, 0x8f, 0xda, 0x9c, 0xad, 0xc8,
		0xaf, 0x66, 0x3b, 0x79, 0xbe, 0xbd, 0xef, 0xdf, 0xf7, 0xf7, 0x7e, 0x1e, 0x3e, 0xa6, 0xfd, 0xd8,
		0x1e, 0xdb, 0x3e, 0xec, 0xfd, 0xda, 0x6d, 0x56, 0x7d, 0x2f, 0x38, 0x17, 0xa7, 0xb3, 0x7b, 0x7a,
		0xe9, 0xd8, 0xbd, 0x33, 0xfb, 0xc3, 0x78, 0x8c, 0xbd, 0x9f, 0x9d, 0xc7, 0xbd, 0x5f, 0xbb, 0xbb,
		0x97, 0x87, 0x76, 0xfb, 0xc8, 0x3e, 0x19, 0xfd, 0x6e, 0xb4, 0x95, 0xe3, 0xaf, 0xe3, 0x21, 0xc6,
		0x5f, 0xfe, 0x6c, 0xbc, 0x39, 0x7c, 0xdc, 0x3b, 0x5d, 0xfc, 0x49, 0xa3, 0xf9, 0xb8, 0x47, 0x87,
		0xcb, 0x57, 0xa5, 0xc2, 0x65, 0xc6, 0x14, 0x2f, 0xc6, 0x94, 0x2e, 0xc6, 0x76, 0x42, 0x49, 0xbe,
		0x4d, 0xa7, 0x73, 0xf4, 0xe2, 0xed, 0x75, 0xd6, 0xee, 0x79, 0xf3, 0xdb, 0xc5, 0xe7, 0xbd, 0xf9,
		0xac, 0x9a, 0xf7, 0x3f, 0xb4, 0x90, 0x91, 0x17, 0xc8, 0x28, 0xc9, 0xba, 0x99, 0x8c, 0xf0, 0x75,
		0x28, 0xa5, 0xf0, 0x3d, 0xd9, 0x9f, 0xff, 0xdb, 0x0b, 0x15, 0xe8, 0xa0, 0x1b, 0xf8, 0xf1, 0x38,
		0x5f, 0x2f, 0xf6, 0xde, 0x58, 0x5f, 0x44, 0x92, 0xbc, 0x69, 0xb5, 0xf6, 0x0f, 0xbf, 0xcb, 0x71,
		0xda, 0x4f, 0xf3, 0xd9, 0xb4, 0x9f, 0x71, 0xae, 0xcf, 0xf2, 0x35, 0x7a, 0xe7, 0xce, 0x8d, 0xf0,
		0xad, 0x77, 0x5e, 0xa4, 0x95, 0x77, 0x33, 0x4c, 0x46, 0x9d, 0x9b, 0xee, 0xdd, 0xc5, 0xde, 0xca,
		0xdb, 0xf4, 0x66, 0x8f, 0xd0, 0xd9, 0x6f, 0xec, 0x37, 0x2a, 0xde, 0x4a, 0x89, 0x3b, 0x5d, 0xac,
		0x98, 0x6e, 0x4a, 0x10, 0xcf, 0xa9, 0x78, 0xbe, 0x9a, 0x2e, 0x78, 0x57, 0x65, 0x09, 0xc6, 0x10,
		0xd0, 0x45, 0x94, 0x24, 0x20, 0x23, 0x19, 0xf8, 0xd4, 0xfc, 0x6f, 0x83, 0x19, 0x00, 0x33, 0x00,
		0x66, 0x80, 0xc3, 0x02, 0xa5, 0xee, 0x90, 0x57, 0x23, 0xc5, 0x96, 0x65, 0x8c, 0xa1, 0x03, 0x97,
		0xa7, 0x20, 0xd3, 0x42, 0x5b, 0x4f, 0xb4, 0xf5, 0xac, 0x8a, 0x21, 0x8a, 0xb6, 0x9e, 0x2c, 0xe2,
		0x1f, 0x46, 0x62, 0xe8, 0x06, 0xf7, 0x9e, 0x12, 0x3c, 0xb7, 0x5c, 0x2f, 0x9d, 0xb3, 0xa7, 0x13,
		0xa2, 0x41, 0x83, 0x69, 0xc8, 0x33, 0x0f, 0x7d, 0xa6, 0x20, 0xd0, 0x38, 0x14, 0x1a, 0x87, 0xc4,
		0x42, 0xa0, 0x91, 0x07, 0x22, 0x99, 0xa0, 0x72, 0xba, 0x42, 0xe6, 0x1a, 0x34, 0xf0, 0xde, 0xa3,
		0xfd, 0x14, 0xd2, 0x1a, 0x8c, 0xd5, 0xdd, 0x66, 0xee, 0xd5, 0x5e, 0x5e, 0x40, 0x47, 0x3a, 0x76,
		0x78, 0x9f, 0x28, 0x84, 0x88, 0xfb, 0xa8, 0x1a, 0xb8, 0x62, 0x7b, 0xf2, 0xcf, 0x50, 0xcd, 0xaa,
		0xb9, 0x2b, 0xb7, 0x99, 0xcf, 0x6c, 0x09, 0xd6, 0x8e, 0xf7, 0xa2, 0xe9, 0xed, 0x5e, 0x3f, 0xde,
		0xab, 0xcc, 0xb7, 0x7b, 0xed, 0x02, 0x29, 0x6c, 0x1d, 0x24, 0xff, 0x81, 0x04, 0x92, 0xac, 0x62,
		0x88, 0x55, 0xcc, 0xb8, 0x8a, 0xdc, 0xd7, 0xed, 0x6f, 0xff, 0xea, 0x41, 0xf6, 0xb2, 0xae, 0xde,
		0x5d, 0x68, 0xdf, 0x8d, 0x22, 0x7c, 0xb6, 0x56, 0x43, 0xf9, 0x17, 0xd6, 0x31, 0xfd, 0x3a, 0x76,
		0x45, 0x64, 0x07, 0x77, 0x42, 0xd9, 0x61, 0x24, 0xb1, 0x7e, 0xf9, 0xd6, 0xcf, 0xee, 0x3a, 0x11,
		0xd6, 0x30, 0xc3, 0x1a, 0x7a, 0xaa, 0x3b, 0xf4, 0xb4, 0x2d, 0x06, 0x43, 0x3f, 0xa9, 0x34, 0xb3,
		0x07, 0xac, 0x37, 0xdf, 0xbd, 0xa6, 0x95, 0x0c, 0x9d, 0xee, 0x5f, 0x42, 0x63, 0x2d, 0x33, 0xac,
		0xa5, 0xd2, 0x21, 0xd6, 0x2d, 0xfd, 0xba, 0xb9, 0x7e, 0xd7, 0xc3, 0xba, 0xa5, 0x5f, 0x37, 0xd1,
		0xc0, 0xaa, 0x65, 0x58, 0xb5, 0x43, 0xac, 0x5a, 0x86, 0x55, 0x03, 0xb8, 0x65, 0x5c, 0x38, 0x7d,
		0x2b, 0x94, 0x84, 0x42, 0xcd, 0xb3, 0x76, 0xb6, 0x76, 0xfa, 0x7d, 0xe1, 0xda, 0x83, 0xc0, 0x15,
		0x58, 0xc7, 0xf4, 0xeb, 0xd8, 0xeb, 0xda, 0x61, 0xa0, 0x34, 0xd6, 0x2f, 0xeb, 0xfa, 0x29, 0xac,
		0x5f, 0xbe, 0xf5, 0x73, 0x06, 0xc2, 0x56, 0xc2, 0x77, 0x1e, 0xb0, 0x7c, 0xe9, 0x97, 0xef, 0xd6,
		0xf5, 0xc1, 0xf8, 0x65, 0x58, 0x37, 0x2f, 0xbc, 0xc5, 0xba, 0x65, 0x58, 0x37, 0xdf, 0x79, 0x10,
		0xca, 0x6e, 0xda, 0x5a, 0x39, 0x32, 0x8a, 0x81, 0x0f, 0x8b, 0x98, 0x7e, 0x11, 0xc3, 0x10, 0xe6,
		0x72, 0x86, 0x65, 0x53, 0x01, 0xce, 0x6c, 0x96, 0x75, 0xd3, 0xe0, 0x02, 0xb2, 0xac, 0x1a, 0xb8,
		0x80, 0x2c, 0xab, 0xe6, 0x0e, 0x46, 0x11, 0x0c, 0x2f, 0xb4, 0x1d, 0xc7, 0x87, 0xe4, 0xe5, 0x5f,
		0xc3, 0x26, 0xd6, 0x30, 0xfd, 0x1a, 0xde, 0x7b, 0xbe, 0xdb, 0x75, 0x94, 0x5b, 0xf5, 0x36, 0xff,
		0x57, 0xc8, 0xa9, 0xb5, 0x70, 0x41, 0x0b, 0xc1, 0x81, 0xd8, 0xb8, 0x9c, 0x7a, 0xe1, 0x86, 0x8d,
		0x51, 0x65, 0xf5, 0x9a, 0x72, 0xea, 0xf9, 0xbf, 0x9c, 0x56, 0x56, 0x2f, 0x95, 0x53, 0x2f, 0x54,
		0x38, 0x4f, 0x2b, 0xab, 0x9b, 0xb8, 0xc2, 0x85, 0x76, 0xee, 0xf2, 0x5c, 0xe1, 0x52, 0x26, 0x21,
		0xc3, 0x25, 0x2f, 0x46, 0xf5, 0x4a, 0x35, 0x2e, 0x08, 0x4e, 0xfa, 0x68, 0x29, 0xdb, 0x73, 0xf9,
		0x6b, 0xce, 0x66, 0x53, 0xa1, 0xda, 0x6c, 0xe5, 0x04, 0xa8, 0x36, 0x23, 0x52, 0x38, 0xa8, 0x36,
		0x7b, 0xa5, 0x96, 0xb1, 0xb9, 0x6a, 0x33, 0x6e, 0x30, 0xb3, 0x98, 0xba, 0x10, 0x2e, 0x83, 0x0e,
		0x53, 0x57, 0xc2, 0xa5, 0x89, 0xd6, 0x36, 0xe1, 0x1b, 0xf7, 0xd0, 0x4b, 0xdf, 0x86, 0x6f, 0xfd,
		0x07, 0x6b, 0xb8, 0xca, 0x13, 0x9e, 0x22, 0x3c, 0x45, 0x78, 0x8a, 0xf0, 0x14, 0xe1, 0x29, 0xbe,
		0x46, 0x4f, 0xb1, 0xd4, 0x6d, 0x54, 0x0c, 0x68, 0x25, 0x9a, 0x0b, 0xdd, 0xcc, 0x2b, 0xa0, 0x17,
		0x2e, 0x80, 0x7b, 0xfe, 0xbe, 0x31, 0xbf, 0xa9, 0xa9, 0xaf, 0x80, 0x2b, 0x93, 0x57, 0x47, 0x78,
		0x65, 0x5c, 0x39, 0x7d, 0x3a, 0x92, 0x3d, 0xe7, 0xf3, 0x04, 0x19, 0xa5, 0x89, 0xe3, 0x52, 0xba,
		0x17, 0x8f, 0xd8, 0xd9, 0xcb, 0x97, 0xa2, 0xc5, 0x6a, 0x72, 0x9f, 0x5b, 0xe6, 0x0c, 0xda, 0x5b,
		0xfc, 0x17, 0xdb, 0x95, 0xca, 0xd2, 0x5a, 0x38, 0x5d, 0x1b, 0x6f, 0x77, 0x45, 0x6d, 0x93, 0xc7,
		0x8a, 0xd8, 0x26, 0x57, 0xb8, 0xaa, 0xdc, 0xd0, 0x65, 0x7d, 0x73, 0x8d, 0x71, 0xd7, 0x7f, 0xdd,
		0xa4, 0x2e, 0x57, 0x21, 0xbc, 0xfc, 0x9b, 0xb0, 0xf7, 0xac, 0xef, 0x72, 0x76, 0x07, 0x75, 0xd1,
		0x1c, 0x14, 0xcd, 0x41, 0xd3, 0xa9, 0x5f, 0x34, 0x07, 0xdd, 0x32, 0xaf, 0x96, 0xad, 0x39, 0xa8,
		0xd3, 0xb5, 0xc3, 0x7b, 0xdb, 0xf7, 0x22, 0xcd, 0x1f, 0xa3, 0x9d, 0x9b, 0x8b, 0x37, 0x48, 0xdb,
		0x40, 0x90, 0xb6, 0x04, 0x80, 0x57, 0xa4, 0x3b, 0x8f, 0x20, 0x6d, 0xd9, 0x4d, 0x7f, 0xa6, 0x13,
		0xc4, 0x05, 0x94, 0xd3, 0x09, 0x42, 0x21, 0x94, 0xed, 0xb8, 0xae, 0x32, 0xc7, 0x25, 0xcc, 0xa6,
		0x64, 0x16, 0x2f, 0xde, 0x1c, 0x17, 0x63, 0x30, 0x6a, 0x12, 0x4e, 0x8b, 0x83, 0xd5, 0x22, 0x28,
		0x9e, 0x42, 0x60, 0xb6, 0x50, 0x96, 0xa7, 0x30, 0xd8, 0xe5, 0xe7, 0x74, 0x2c, 0xfe, 0x7a, 0x04,
		0xfe, 0x9c, 0x99, 0xe5, 0xf3, 0x17, 0x26, 0x50, 0x29, 0xa2, 0xc8, 0xc4, 0xd9, 0x9b, 0x18, 0x9c,
		0x27, 0x06, 0xe6, 0x1a, 0xaf, 0xe5, 0xa5, 0x11, 0x99, 0x37, 0x83, 0x25, 0x4f, 0x76, 0xee, 0xae,
		0x65, 0x70, 0xef, 0x96, 0xf6, 0xf0, 0xd8, 0xe0, 0x9c, 0xa6, 0x12, 0xa3, 0x96, 0x26, 0x36, 0x99,
		0x28, 0xb5, 0xfb, 0x5f, 0x97, 0xdf, 0xbf, 0x87, 0x3f, 0x3f, 0x3f, 0xc6, 0xff, 0x7f, 0xfe, 0x78,
		0xf5, 0x8f, 0xbd, 0x7f, 0xd6, 0x8c, 0xbd, 0xed, 0x95, 0x91, 0x99, 0x1e, 0xdf, 0x6c, 0xf1, 0x69,
		0xec, 0xe0, 0x34, 0xb2, 0x9f, 0xc6, 0xd3, 0x5f, 0xf3, 0x17, 0xc3, 0xd6, 0xdf, 0xb4, 0x1e, 0xf7,
		0x4e, 0xf7, 0x76, 0x9f, 0xfe, 0xec, 0x74, 0xef, 0x67, 0xfd, 0x4d, 0xfb, 0x71, 0x7c, 0xd7, 0xf0,
		0xe2, 0x6f, 0xfe, 0xb9, 0x6a, 0x8c, 0xbd, 0x5f, 0xbb, 0xbb, 0xbb, 0xe3, 0x73, 0xb8, 0x70, 0x36,
		0x2f, 0xeb, 0x8d, 0xab, 0x7f, 0x26, 0x5f, 0x8e, 0xfe, 0x7f, 0x7a, 0xba, 0x37, 0xfa, 0xe3, 0xbd,
		0x95, 0x67, 0xfa, 0x8d, 0x71, 0x08, 0xfb, 0x9f, 0xd3, 0xab, 0x7f, 0x9c, 0xee, 0xfd, 0xec, 0x3c,
		0x4e, 0xbe, 0x4e, 0xfe, 0x7f, 0xef, 0xd7, 0xee, 0xfe, 0xdf, 0xbf, 0x7f, 0xdf, 0xdf, 0xff, 0xfb,
		0xde, 0x68, 0x01, 0xc6, 0x7f, 0xf7, 0xf7, 0xd1, 0x6f, 0xff, 0x79, 0x7a, 0xba, 0xf4, 0xa3, 0xbd,
		0xdd, 0xff, 0xda, 0xdf, 0x46, 0x58, 0xda, 0xa9, 0xf6, 0x7b, 0x3c, 0x56, 0x32, 0xd1, 0x20, 0xbc,
		0xb7, 0x43, 0xe5, 0x05, 0xca, 0xd3, 0x0f, 0x06, 0xc9, 0x81, 0xb9, 0x49, 0x41, 0x0f, 0x80, 0x1e,
		0x00, 0x3d, 0x00, 0x7a, 0x00, 0xf4, 0xc0, 0xda, 0xf3, 0x37, 0xf4, 0xa4, 0x3e, 0x6c, 0x1a, 0xa4,
		0x06, 0x8e, 0x0c, 0x4c, 0xf5, 0x87, 0x23, 0xfb, 0x5b, 0x49, 0x0d, 0x7c, 0xf2, 0xa4, 0x31, 0xe0,
		0x9a, 0x4e, 0x9a, 0xdc, 0x1e, 0xc5, 0xaf, 0x7e, 0x96, 0xe6, 0xfd, 0xa0, 0x9c, 0x24, 0x4b, 0xfe,
		0x9d, 0xd7, 0xf7, 0x74, 0x54, 0xc0, 0x03, 0x7c, 0x16, 0x7d, 0x47, 0x7b, 0x77, 0xf1, 0xbb, 0xf7,
		0x1c, 0x3f, 0x12, 0xc6, 0x66, 0x7f, 0x34, 0xe8, 0xeb, 0x7d, 0x72, 0x7e, 0x14, 0x27, 0x52, 0xad,
		0xe6, 0x49, 0xeb, 0xa4, 0x73, 0xd4, 0x3c, 0x69, 0x43, 0xb6, 0x4c, 0xc9, 0x16, 0x1c, 0xae, 0xad,
		0x75, 0xb8, 0xee, 0xba, 0x9c, 0xbd, 0x05, 0x96, 0x6c, 0x87, 0xd1, 0x74, 0x70, 0xb2, 0xe0, 0x64,
		0xc1, 0xc9, 0x82, 0x93, 0x05, 0x27, 0x6b, 0xed, 0xf9, 0x8b, 0xb4, 0xf2, 0x64, 0xdf, 0x64, 0xfc,
		0xf5, 0x18, 0x75, 0x15, 0xfc, 0x12, 0x15, 0xa3, 0xce, 0x42, 0x3e, 0x92, 0xc5, 0xa9, 0x11, 0x6b,
		0xe7, 0x5e, 0xa4, 0xcf, 0xb4, 0x66, 0xce, 0xe7, 0xfa, 0xe4, 0xc9, 0xf7, 0xbe, 0x88, 0x91, 0x85,
		0xd9, 0x2c, 0x8e, 0x3d, 0x8f, 0xb9, 0x99, 0x1a, 0xc7, 0xad, 0x56, 0xe7, 0xa8, 0xd5, 0xaa, 0x1f,
		0x1d, 0x1e, 0xd5, 0x4f, 0xda, 0xed, 0x46, 0x87, 0xf5, 0xd6, 0xe7, 0xdf, 0x95, 0x2b, 0x94, 0x70,
		0xdf, 0xc6, 0x1b, 0x28, 0x87, 0xbe, 0x6f, 0x62, 0xaa, 0x3f, 0x23, 0xa1, 0x58, 0xed, 0x7d, 0x2e,
		0x39, 0x67, 0xae, 0xd3, 0x99, 0xce, 0x53, 0xba, 0x7a, 0x1d, 0x37, 0x3c, 0x60, 0x4f, 0xd2, 0x1e,
		0xbd, 0xb9, 0x56, 0xc3, 0xae, 0x96, 0x63, 0x7d, 0xf1, 0xf1, 0xfd, 0xd7, 0x0f, 0xe7, 0xcd, 0x6f,
		0xa1, 0xfc, 0xac, 0xef, 0xbf, 0x85, 0xf2, 0xcb, 0xf8, 0xa5, 0xaf, 0x67, 0x5f, 0xc7, 0x5f, 0x7e,
		0x8e, 0x5f, 0x79, 0xf2, 0xc5, 0xf5, 0x97, 0xc9, 0x0b, 0xfe, 0x9e, 0xbc, 0xdf, 0xf5, 0xb9, 0x1b,
		0xfe, 0xae, 0xce, 0x9b, 0x5f, 0xc3, 0xeb, 0xb3, 0xee, 0xc5, 0x7d, 0x8c, 0x1d, 0xb5, 0x57, 0xdc,
		0x79, 0x6d, 0xe0, 0x74, 0x13, 0x84, 0xb6, 0xef, 0x3d, 0x7d, 0xeb, 0x2a, 0xe7, 0x9e, 0x3f, 0xbb,
		0x7f, 0x79, 0x4a, 0x74, 0x62, 0x2b, 0xca, 0x23, 0x42, 0x92, 0x7f, 0x75, 0x3d, 0x1e, 0x24, 0xf9,
		0x17, 0xef, 0xd1, 0x4c, 0xcf, 0xcf, 0x4d, 0x10, 0xf8, 0xc2, 0x91, 0x26, 0xfa, 0xb0, 0x35, 0xd0,
		0xfc, 0x6b, 0xcd, 0x5c, 0xdb, 0xdb, 0xfc, 0xeb, 0xa8, 0xd3, 0x3c, 0x5d, 0xea, 0xc7, 0x74, 0x7e,
		0xf6, 0xd9, 0x1a, 0x9b, 0x3d, 0xd6, 0xee, 0xb7, 0x8b, 0xf3, 0x2f, 0x7b, 0xf3, 0xad, 0x94, 0xfe,
		0x8c, 0x3c, 0xd9, 0xb7, 0xce, 0x9d, 0x1b, 0xe1, 0x5b, 0xef, 0xbc, 0xd8, 0xd3, 0xbe, 0x19, 0x26,
		0xbd, 0x95, 0x26, 0xfd, 0x97, 0x16, 0xfb, 0x38, 0xbd, 0xbb, 0xd8, 0xb3, 0xa6, 0xa6, 0xd2, 0x9b,
		0x69, 0x23, 0xa6, 0x0e, 0xba, 0x7d, 0x6d, 0x25, 0x33, 0x56, 0xbc, 0x54, 0xa1, 0xbd, 0xd7, 0x9a,
		0x7f, 0xaf, 0xb9, 0x11, 0x74, 0x78, 0x6f, 0xbb, 0x06, 0xba, 0xf0, 0xcc, 0x27, 0xc5, 0xf1, 0x77,
		0xa0, 0x81, 0x23, 0x02, 0x47, 0x04, 0x8e, 0x08, 0x1c, 0x11, 0x23, 0xe7, 0x87, 0x3d, 0xa4, 0xc2,
		0x1c, 0x4a, 0x81, 0x1f, 0x02, 0x3f, 0x64, 0xa5, 0xc5, 0xd8, 0xd8, 0x6f, 0xc0, 0x13, 0x81, 0x27,
		0xc2, 0x22, 0x57, 0xf0, 0x45, 0xe0, 0x8b, 0xac, 0xf2, 0x45, 0x34, 0xa7, 0xda, 0x9e, 0x77, 0x42,
		0x92, 0x89, 0xe0, 0x7d, 0xc0, 0xfb, 0x80, 0xf7, 0x01, 0xef, 0xa3, 0xc2, 0xde, 0x87, 0xe7, 0x0a,
		0xa9, 0x3d, 0xfd, 0xa0, 0x44, 0xcf, 0x84, 0x0b, 0xc2, 0x99, 0x08, 0xf3, 0x71, 0xfc, 0x2a, 0x6f,
		0x9d, 0x48, 0x18, 0xad, 0xd2, 0x64, 0xd4, 0x05, 0xd3, 0xe9, 0x92, 0x3a, 0x83, 0xc8, 0x48, 0x25,
		0x90, 0xe1, 0x6b, 0x66, 0x85, 0xbe, 0x15, 0x4a, 0x0a, 0xdc, 0x82, 0x9f, 0x63, 0xed, 0x6c, 0xed,
		0xf4, 0xfb, 0x02, 0x37, 0xf5, 0x6e, 0x09, 0xfc, 0x83, 0xfa, 0x00, 0xf5, 0x01, 0xea, 0x03, 0xd4,
		0x07, 0xa8, 0x0f, 0x50, 0x1f, 0x9b, 0x09, 0xe9, 0x7f, 0x3c, 0xf9, 0x1f, 0x7e, 0xde, 0x23, 0x99,
		0x05, 0x0d, 0x9e, 0x41, 0x7a, 0x80, 0xf4, 0x00, 0xe9, 0x41, 0xbe, 0x42, 0xec, 0x0d, 0x9e, 0xbb,
		0xb1, 0x9b, 0x64, 0x8e, 0x19, 0x18, 0x4d, 0x87, 0xa2, 0xe2, 0xb2, 0xc1, 0x68, 0x71, 0x70, 0x5a,
		0x06, 0xc3, 0x1d, 0x45, 0xc5, 0x28, 0x2a, 0x7e, 0x76, 0xe5, 0xd0, 0xb9, 0x89, 0x64, 0x2a, 0x74,
		0x6e, 0xa2, 0x9c, 0x14, 0x9d, 0x9b, 0xd0, 0xb9, 0x89, 0x49, 0xa4, 0xd0, 0xb9, 0x09, 0x9d, 0x9b,
		0x4a, 0xc5, 0x38, 0xf1, 0x3f, 0x3f, 0x67, 0xe7, 0xa6, 0xc8, 0xac, 0x93, 0x15, 0xc1, 0xc9, 0x82,
		0x93, 0x05, 0x27, 0x0b, 0x4e, 0x16, 0x9c, 0x2c, 0x38, 0x59, 0x70, 0xb2, 0xe0, 0x64, 0xc1, 0xc9,
		0x82, 0x93, 0x05, 0xd9, 0x82, 0x93, 0x55, 0xbc, 0x93, 0x85, 0xc6, 0x68, 0xab, 0xdc, 0xc3, 0x12,
		0x36, 0x46, 0x63, 0x4c, 0x6b, 0xb0, 0xb8, 0x5b, 0xa2, 0xfd, 0x3b, 0x7e, 0xf6, 0x57, 0x9c, 0xf8,
		0xa2, 0xed, 0x78, 0x37, 0x8d, 0x55, 0xfe, 0x2c, 0x4e, 0x87, 0xfa, 0x9f, 0xa2, 0xe8, 0x05, 0xa4,
		0xc2, 0x54, 0x97, 0x3e, 0x40, 0x2a, 0x4c, 0xf1, 0xf4, 0x00, 0xea, 0x7f, 0xaa, 0xa4, 0x11, 0x16,
		0xdd, 0xa9, 0xad, 0xac, 0x02, 0xba, 0xbd, 0x0b, 0xfd, 0x08, 0x25, 0x40, 0xe9, 0x17, 0x2e, 0x5e,
		0xb7, 0x91, 0xec, 0x61, 0xf1, 0x32, 0x2c, 0xde, 0xbd, 0xb1, 0xc5, 0x43, 0xe5, 0x14, 0xaf, 0x73,
		0xb1, 0x53, 0x62, 0x51, 0xe7, 0x76, 0xaf, 0xcb, 0xe8, 0x56, 0xd3, 0x1e, 0x29, 0xba, 0xed, 0xa5,
		0x19, 0x89, 0x48, 0x40, 0xb8, 0x04, 0xa3, 0x6c, 0x02, 0x41, 0x23, 0x0c, 0xf9, 0xb7, 0x8e, 0x60,
		0xdb, 0x6a, 0x4a, 0x0c, 0x02, 0x2d, 0x6c, 0xed, 0xa8, 0xbe, 0x48, 0x28, 0x65, 0x9a, 0x6d, 0x9b,
		0x2a, 0xa5, 0x27, 0xe3, 0x13, 0x09, 0x1a, 0x6d, 0x7d, 0x0d, 0x39, 0x89, 0xc0, 0x41, 0x1a, 0xf0,
		0x93, 0x04, 0x5c, 0xa4, 0x00, 0x3b, 0x09, 0xc0, 0xee, 0xf4, 0x1b, 0x71, 0xf2, 0xcb, 0x05, 0xe5,
		0xd4, 0xf5, 0x2b, 0xb3, 0xdb, 0x78, 0xe8, 0xe5, 0x6b, 0xda, 0xbd, 0x62, 0x3a, 0x05, 0xf1, 0xf6,
		0xf3, 0x70, 0x98, 0x6c, 0xdc, 0x25, 0x27, 0x67, 0x69, 0x8e, 0xab, 0xe4, 0xe6, 0x28, 0x8d, 0x71,
		0x93, 0xc6, 0x38, 0x49, 0xa3, 0x5c, 0x64, 0xb9, 0x5d, 0x14, 0x36, 0xce, 0x71, 0x26, 0xff, 0x61,
		0x02, 0x35, 0x22, 0x8a, 0x38, 0x64, 0x7f, 0x62, 0xe0, 0x9c, 0x30, 0x8c, 0x3d, 0x5e, 0x1b, 0x1e,
		0xd6, 0xcd, 0x04, 0xcb, 0x1b, 0xde, 0xb5, 0x18, 0xd7, 0x7e, 0x69, 0x0f, 0x8e, 0x19, 0xe7, 0xb8,
		0x70, 0xb4, 0x16, 0x4a, 0xb2, 0x93, 0xa0, 0xb5, 0xdd, 0xdd, 0xcb, 0xba, 0x7d, 0x72, 0xf5, 0xeb,
		0xb2, 0x61, 0x9f, 0x5c, 0x8d, 0xbe, 0x6c, 0x24, 0xff, 0x19, 0x7d, 0xdd, 0xbc, 0xac, 0xdb, 0xad,
		0xc9, 0xd7, 0xed, 0xcb, 0xba, 0xdd, 0xbe, 0xda, 0xfb, 0xfe, 0x7d, 0x7f, 0xef, 0xe7, 0xe1, 0x63,
		0xfa, 0x0f, 0xee, 0xfe, 0xd7, 0xe5, 0xf7, 0xef, 0xe1, 0xcf, 0xcf, 0x8f, 0xf1, 0xff, 0x9f, 0x3f,
		0x5e, 0xfd, 0x63, 0xef, 0x9f, 0xb5, 0xaa, 0x35, 0x4a, 0x78, 0x53, 0xe1, 0xd3, 0xd1, 0xc1, 0xe9,
		0x48, 0x7d, 0x3a, 0x4e, 0x7f, 0xc5, 0x32, 0xec, 0xd8, 0xbd, 0x33, 0xfb, 0xc3, 0xd5, 0xcf, 0xfa,
		0x9b, 0xd6, 0xe3, 0xde, 0xe9, 0xde, 0xee, 0xd3, 0x9f, 0x9d, 0xee, 0xfd, 0xac, 0xbf, 0x69, 0x3f,
		0xee, 0xee, 0xae, 0xf8, 0xcd, 0x3f, 0x57, 0x8d, 0xb1, 0xf7, 0x6b, 0x77, 0x77, 0x77, 0x7c, 0x2e,
		0x16, 0xce, 0xca, 0x65, 0xbd, 0x71, 0xf5, 0xcf, 0xe4, 0xcb, 0xd1, 0xff, 0x4f, 0x4f, 0xdb, 0x46,
		0x7f, 0xbc, 0xb7, 0xf2, 0x8c, 0xbd, 0x61, 0x87, 0x90, 0xff, 0x39, 0xbd, 0xfa, 0xc7, 0xe9, 0xde,
		0xcf, 0xce, 0xe3, 0xe4, 0xeb, 0xe4, 0xff, 0xf7, 0x7e, 0xed, 0xee, 0xff, 0xfd, 0xfb, 0xf7, 0xfd,
		0xfd, 0xbf, 0xef, 0x8d, 0x5e, 0x78, 0xfc, 0x77, 0x7f, 0x1f, 0xfd, 0xf6, 0x9f, 0xa7, 0xa7, 0x4b,
		0x3f, 0xda, 0xdb, 0xfd, 0xaf, 0xfd, 0x2a, 0xc2, 0xc2, 0x4e, 0xb9, 0x9f, 0x93, 0x90, 0x58, 0x24,
		0xe4, 0x15, 0xb4, 0xe3, 0x79, 0x7c, 0x5e, 0x5f, 0x32, 0x3a, 0x1c, 0x3e, 0x38, 0x7c, 0x70, 0xf8,
		0xe0, 0xf0, 0x31, 0xca, 0x3f, 0x5b, 0xcd, 0x09, 0x63, 0x8d, 0x09, 0x73, 0x4d, 0x09, 0xef, 0x7d,
		0xd7, 0xfc, 0x69, 0x2f, 0x86, 0x6a, 0x44, 0x8c, 0xe7, 0xed, 0x9b, 0xcb, 0xd3, 0x7f, 0xe4, 0xbd,
		0x88, 0xdc, 0x9c, 0x08, 0x98, 0xaa, 0xe9, 0xd8, 0x66, 0x59, 0x78, 0x9d, 0x26, 0x37, 0xb1, 0x22,
		0x33, 0xd0, 0x2e, 0xd7, 0x40, 0x9b, 0x5c, 0x03, 0x44, 0x47, 0xd2, 0xbe, 0xb4, 0xd3, 0x39, 0x3a,
		0xb5, 0xce, 0x9d, 0x07, 0xa1, 0xac, 0xe6, 0x52, 0x1b, 0xd3, 0xcf, 0x42, 0xdf, 0x07, 0xea, 0xaf,
		0xc5, 0x76, 0xa4, 0xcd, 0x6f, 0x17, 0x9f, 0xf7, 0xac, 0xf7, 0x3f, 0xb4, 0x90, 0x91, 0x17, 0xc8,
		0xc8, 0xea, 0x05, 0x6a, 0x32, 0xc2, 0xfc, 0x5f, 0x7e, 0x1d, 0x4a, 0x29, 0x7c, 0x4f, 0xf6, 0xad,
		0x69, 0x5f, 0xd3, 0xf8, 0xd3, 0x5f, 0x2f, 0xf6, 0xde, 0xcc, 0xff, 0xd9, 0xa4, 0x9d, 0xe9, 0xe1,
		0x96, 0x65, 0x6b, 0x9b, 0x6a, 0x89, 0x5b, 0x6c, 0xc2, 0x76, 0xd9, 0x64, 0x08, 0xd8, 0x8c, 0x3c,
		0xab, 0xcd, 0xce, 0x29, 0x31, 0xf3, 0x51, 0x3b, 0xf7, 0x22, 0x7d, 0xa6, 0x35, 0x71, 0xd0, 0xff,
		0x93, 0x27, 0xdf, 0xfb, 0x22, 0x3e, 0x6d, 0xc4, 0x96, 0x4e, 0x6c, 0x1c, 0xce, 0x8d, 0xdc, 0x38,
		0x6e, 0xb5, 0x3a, 0x47, 0xad, 0x56, 0xfd, 0xe8, 0xf0, 0xa8, 0x7e, 0xd2, 0x6e, 0x37, 0x3a, 0x94,
		0xc9, 0xf9, 0xb5, 0xdf, 0x95, 0x2b, 0x94, 0x70, 0xdf, 0xc6, 0xab, 0x2e, 0x87, 0xbe, 0xcf, 0x31,
		0xf4, 0x9f, 0x91, 0x50, 0xa4, 0x26, 0x1a, 0x95, 0xb0, 0x31, 0x1a, 0x24, 0x8c, 0x86, 0x08, 0x23,
		0x11, 0xb0, 0xb1, 0xd2, 0x98, 0x68, 0x8a, 0x79, 0xac, 0x5f, 0xad, 0x34, 0x66, 0x9a, 0x62, 0xfe,
		0x6f, 0x9f, 0xea, 0x8c, 0xa9, 0xa2, 0x68, 0x57, 0x9c, 0x7d, 0xe3, 0x36, 0x2e, 0x8a, 0x21, 0xe0,
		0xca, 0x20, 0x17, 0x65, 0x67, 0xfd, 0x76, 0xca, 0x65, 0x28, 0x20, 0xf1, 0xf9, 0xe5, 0xc4, 0x67,
		0x96, 0x0c, 0x5e, 0x8b, 0xbb, 0x94, 0xfc, 0x8f, 0xe4, 0xa9, 0xbf, 0x8e, 0x1f, 0x7a, 0x8b, 0x12,
		0xb6, 0x23, 0xca, 0x60, 0xda, 0xac, 0xf3, 0x1c, 0xa1, 0x29, 0x49, 0x1b, 0x3c, 0x43, 0x72, 0x36,
		0xab, 0x7a, 0x46, 0x72, 0x76, 0x05, 0xfd, 0x3f, 0xf2, 0x60, 0x17, 0x5f, 0x90, 0x8b, 0x21, 0xb8,
		0xc5, 0x14, 0xd4, 0x62, 0xf0, 0x18, 0x38, 0x83, 0x58, 0xdc, 0xc1, 0x2b, 0x63, 0x81, 0x0a, 0xfe,
		0x00, 0x05, 0x47, 0xab, 0x16, 0xce, 0xe0, 0x94, 0xb1, 0xa0, 0xd4, 0x36, 0xed, 0x31, 0xfc, 0x14,
		0x70, 0x39, 0x55, 0xe4, 0x72, 0x0e, 0xc1, 0xe5, 0x80, 0xcb, 0x59, 0x29, 0x17, 0xc0, 0x48, 0xd3,
		0xee, 0xf9, 0x4e, 0x81, 0x18, 0x4d, 0xcd, 0x21, 0x95, 0x81, 0x3b, 0xaa, 0x51, 0xf0, 0x1d, 0x7c,
		0x24, 0x51, 0xbe, 0x13, 0x96, 0x5d, 0x5a, 0xb2, 0x7d, 0x32, 0xa3, 0x7c, 0x51, 0xc9, 0x55, 0x51,
		0xf2, 0x94, 0x6d, 0x93, 0xd2, 0x2f, 0x71, 0xba, 0x4f, 0xa4, 0xdc, 0x8c, 0xbc, 0x9b, 0x60, 0x72,
		0xf1, 0xd3, 0x2d, 0xf8, 0xe6, 0xcb, 0x96, 0x62, 0xc9, 0x6a, 0xb3, 0x67, 0xca, 0xd4, 0x09, 0x73,
		0x46, 0x6b, 0x2e, 0x8e, 0x93, 0x72, 0xd3, 0xb2, 0x11, 0x99, 0x99, 0x09, 0xcb, 0x3c, 0xc4, 0x24,
		0x1d, 0x01, 0x99, 0xd7, 0x76, 0x24, 0x23, 0x14, 0xc9, 0x0c, 0x3f, 0x52, 0x82, 0x90, 0x17, 0x26,
		0x32, 0x13, 0x7b, 0x33, 0x89, 0xd7, 0xca, 0x93, 0x59, 0xee, 0x90, 0x99, 0x15, 0xf4, 0x71, 0x9d,
		0xff, 0x1d, 0xc2, 0x15, 0xcb, 0x0a, 0xa8, 0x8c, 0x40, 0x5a, 0x4b, 0x83, 0x6f, 0xd4, 0x46, 0xcd,
		0x66, 0x82, 0xfc, 0xf2, 0x16, 0x6c, 0xb0, 0xfc, 0xb5, 0x48, 0x3b, 0x7a, 0xb8, 0x79, 0xab, 0xa0,
		0x39, 0xd1, 0x4c, 0x3e, 0xb7, 0xe1, 0x06, 0xa7, 0x6b, 0xf1, 0x93, 0x1a, 0x74, 0xb3, 0x80, 0xed,
		0x5c, 0xa7, 0x3d, 0x69, 0x77, 0x83, 0xc1, 0x20, 0xdd, 0xa6, 0x67, 0x04, 0xd6, 0xdc, 0x80, 0x9a,
		0x1b, 0x48, 0x17, 0x00, 0x74, 0xee, 0xdd, 0x0b, 0x3a, 0xfa, 0x69, 0x5b, 0xd3, 0xd4, 0x1c, 0x77,
		0xe0, 0x49, 0x3b, 0xa5, 0xd8, 0x2e, 0x6d, 0xfa, 0xc2, 0x28, 0xd9, 0x2c, 0x89, 0x46, 0x95, 0x2c,
		0x89, 0x4c, 0x42, 0xfe, 0x4a, 0xac, 0x88, 0x2c, 0x87, 0xc0, 0x8c, 0x05, 0x91, 0xb5, 0x6f, 0x53,
		0xcd, 0x77, 0x22, 0x6d, 0x77, 0x6f, 0xc7, 0xa1, 0xb5, 0x8c, 0xbb, 0x36, 0x91, 0x9d, 0xf9, 0xc1,
		0x32, 0x2e, 0x77, 0xbe, 0x2c, 0x82, 0xdc, 0x59, 0x03, 0x14, 0x59, 0x02, 0x34, 0x47, 0x89, 0x9a,
		0xd4, 0x25, 0x8f, 0xf8, 0x93, 0x33, 0xb4, 0x64, 0x47, 0xad, 0x18, 0xc2, 0x25, 0x77, 0x74, 0x7e,
		0x2a, 0x37, 0xae, 0xa3, 0x85, 0xed, 0x48, 0xd7, 0xd6, 0xde, 0x20, 0x0f, 0xbf, 0x4e, 0xd1, 0xac,
		0x83, 0xac, 0x19, 0x47, 0x2d, 0x69, 0x61, 0xf1, 0xb3, 0xf5, 0x68, 0xef, 0x36, 0x2e, 0xeb, 0x76,
		0xf3, 0xea, 0x57, 0x3d, 0xe9, 0x2d, 0xb3, 0x67, 0xef, 0x8e, 0xbe, 0xf8, 0x75, 0xd9, 0xf8, 0xd5,
		0x1c, 0x77, 0xbe, 0x38, 0xbc, 0xac, 0xdb, 0x8d, 0xab, 0xbd, 0xaf, 0xbb, 0xf5, 0xf9, 0xd6, 0x33,
		0x49, 0x73, 0x8c, 0xc3, 0xab, 0xbd, 0xd3, 0xa4, 0x55, 0x46, 0xf2, 0xa3, 0xb9, 0x2f, 0x77, 0xbf,
		0x7f, 0xdf, 0x4f, 0xbe, 0xf8, 0xc7, 0xde, 0x3f, 0x77, 0xff, 0xdf, 0xaf, 0xcb, 0xef, 0xdf, 0xff,
		0xf1, 0xfd, 0xbb, 0x7d, 0xb5, 0x9b, 0x4c, 0x77, 0x18, 0x4f, 0x97, 0xf4, 0xd0, 0x38, 0xdd, 0x9d,
		0x7d, 0x64, 0xef, 0x57, 0xa3, 0x75, 0x5a, 0xaf, 0xef, 0xe5, 0xe9, 0x48, 0x71, 0x65, 0x8a, 0xa8,
		0xca, 0xa0, 0x8d, 0x33, 0xda, 0x3e, 0xf9, 0x4c, 0x78, 0x40, 0x3a, 0x20, 0x1d, 0x90, 0xfe, 0x94,
		0x9f, 0x23, 0xb9, 0xa2, 0x82, 0xe2, 0x0a, 0x0a, 0xda, 0x2b, 0x26, 0x16, 0xdd, 0x24, 0x2f, 0xd2,
		0x2a, 0xc9, 0xf7, 0xb0, 0x73, 0x21, 0xc6, 0x74, 0x70, 0xc2, 0xab, 0x22, 0x88, 0x13, 0x67, 0x47,
		0x5e, 0xa1, 0x1b, 0xdc, 0xcb, 0x5a, 0x19, 0xd2, 0x83, 0x59, 0xde, 0x2e, 0x54, 0xc2, 0x76, 0x45,
		0xe8, 0x07, 0x0f, 0xc9, 0x09, 0xde, 0xda, 0xf7, 0xd4, 0x22, 0xd2, 0x9e, 0xec, 0x6f, 0xef, 0x0b,
		0x0e, 0x09, 0x5a, 0x97, 0xe7, 0x0b, 0x92, 0x5f, 0x99, 0x06, 0x7c, 0xc4, 0x01, 0xd7, 0xd1, 0xd7,
		0x09, 0x30, 0x1f, 0xe4, 0x60, 0xb5, 0x2c, 0x22, 0x26, 0x3b, 0x99, 0xfb, 0xfa, 0x2c, 0x7e, 0x90,
		0xd1, 0xd7, 0x65, 0x88, 0x40, 0x06, 0xa1, 0x50, 0xb9, 0x29, 0xc3, 0xf9, 0x41, 0x0c, 0x33, 0x86,
		0x4d, 0x30, 0x86, 0x60, 0x0c, 0xc1, 0x18, 0x1a, 0x38, 0x3a, 0x70, 0x2f, 0xe1, 0x5e, 0x82, 0x31,
		0x04, 0x63, 0x08, 0xc6, 0xb0, 0xbc, 0x8c, 0x21, 0x20, 0x1d, 0x90, 0x0e, 0xc6, 0xb0, 0xa4, 0x8c,
		0x61, 0xec, 0x25, 0x25, 0x2e, 0xb1, 0xe3, 0x6f, 0x3d, 0x5d, 0x18, 0x84, 0x5b, 0xcb, 0x15, 0x06,
		0xa1, 0x3d, 0x94, 0x7f, 0xc9, 0x2d, 0x7e, 0x3b, 0xb0, 0x67, 0x60, 0xcf, 0x16, 0xd9, 0xb3, 0xec,
		0x04, 0x0f, 0x2d, 0x79, 0xf6, 0x7b, 0x28, 0x14, 0x33, 0x77, 0xb6, 0x6d, 0xd9, 0xbb, 0x69, 0x37,
		0x8d, 0x6c, 0xb3, 0x4c, 0xa6, 0xea, 0x26, 0xaf, 0x3b, 0x2a, 0x54, 0xb4, 0x9d, 0x6e, 0x57, 0x44,
		0x91, 0xc8, 0x90, 0xb8, 0xbb, 0x72, 0x94, 0x2d, 0x48, 0xe3, 0xcd, 0x5c, 0x2b, 0xb1, 0x25, 0xa9,
		0xbc, 0x59, 0x6b, 0x21, 0x0a, 0x4e, 0xe7, 0x5d, 0x16, 0xc7, 0xec, 0x0c, 0xfd, 0x8a, 0xb1, 0x5e,
		0x41, 0x6a, 0x2f, 0x8a, 0x84, 0x78, 0x0e, 0x86, 0x19, 0x2b, 0x28, 0x33, 0x61, 0xdf, 0x0d, 0xa4,
		0x1c, 0x55, 0x97, 0xe7, 0xe7, 0x75, 0xe6, 0xc6, 0xca, 0xc7, 0xed, 0x34, 0xb6, 0x21, 0x1b, 0x8c,
		0xac, 0xed, 0xd7, 0x2b, 0xe5, 0x77, 0xa8, 0xda, 0x76, 0x99, 0xe5, 0x78, 0xf2, 0xde, 0x91, 0x5c,
		0xbb, 0x11, 0x8e, 0x12, 0xca, 0x9e, 0xef, 0x9c, 0x42, 0xc4, 0xa9, 0x2c, 0x8d, 0x9c, 0x73, 0xb3,
		0x68, 0x7a, 0xfa, 0x91, 0xf5, 0xf2, 0xa3, 0xec, 0xe1, 0xc7, 0xd7, 0xbb, 0x8f, 0xba, 0x0d, 0x0b,
		0x5b, 0xaf, 0x3e, 0xb6, 0x1e, 0x2b, 0xac, 0xbd, 0xf9, 0x8a, 0x6d, 0xd7, 0x41, 0xd6, 0x83, 0x2f,
		0x7f, 0xe9, 0xee, 0x5a, 0xd5, 0x7a, 0x5c, 0x54, 0x83, 0x8b, 0x1c, 0x0a, 0x50, 0xc8, 0xae, 0x13,
		0x46, 0x43, 0x9f, 0xa6, 0x13, 0xca, 0x74, 0x71, 0x17, 0x87, 0xa5, 0x41, 0xc3, 0x06, 0xd0, 0x10,
		0x68, 0x08, 0x34, 0xa4, 0x30, 0x85, 0xa6, 0x03, 0xb9, 0x81, 0x6e, 0xfc, 0x87, 0xbe, 0xbf, 0xf1,
		0x68, 0x58, 0xda, 0x06, 0xc7, 0x0d, 0x34, 0x38, 0x46, 0x83, 0x63, 0x34, 0x38, 0x26, 0x84, 0x11,
		0x72, 0x38, 0x99, 0x51, 0x1f, 0x77, 0xbe, 0x23, 0x6d, 0xcf, 0xe5, 0xbb, 0x86, 0x78, 0x3a, 0x03,
		0xae, 0x22, 0xc6, 0x55, 0xc4, 0x85, 0x83, 0x92, 0x31, 0x70, 0x32, 0x0a, 0x52, 0xb4, 0x60, 0x45,
		0x0c, 0x5a, 0xf4, 0x9e, 0xe1, 0x5a, 0xf9, 0x1f, 0x7a, 0x52, 0x37, 0x3a, 0x8c, 0x57, 0x11, 0x77,
		0x70, 0x15, 0xf1, 0xec, 0xc1, 0x71, 0x15, 0x71, 0x2e, 0x99, 0xc5, 0x55, 0xc4, 0x29, 0x45, 0xa0,
		0xd3, 0x6e, 0x1f, 0xe2, 0x16, 0xe2, 0x72, 0xe8, 0x06, 0xbe, 0x51, 0x4b, 0x7b, 0xd3, 0xe5, 0x1b,
		0xca, 0x96, 0xf0, 0xf7, 0xca, 0xd3, 0x82, 0xcf, 0xe8, 0x9e, 0x4c, 0xc0, 0x63, 0x73, 0x37, 0x60,
		0x73, 0xc3, 0xe6, 0x86, 0xcd, 0x5d, 0x05, 0x9b, 0x9b, 0x9a, 0x30, 0xe0, 0x27, 0x0e, 0x4c, 0x11,
		0x08, 0xcc, 0x44, 0x02, 0x3b, 0xb8, 0x99, 0x00, 0x39, 0xf3, 0x60, 0x67, 0x0a, 0xf4, 0x8c, 0x83,
		0x9f, 0x71, 0x10, 0x2c, 0x04, 0x0c, 0x99, 0x8d, 0x4d, 0xa6, 0x13, 0xc4, 0x46, 0x4c, 0x98, 0x23,
		0x28, 0x0c, 0x10, 0x15, 0x86, 0x08, 0x0b, 0x7e, 0xe2, 0xc2, 0x28, 0x81, 0x61, 0x9a, 0xc8, 0x28,
		0xcc, 0x93, 0x35, 0xef, 0xd1, 0x1a, 0x20, 0x38, 0x8c, 0x12, 0x1d, 0x45, 0x10, 0x1e, 0xaf, 0x51,
		0x5c, 0x76, 0xaa, 0x39, 0xfa, 0x55, 0xa5, 0x74, 0x2a, 0xe3, 0x8d, 0x7a, 0x4b, 0x73, 0xdd, 0xdf,
		0x0a, 0xb9, 0x0d, 0xfa, 0x68, 0x62, 0x25, 0xc8, 0x40, 0xef, 0xee, 0xef, 0x1f, 0x84, 0x41, 0xb8,
		0x57, 0x33, 0x80, 0x6d, 0x86, 0x4c, 0xed, 0x55, 0x26, 0x77, 0xb2, 0x73, 0x86, 0x80, 0xc6, 0xb4,
		0xe1, 0xbd, 0xd2, 0x00, 0x9f, 0xdf, 0x5a, 0x20, 0x9d, 0x59, 0xa4, 0xab, 0xc4, 0xfd, 0xb9, 0xae,
		0xa7, 0x72, 0x96, 0xa2, 0x6c, 0x0c, 0x33, 0xb3, 0xa9, 0xc0, 0xac, 0x80, 0x59, 0x01, 0xb3, 0x02,
		0x66, 0xa5, 0xc2, 0xcc, 0x8a, 0x90, 0xc3, 0xc1, 0xb8, 0x5d, 0x8a, 0x01, 0x7a, 0xa5, 0xd1, 0x62,
		0x9c, 0xe3, 0xbd, 0x1c, 0x0e, 0xf8, 0x8f, 0xe7, 0xd7, 0xe0, 0xcb, 0xa8, 0xae, 0xc2, 0x84, 0xdd,
		0x57, 0xab, 0x27, 0x85, 0x1c, 0x0f, 0x83, 0x81, 0xd0, 0xca, 0xeb, 0xf2, 0x9a, 0x3e, 0xcc, 0x7c,
		0x40, 0xed, 0x6b, 0xf0, 0x31, 0x39, 0xf3, 0x06, 0x96, 0x6d, 0xb6, 0x62, 0xa7, 0x56, 0xbd, 0xa2,
		0xd6, 0xdc, 0xe3, 0x2b, 0xb6, 0xe6, 0xb4, 0xd3, 0xb7, 0xbb, 0xb7, 0x81, 0xc7, 0x19, 0xbe, 0x9d,
		0x20, 0xe0, 0xdc, 0x5c, 0xbc, 0xf6, 0x5c, 0x1b, 0xf6, 0x1c, 0xec, 0x39, 0xd8, 0x73, 0xaf, 0xd1,
		0x9e, 0xe3, 0x4a, 0x27, 0x98, 0x4e, 0x10, 0x06, 0x21, 0xbf, 0x24, 0x4f, 0xce, 0x68, 0x3c, 0x19,
		0xb3, 0x48, 0x8d, 0x21, 0xb3, 0xc5, 0x3c, 0x0d, 0x37, 0x74, 0x9a, 0x84, 0xd0, 0xe2, 0xa0, 0xd4,
		0x34, 0xa4, 0x16, 0x06, 0xad, 0x85, 0x41, 0x6c, 0xa1, 0x50, 0xcb, 0x6f, 0xea, 0x9a, 0xf0, 0x3e,
		0xb8, 0x21, 0xd8, 0x28, 0x14, 0x17, 0x00, 0xc9, 0x4f, 0xa1, 0xd9, 0x54, 0x9c, 0xd3, 0x14, 0x44,
		0x17, 0x01, 0xd5, 0xc5, 0x43, 0x76, 0x51, 0xd0, 0x5d, 0x38, 0x84, 0x17, 0x0e, 0xe5, 0xa5, 0x80,
		0x74, 0x33, 0xd0, 0x6e, 0x08, 0xe2, 0x67, 0x44, 0x13, 0x37, 0x7b, 0xba, 0xf6, 0xfc, 0x9a, 0x61,
		0x53, 0xd7, 0x41, 0x72, 0xa3, 0x65, 0x70, 0x4e, 0x23, 0x6c, 0xeb, 0xf2, 0xd6, 0x9a, 0x64, 0x5f,
		0x97, 0x66, 0x4f, 0xd8, 0xd8, 0x86, 0x61, 0x84, 0x4a, 0x66, 0x6e, 0xc4, 0x33, 0x37, 0x6b, 0x46,
		0x27, 0x7e, 0x7c, 0x63, 0x7a, 0x6f, 0x4d, 0xf1, 0xc3, 0x2b, 0x97, 0xb7, 0x5e, 0xc0, 0xb6, 0x36,
		0xe3, 0x53, 0x6b, 0x76, 0x53, 0xb7, 0x4d, 0xa7, 0xc0, 0xed, 0x79, 0xde, 0xba, 0xc8, 0xd7, 0xe2,
		0x3c, 0xf5, 0x7c, 0x74, 0x1d, 0xb5, 0x57, 0x75, 0x89, 0x5e, 0xf1, 0xc3, 0x83, 0x59, 0xe7, 0xd0,
		0x83, 0x85, 0xa6, 0x5c, 0x07, 0x49, 0x8f, 0x9e, 0x83, 0x71, 0x49, 0xdf, 0xc1, 0x8c, 0xe6, 0x3f,
		0x88, 0x9d, 0xa5, 0xaa, 0x06, 0x85, 0x18, 0x09, 0xf1, 0x70, 0x18, 0xdd, 0x1a, 0x24, 0x11, 0xe3,
		0xd9, 0xc0, 0x22, 0x96, 0xd5, 0x35, 0x05, 0x8b, 0xb8, 0xbd, 0xae, 0x27, 0x58, 0xc4, 0xcc, 0x2b,
		0x67, 0x8e, 0x45, 0x34, 0x01, 0xc6, 0x45, 0x80, 0xf2, 0x53, 0x70, 0x06, 0x8f, 0xb8, 0x0d, 0xa0,
		0x5d, 0x14, 0x78, 0x17, 0x0e, 0xe2, 0x85, 0x83, 0x79, 0x29, 0x40, 0xdd, 0xb0, 0xcf, 0xb7, 0xfd,
		0x3c, 0xe2, 0x20, 0xd4, 0x0f, 0x45, 0x30, 0x88, 0x87, 0x70, 0xda, 0xe1, 0xb4, 0x97, 0xd3, 0x69,
		0x8f, 0x4d, 0x13, 0x78, 0xed, 0x4b, 0x7b, 0xa7, 0x95, 0x23, 0x23, 0xdf, 0xd1, 0xc2, 0x9c, 0xeb,
		0x3e, 0x9b, 0x12, 0xfe, 0x3b, 0xfc, 0x77, 0xf8, 0xef, 0xf0, 0xdf, 0xe1, 0xbf, 0x17, 0x07, 0xcb,
		0x85, 0xc1, 0x33, 0x3c, 0x79, 0x78, 0xf2, 0xf0, 0xe4, 0xe1, 0xc9, 0xc3, 0x93, 0x7f, 0xce, 0x93,
		0x47, 0x46, 0x10, 0xf3, 0xd6, 0x96, 0x20, 0x23, 0xc8, 0xd6, 0x81, 0x5d, 0x5c, 0x5a, 0x50, 0x32,
		0x7d, 0xb3, 0x56, 0x50, 0xfa, 0x4a, 0xad, 0x59, 0xd8, 0xdb, 0x1f, 0x4e, 0xa7, 0x47, 0x66, 0x14,
		0x9b, 0x84, 0x8d, 0x76, 0xb7, 0x98, 0xf4, 0xa8, 0xb1, 0x64, 0x93, 0x77, 0x4e, 0xde, 0x4c, 0xb8,
		0x27, 0x6f, 0xde, 0x2c, 0x6a, 0xf2, 0xf8, 0xcd, 0x0f, 0x91, 0x1d, 0x56, 0xea, 0x59, 0x40, 0x34,
		0xa7, 0x99, 0xaf, 0x0a, 0x44, 0xf3, 0xcc, 0x7d, 0x46, 0xe3, 0x00, 0x7e, 0x51, 0x34, 0x25, 0x82,
		0x55, 0x10, 0xbd, 0x5a, 0x55, 0x3a, 0x3e, 0x94, 0xba, 0x75, 0x3b, 0xb3, 0x40, 0x95, 0x56, 0x90,
		0x38, 0xae, 0x50, 0x88, 0xb4, 0x1a, 0x76, 0xb5, 0x1c, 0xfb, 0xb2, 0x1f, 0xdf, 0x7f, 0xfd, 0x70,
		0xde, 0xfc, 0x16, 0xca, 0xcf, 0xfa, 0xfe, 0x5b, 0x28, 0xbf, 0x8c, 0x5f, 0xf3, 0x7a, 0xf6, 0x75,
		0xfc, 0xe5, 0xe7, 0xf8, 0x25, 0x27, 0x5f, 0x24, 0xff, 0x1d, 0xbd, 0xcd, 0xd9, 0xf8, 0x0d, 0x97,
		0x7e, 0x74, 0xfd, 0xdb, 0xf4, 0xfd, 0xae, 0xdf, 0xcf, 0xbf, 0xdf, 0xf5, 0xbb, 0x40, 0x37, 0xfe,
		0x7d, 0xfd, 0xc7, 0xf8, 0xfd, 0x5e, 0xc1, 0x05, 0x27, 0x31, 0x16, 0x68, 0x0e, 0xae, 0x62, 0xa1,
		0xdb, 0x49, 0x32, 0x03, 0xf5, 0x85, 0x09, 0xa2, 0xe7, 0x0c, 0x7d, 0xcd, 0xd2, 0x4e, 0xb4, 0x16,
		0x9f, 0x89, 0x6e, 0x30, 0x18, 0x04, 0xf2, 0xb4, 0x6b, 0xdf, 0xf9, 0x8e, 0xa4, 0x95, 0x85, 0x2b,
		0x5c, 0xb1, 0x88, 0xeb, 0x5e, 0x5e, 0xde, 0x55, 0x5c, 0xf7, 0xb2, 0xb5, 0x36, 0x03, 0xff, 0x15,
		0x8b, 0x9e, 0x2b, 0xa4, 0xf6, 0xf4, 0x83, 0x12, 0x3d, 0xc6, 0x7b, 0x16, 0x1b, 0x0c, 0x3d, 0xa6,
		0x6a, 0x1f, 0xc7, 0x8f, 0xfe, 0xd6, 0x89, 0x0c, 0xb5, 0xe3, 0x62, 0x50, 0x50, 0xd3, 0x79, 0x92,
		0x26, 0xf1, 0x11, 0x6b, 0xdb, 0x6b, 0x43, 0x69, 0x38, 0x1c, 0xaa, 0xd0, 0x10, 0xf9, 0x60, 0x68,
		0x85, 0x22, 0x1b, 0x6b, 0xf4, 0xf2, 0x1a, 0x31, 0xaf, 0x10, 0xcb, 0xc8, 0x57, 0x65, 0x57, 0x50,
		0x5b, 0x7a, 0x91, 0x3a, 0xe3, 0xf5, 0x04, 0x3c, 0xd7, 0x11, 0x30, 0xaa, 0x74, 0x57, 0x28, 0xef,
		0x4e, 0xb8, 0x76, 0x4f, 0x05, 0x03, 0x3b, 0x50, 0x76, 0x24, 0xfc, 0xde, 0xee, 0xfe, 0xfe, 0xc8,
		0x47, 0x4f, 0x74, 0xd8, 0x1b, 0xeb, 0x6f, 0x73, 0xae, 0x4b, 0xe2, 0xad, 0xff, 0x6d, 0xaf, 0xe2,
		0xb6, 0x2f, 0xe3, 0xd5, 0x03, 0xc5, 0x58, 0xbe, 0x59, 0xb7, 0xb1, 0x12, 0x8d, 0x54, 0xdf, 0x89,
		0xa8, 0xab, 0xbc, 0xd0, 0x4c, 0x63, 0xfc, 0xdf, 0xa5, 0xff, 0x60, 0x39, 0x61, 0xe8, 0x7b, 0x22,
		0xb2, 0x62, 0x39, 0xb1, 0xf4, 0xad, 0xb0, 0xe2, 0x15, 0xb4, 0x82, 0x5e, 0xfc, 0xf5, 0x77, 0xa9,
		0x9d, 0x7e, 0x5f, 0xb8, 0x96, 0x27, 0xb5, 0x50, 0x3d, 0xa7, 0x2b, 0x2c, 0x2f, 0xb2, 0xfe, 0x36,
		0x5a, 0xd1, 0x7d, 0x2e, 0xa9, 0x32, 0x90, 0xc8, 0x34, 0x7f, 0x40, 0xdc, 0xb9, 0x25, 0x67, 0xcc,
		0xfb, 0x36, 0x99, 0xa5, 0xb4, 0x70, 0x5e, 0xf2, 0xee, 0xf2, 0xeb, 0x24, 0xb9, 0x77, 0xca, 0x65,
		0xf9, 0x50, 0xd9, 0x03, 0x4c, 0x64, 0x7b, 0xe9, 0x48, 0x76, 0xc2, 0x93, 0x5c, 0x0a, 0x52, 0x9d,
		0xe6, 0x14, 0xe6, 0x97, 0x6a, 0x02, 0x39, 0xac, 0xcd, 0x14, 0x35, 0x99, 0x0c, 0xce, 0xa5, 0xef,
		0x4d, 0xc7, 0x26, 0x3a, 0x31, 0x1c, 0x44, 0xf9, 0x3c, 0x41, 0x1e, 0x2a, 0x2f, 0x50, 0x9e, 0x7e,
		0xb0, 0x47, 0x20, 0x4c, 0xb3, 0xd1, 0x44, 0x0c, 0x39, 0x31, 0x33, 0x4e, 0xce, 0x88, 0x73, 0x30,
		0xe1, 0xfc, 0x0c, 0x38, 0x97, 0x81, 0xc3, 0xce, 0x78, 0xb3, 0xdb, 0x30, 0x46, 0x18, 0xee, 0x72,
		0x39, 0xe8, 0xe4, 0x4c, 0x36, 0x33, 0x83, 0xcd, 0xc1, 0x5c, 0xf3, 0x32, 0xd6, 0x8b, 0xba, 0x61,
		0xa2, 0x56, 0x59, 0x82, 0xaa, 0x8c, 0x5c, 0x35, 0xf7, 0x1d, 0x69, 0x89, 0xd1, 0x54, 0x05, 0x17,
		0x99, 0x79, 0x21, 0x84, 0xbe, 0x15, 0x4a, 0x0a, 0x3d, 0x92, 0x0f, 0x2c, 0x48, 0xcd, 0x77, 0xfa,
		0xb6, 0x27, 0x35, 0x96, 0x22, 0x56, 0xaa, 0x0c, 0xa6, 0x5a, 0xb5, 0x97, 0xe4, 0x3f, 0x9e, 0x74,
		0xe4, 0x03, 0x56, 0x22, 0x59, 0x09, 0x00, 0xe8, 0x28, 0x1e, 0xdc, 0x17, 0x2e, 0x20, 0x63, 0xb4,
		0x1a, 0x43, 0x89, 0xf5, 0x98, 0x5f, 0x8f, 0x3b, 0xdf, 0x91, 0x50, 0xad, 0x93, 0xc5, 0xf8, 0xc1,
		0x12, 0xc9, 0xa5, 0x65, 0x42, 0xaf, 0xca, 0xe6, 0x78, 0x95, 0x82, 0xc3, 0x7a, 0x6a, 0x0a, 0x90,
		0x13, 0x59, 0x4f, 0x27, 0xa0, 0x25, 0x74, 0x1a, 0x20, 0x74, 0x40, 0xe8, 0x80, 0xd0, 0xe1, 0x20,
		0x74, 0xa8, 0x3b, 0x96, 0x20, 0xc7, 0x7c, 0xf5, 0xe0, 0xc8, 0x31, 0x47, 0x8e, 0x79, 0x51, 0xc0,
		0x6c, 0x0c, 0xa0, 0x8d, 0x01, 0xb5, 0x51, 0xc0, 0xe6, 0x31, 0x54, 0x91, 0x63, 0xbe, 0xc6, 0xd6,
		0x43, 0x8e, 0xf9, 0x4b, 0xf3, 0x20, 0xc7, 0xbc, 0x40, 0x27, 0xdb, 0xf0, 0x0a, 0x21, 0xc7, 0x7c,
		0x93, 0x35, 0x42, 0x8e, 0xb9, 0x85, 0x1c, 0xf3, 0x0d, 0xa5, 0x06, 0x39, 0xe6, 0xd9, 0x73, 0xcc,
		0x9f, 0xd0, 0x3c, 0xc8, 0x36, 0x2f, 0x9b, 0x0d, 0x9c, 0x7f, 0x43, 0x91, 0x77, 0xfe, 0xf4, 0x90,
		0x64, 0xcd, 0x48, 0x7e, 0xba, 0xb6, 0xc8, 0x40, 0x2f, 0xe5, 0xf9, 0xb1, 0xa8, 0x32, 0xd0, 0x97,
		0xf7, 0x1b, 0xb9, 0xe8, 0x25, 0xb0, 0x90, 0x90, 0x8b, 0xbe, 0x71, 0x2e, 0x3a, 0x4f, 0x14, 0xc7,
		0x2a, 0x41, 0x56, 0xfa, 0xc5, 0xf8, 0xcd, 0xbe, 0x12, 0xa6, 0xc2, 0x94, 0x23, 0xb4, 0x97, 0x24,
		0x72, 0x90, 0xc7, 0xf3, 0x92, 0x51, 0x11, 0xc4, 0xcb, 0xcf, 0x99, 0x21, 0x88, 0x67, 0x5a, 0xaf,
		0x23, 0x88, 0x97, 0x7f, 0xc0, 0x6e, 0x92, 0xf8, 0xe2, 0xb9, 0x7c, 0x41, 0xbc, 0xe9, 0x0c, 0x08,
		0x5c, 0x21, 0x70, 0x55, 0x38, 0x28, 0x15, 0xeb, 0xb4, 0xbf, 0xee, 0xc0, 0xd5, 0x27, 0x47, 0xba,
		0x8e, 0x0e, 0xd4, 0x03, 0x7d, 0x23, 0x66, 0x03, 0x41, 0xb1, 0xa1, 0x27, 0x75, 0xa3, 0xc3, 0x18,
		0x0f, 0xeb, 0x30, 0x0c, 0xfd, 0x87, 0x23, 0xfb, 0x82, 0x2d, 0x7e, 0xc4, 0xc8, 0x42, 0x7c, 0xf2,
		0xf8, 0x3b, 0x09, 0x8f, 0xc2, 0x6b, 0x06, 0xae, 0xeb, 0xfa, 0xa0, 0x9c, 0xc4, 0x55, 0x79, 0xe7,
		0xf5, 0x3d, 0x1d, 0x19, 0x98, 0xf0, 0xb3, 0xe8, 0x3b, 0xda, 0xbb, 0x8b, 0xdf, 0xad, 0xe7, 0xf8,
		0x91, 0xa8, 0xe4, 0x85, 0x74, 0x9f, 0x9c, 0x1f, 0xe6, 0x44, 0xa0, 0xd3, 0x6e, 0x1f, 0xb6, 0x21,
		0x06, 0xa5, 0x61, 0xaa, 0x78, 0x46, 0xbd, 0x7a, 0x05, 0xad, 0x5f, 0x23, 0x76, 0x8b, 0x3e, 0x82,
		0x45, 0x0f, 0x8b, 0x1e, 0x16, 0x3d, 0x2c, 0x7a, 0x58, 0xf4, 0xb0, 0xe8, 0x61, 0xd1, 0xc3, 0xa2,
		0x87, 0x45, 0x0f, 0x8b, 0x1e, 0x16, 0x3d, 0x9b, 0x45, 0x8f, 0x42, 0x9b, 0x95, 0x83, 0xcf, 0x25,
		0x37, 0xf1, 0xe4, 0xce, 0xa2, 0xd4, 0x06, 0xfe, 0x0d, 0xfc, 0x1b, 0x94, 0xda, 0xa0, 0xd4, 0x66,
		0xe5, 0xd8, 0x28, 0xb5, 0x29, 0x8d, 0x73, 0x65, 0xa1, 0xd4, 0x26, 0xcd, 0x0a, 0xa1, 0xd4, 0x66,
		0x93, 0x35, 0x42, 0xa9, 0x8d, 0x85, 0x52, 0x9b, 0x0d, 0xa5, 0x06, 0xa5, 0x36, 0xd9, 0x4b, 0x6d,
		0xfe, 0xe3, 0x49, 0xdc, 0xe6, 0x50, 0x3a, 0xc3, 0x37, 0xe3, 0x2e, 0xa2, 0xa8, 0xe6, 0xe9, 0x71,
		0x78, 0xb1, 0xc8, 0xc2, 0x1a, 0xe5, 0xa0, 0x7f, 0x97, 0x0b, 0x45, 0x16, 0xff, 0xf6, 0xe4, 0xbf,
		0x51, 0x47, 0x53, 0xca, 0x73, 0x62, 0xa5, 0xae, 0xa3, 0x79, 0x6e, 0x8b, 0x51, 0x3a, 0x53, 0x02,
		0x8b, 0x07, 0xa5, 0x33, 0x1b, 0x97, 0xce, 0x10, 0x16, 0x4c, 0x58, 0x25, 0xa8, 0x97, 0xf9, 0x37,
		0x59, 0x7b, 0x50, 0x82, 0x2a, 0x99, 0x9d, 0x02, 0x65, 0x98, 0x5a, 0x76, 0x4b, 0x24, 0xb3, 0x04,
		0xe2, 0x5a, 0xb0, 0x98, 0xe6, 0x93, 0xd0, 0xec, 0x72, 0x95, 0x43, 0xa6, 0x6a, 0x7e, 0xd3, 0xd6,
		0x42, 0x0d, 0x3c, 0x39, 0xea, 0xeb, 0x1e, 0x06, 0x5e, 0xa2, 0x2d, 0xf3, 0x49, 0xd6, 0xac, 0xfd,
		0xf5, 0xaa, 0xd1, 0x73, 0x9e, 0x00, 0x9a, 0x00, 0x05, 0x59, 0x40, 0x82, 0x32, 0x00, 0xc1, 0x17,
		0x70, 0xa0, 0x36, 0x26, 0xd9, 0x02, 0x0a, 0x6c, 0xf6, 0x21, 0x6b, 0xc0, 0xa0, 0x58, 0x9d, 0x40,
		0x16, 0x00, 0x98, 0xf1, 0x6a, 0x5a, 0x79, 0xb2, 0x4f, 0x21, 0x77, 0x13, 0x6e, 0xff, 0xb8, 0x8a,
		0xd8, 0x38, 0x6a, 0xde, 0x3f, 0xf2, 0x05, 0x08, 0x41, 0x71, 0x61, 0x58, 0x1a, 0x34, 0x6c, 0x00,
		0x0d, 0x81, 0x86, 0x40, 0x43, 0xca, 0xea, 0xd3, 0x9a, 0xef, 0x74, 0x43, 0xfa, 0x52, 0xf6, 0x64,
		0x54, 0x94, 0xb2, 0x97, 0x0f, 0x14, 0xb8, 0x79, 0x37, 0x94, 0xb2, 0x1b, 0x24, 0x9d, 0x4a, 0x5b,
		0xca, 0xee, 0xb8, 0x03, 0x4f, 0xda, 0x7f, 0x89, 0x07, 0xbe, 0x3c, 0xb9, 0xd9, 0x14, 0x48, 0x0d,
		0x43, 0x6a, 0x58, 0xe1, 0xb0, 0x64, 0x0c, 0x9e, 0x8c, 0xc2, 0x14, 0x2d, 0x5c, 0x11, 0xc3, 0x16,
		0xbd, 0x67, 0xb8, 0x56, 0xfe, 0x51, 0x9e, 0xb2, 0xf4, 0x0f, 0xe5, 0x29, 0x9b, 0xcd, 0x83, 0xf2,
		0x94, 0x4c, 0x22, 0x80, 0xf2, 0x94, 0xca, 0x88, 0x01, 0xca, 0x53, 0xca, 0x72, 0x8c, 0x6a, 0x3d,
		0x3f, 0xb8, 0xb7, 0xbb, 0x81, 0xd4, 0x2a, 0xf0, 0xf9, 0x4c, 0xef, 0x85, 0x59, 0x60, 0x7d, 0xc3,
		0xfa, 0x86, 0xf5, 0x0d, 0xeb, 0x9b, 0x51, 0xfe, 0xc9, 0xe2, 0x34, 0xeb, 0xd0, 0x26, 0x67, 0xdc,
		0xa6, 0x1a, 0xba, 0xc1, 0x77, 0xba, 0xa1, 0x1d, 0x69, 0x47, 0x33, 0x16, 0x2f, 0xce, 0xcd, 0x51,
		0xa5, 0xf2, 0xc5, 0xc4, 0x40, 0x42, 0xc1, 0x22, 0xf4, 0x22, 0xf4, 0x22, 0xf4, 0x62, 0x75, 0xf4,
		0xe2, 0x4d, 0x10, 0xf8, 0xc2, 0x91, 0x9c, 0x8a, 0xb1, 0xf1, 0x1a, 0x14, 0xa3, 0xef, 0x86, 0x8c,
		0x2a, 0x31, 0x1e, 0x1d, 0xca, 0x00, 0xca, 0x00, 0xca, 0x00, 0xca, 0x00, 0xca, 0xa0, 0xec, 0xca,
		0x60, 0x20, 0x06, 0x37, 0x42, 0xd9, 0xbe, 0x27, 0xff, 0xb2, 0x7d, 0x2f, 0xd2, 0x7c, 0x8a, 0x61,
		0x69, 0x26, 0x1e, 0x25, 0xd1, 0x80, 0x92, 0x80, 0x92, 0x80, 0x92, 0xa8, 0x82, 0x92, 0xa0, 0x4e,
		0xc3, 0x59, 0x05, 0x6a, 0xfc, 0x45, 0xa6, 0xf3, 0x93, 0x31, 0x89, 0x0c, 0x0f, 0xb4, 0xb1, 0x43,
		0x9c, 0x09, 0xa8, 0x33, 0x0f, 0x79, 0xa6, 0xa0, 0xcf, 0x38, 0x04, 0x1a, 0x87, 0xc2, 0x42, 0x20,
		0x91, 0x07, 0x1a, 0x99, 0x20, 0x92, 0x1d, 0x2a, 0x67, 0xa4, 0x40, 0x6c, 0x96, 0x0d, 0xf4, 0x90,
		0x5f, 0x9c, 0xa7, 0x44, 0xc1, 0x64, 0x46, 0x66, 0xe1, 0xe2, 0x21, 0x0f, 0x8c, 0x83, 0xa8, 0x49,
		0x30, 0x2d, 0x0e, 0x54, 0x4d, 0x83, 0x6b, 0x61, 0x20, 0x5b, 0x18, 0xd8, 0x16, 0x0a, 0xba, 0xbc,
		0xe0, 0xcb, 0x0c, 0xc2, 0xfc, 0xe4, 0xc6, 0xda, 0xf3, 0x37, 0xf4, 0xa4, 0x3e, 0x6c, 0x9a, 0x38,
		0x77, 0x63, 0xb4, 0x3c, 0x32, 0x30, 0x15, 0x6f, 0xbe, 0xe6, 0xd3, 0x7f, 0x66, 0x70, 0xc4, 0x32,
		0x95, 0xcf, 0xb9, 0x34, 0xa9, 0xa1, 0xfc, 0xce, 0xa5, 0x79, 0x4d, 0x27, 0xfa, 0x2d, 0x9f, 0x11,
		0x53, 0x89, 0x7f, 0x86, 0x61, 0x66, 0x51, 0xa4, 0x9c, 0x1f, 0xc5, 0x89, 0x54, 0xab, 0x79, 0xd2,
		0x3a, 0xe9, 0x1c, 0x35, 0x4f, 0xda, 0x90, 0x2d, 0x53, 0xb2, 0xb5, 0xb3, 0x1d, 0xb3, 0x5c, 0xed,
		0x54, 0xf3, 0xf9, 0x39, 0x73, 0xbd, 0x07, 0x81, 0x2b, 0xcc, 0xb9, 0x59, 0xc9, 0x6c, 0x70, 0xb1,
		0xe0, 0x62, 0xc1, 0xc5, 0x82, 0x8b, 0x05, 0x17, 0x6b, 0xfd, 0xf9, 0x63, 0xed, 0x86, 0xbe, 0x0e,
		0x32, 0x1b, 0x06, 0x4c, 0x2a, 0x33, 0xdd, 0xd2, 0xd7, 0x2e, 0xac, 0x14, 0x7d, 0xdb, 0x80, 0x12,
		0x5a, 0xb4, 0x5a, 0x23, 0x63, 0x7e, 0xa5, 0x59, 0xdf, 0x72, 0x61, 0x65, 0x9d, 0xa1, 0x0e, 0x6c,
		0x29, 0xfa, 0xb5, 0x6d, 0x74, 0x79, 0x0a, 0x5a, 0xd3, 0xde, 0xd0, 0xf7, 0x6d, 0x77, 0x18, 0xfa,
		0xe2, 0x47, 0x6d, 0xcb, 0xac, 0xfd, 0xab, 0xaa, 0xeb, 0x9c, 0x4a, 0x5a, 0xfb, 0xe3, 0xb6, 0x85,
		0x86, 0xac, 0xfd, 0x64, 0x36, 0x58, 0xfb, 0xb0, 0xf6, 0x61, 0xed, 0xc3, 0xda, 0x87, 0xb5, 0xbf,
		0xf6, 0xfc, 0xb1, 0x95, 0xd8, 0xad, 0x35, 0xf4, 0x8f, 0xa1, 0x1b, 0x97, 0xd6, 0x26, 0x70, 0x06,
		0xf6, 0x71, 0xbd, 0xb9, 0x7f, 0xe8, 0xdc, 0xf2, 0x26, 0x6b, 0x2d, 0xed, 0xff, 0xd2, 0xcc, 0x66,
		0x74, 0x66, 0x03, 0x3a, 0x13, 0x3a, 0x13, 0x3a, 0x13, 0x3a, 0x33, 0xff, 0xca, 0x71, 0x67, 0x84,
		0x4d, 0x27, 0x12, 0x92, 0xfc, 0x5e, 0xa5, 0x8d, 0x8e, 0xfb, 0x78, 0x5e, 0x43, 0x82, 0x68, 0xc6,
		0xa9, 0x31, 0x0e, 0xd4, 0x45, 0x00, 0x76, 0xf1, 0xc0, 0x5d, 0x14, 0x80, 0x17, 0x0e, 0xe4, 0x85,
		0x03, 0x7a, 0x29, 0x80, 0xdd, 0x0c, 0xc0, 0x1b, 0x02, 0x7a, 0xf3, 0x4e, 0xd2, 0xd2, 0xf9, 0xe5,
		0x2b, 0xb5, 0x7b, 0xd1, 0x5e, 0x6e, 0x6c, 0x49, 0x1e, 0x44, 0xb5, 0x6d, 0x0d, 0xa6, 0xab, 0x95,
		0xd6, 0xce, 0x57, 0xe8, 0xf5, 0x35, 0x0b, 0x8d, 0xfc, 0x0f, 0x7c, 0xa7, 0x1b, 0x1e, 0x3c, 0x2d,
		0x5d, 0x9c, 0xff, 0xc1, 0x81, 0x61, 0x57, 0xd2, 0x2a, 0xe4, 0x46, 0x9c, 0x73, 0xa7, 0xff, 0x71,
		0xb2, 0x26, 0xd7, 0xe7, 0x4e, 0x37, 0xbc, 0xfe, 0x94, 0x2c, 0xc1, 0xb9, 0x27, 0xff, 0x3a, 0xf7,
		0x22, 0x3d, 0xf7, 0xed, 0xf5, 0xef, 0xce, 0xe0, 0xfa, 0xb8, 0xde, 0xbc, 0x3e, 0x3c, 0xbb, 0x8d,
		0xbf, 0xaf, 0x81, 0xf8, 0x58, 0xda, 0xbf, 0x30, 0x50, 0xda, 0x8e, 0x42, 0x21, 0x5c, 0x73, 0x94,
		0xc7, 0xdc, 0x9c, 0x08, 0x10, 0x80, 0xec, 0x00, 0xd9, 0x01, 0xb2, 0xa3, 0x32, 0x06, 0x08, 0x2a,
		0x2e, 0x48, 0xa6, 0x42, 0xc5, 0x05, 0xe5, 0xa4, 0xa8, 0xb8, 0x40, 0xc5, 0x05, 0x93, 0x48, 0xa1,
		0xe2, 0x02, 0x15, 0x17, 0x19, 0xff, 0x55, 0xb6, 0xe2, 0xa2, 0x52, 0xf5, 0xf8, 0xff, 0x9d, 0x5c,
		0xf5, 0xc3, 0x99, 0x6e, 0x55, 0x8b, 0xdd, 0xea, 0x33, 0xad, 0x99, 0xeb, 0xfe, 0x3f, 0x79, 0xf2,
		0xbd, 0x2f, 0x62, 0xab, 0x94, 0xf9, 0xb4, 0xc7, 0x80, 0x3a, 0x37, 0x53, 0xe3, 0xb8, 0xd5, 0xea,
		0x1c, 0xb5, 0x5a, 0xf5, 0xa3, 0xc3, 0xa3, 0xfa, 0x49, 0xbb, 0xdd, 0xe8, 0x70, 0xa6, 0x42, 0xd7,
		0x7e, 0x57, 0xae, 0x50, 0xc2, 0x7d, 0x1b, 0xef, 0x9a, 0x1c, 0xfa, 0xbe, 0x89, 0xa9, 0xfe, 0x8c,
		0x84, 0x62, 0x85, 0x31, 0x2e, 0xe1, 0x36, 0x44, 0xf7, 0x55, 0x8a, 0xe6, 0xe3, 0x6c, 0x24, 0x53,
		0x66, 0x36, 0xaf, 0x56, 0x91, 0xdb, 0x2e, 0xca, 0xdd, 0xe9, 0x8a, 0xf9, 0x44, 0x95, 0xfe, 0x24,
		0x71, 0x74, 0x9e, 0x2b, 0xdd, 0xa9, 0xa9, 0xbd, 0x86, 0x76, 0x91, 0x9e, 0xf4, 0x46, 0xdb, 0x2a,
		0x87, 0x03, 0xc6, 0x5e, 0x91, 0x0b, 0xd3, 0xa0, 0x9b, 0x30, 0x1a, 0x45, 0x6e, 0x62, 0x91, 0xa3,
		0x51, 0xe4, 0x96, 0xaa, 0x4f, 0x33, 0x17, 0x1e, 0xb2, 0xd0, 0xbd, 0x8c, 0xf4, 0x2e, 0x2e, 0x3c,
		0xdc, 0x88, 0x4b, 0xc3, 0x85, 0x87, 0x25, 0xf3, 0x2f, 0x2d, 0xe3, 0x17, 0x1e, 0x9a, 0xa2, 0x53,
		0x71, 0xeb, 0x61, 0xe1, 0xa3, 0xbe, 0x86, 0x5b, 0x0f, 0x59, 0x1a, 0xc8, 0x70, 0x36, 0x8c, 0x81,
		0xc9, 0x0d, 0x93, 0x1b, 0x26, 0x37, 0x4c, 0x6e, 0xcb, 0x5c, 0xc3, 0x15, 0xce, 0x06, 0x2b, 0x66,
		0x1a, 0xaa, 0x2c, 0x5e, 0x32, 0xc8, 0xd8, 0x41, 0xc5, 0x44, 0xc7, 0x14, 0x53, 0x3d, 0xa5, 0xe3,
		0xa5, 0x8a, 0x4d, 0xb0, 0x3b, 0x51, 0xab, 0xa2, 0x59, 0x6c, 0x72, 0x99, 0x42, 0x27, 0x8a, 0x78,
		0xd7, 0x89, 0x65, 0xe4, 0xab, 0xb2, 0x03, 0x71, 0x29, 0x4d, 0x46, 0x9e, 0x5c, 0xe3, 0x59, 0x39,
		0x3d, 0x43, 0x5a, 0x31, 0xef, 0x15, 0xa8, 0x8d, 0x3a, 0xee, 0x3f, 0x85, 0xc5, 0x0c, 0x8b, 0x19,
		0x16, 0x73, 0x75, 0x2c, 0x66, 0x90, 0xd4, 0x06, 0x0d, 0x26, 0x90, 0xd4, 0xf9, 0x64, 0x16, 0x24,
		0x75, 0x4a, 0x11, 0x00, 0x49, 0x5d, 0x52, 0x8f, 0x03, 0x24, 0x75, 0x26, 0x8f, 0xe3, 0x21, 0xd2,
		0x62, 0x60, 0x7b, 0x9c, 0x5e, 0xc7, 0x74, 0x0a, 0x18, 0xdf, 0x30, 0xbe, 0x61, 0x7c, 0xc3, 0xf8,
		0x66, 0x94, 0xff, 0x81, 0xd3, 0xb5, 0x1d, 0xd7, 0x55, 0x22, 0x8a, 0x38, 0xe9, 0xea, 0x63, 0x86,
		0xb1, 0x2f, 0x1c, 0xad, 0x85, 0x92, 0x6c, 0x46, 0x78, 0xed, 0xb2, 0x6e, 0x9f, 0x38, 0x76, 0xef,
		0xcc, 0xfe, 0x70, 0xf5, 0xb3, 0xf9, 0xb8, 0x7b, 0xba, 0xf8, 0xfd, 0xde, 0xcf, 0xf6, 0x63, 0x0d,
		0x3a, 0x34, 0xbb, 0x0e, 0x0d, 0x95, 0x17, 0x28, 0x4f, 0x3f, 0xb0, 0x6b, 0xd2, 0xe9, 0x44, 0x55,
		0x62, 0xf2, 0x0e, 0x9b, 0x47, 0x9d, 0x63, 0x90, 0x79, 0xb0, 0x27, 0x60, 0x4f, 0xc0, 0x9e, 0xa8,
		0x8e, 0x3d, 0x31, 0xf4, 0xa4, 0x6e, 0x74, 0x18, 0x4d, 0x89, 0x0e, 0xc8, 0xbc, 0x39, 0x26, 0x07,
		0x64, 0x5e, 0x25, 0x08, 0x9c, 0x6d, 0x21, 0xf3, 0x3a, 0xed, 0xf6, 0x21, 0x78, 0xbc, 0x72, 0xe8,
		0x06, 0xbe, 0x51, 0x4b, 0xeb, 0x83, 0xec, 0x94, 0xe8, 0x30, 0x72, 0x15, 0x3f, 0x96, 0xad, 0xe8,
		0xb1, 0x46, 0xe9, 0xf8, 0x15, 0x5e, 0xdb, 0x48, 0x63, 0xf0, 0xe5, 0x17, 0x44, 0x02, 0x21, 0xac,
		0x2d, 0xec, 0x15, 0x25, 0x23, 0x3d, 0x97, 0x50, 0xf5, 0x64, 0x06, 0xa2, 0xa3, 0x43, 0xeb, 0x38,
		0x92, 0x3b, 0x8c, 0x1c, 0x8e, 0x22, 0xbf, 0x83, 0xc8, 0xe5, 0x18, 0xb2, 0x3b, 0x84, 0xec, 0x8e,
		0xa0, 0x11, 0x07, 0xb0, 0x5c, 0xca, 0x89, 0xdc, 0xd1, 0xe3, 0xbb, 0x62, 0x86, 0xf8, 0x2a, 0x99,
		0x72, 0x60, 0x73, 0x14, 0xfa, 0x9e, 0xb6, 0x6f, 0x03, 0xe5, 0xfd, 0x2f, 0xa1, 0x7d, 0x30, 0x97,
		0x98, 0x38, 0x3f, 0x3c, 0x2d, 0x2a, 0x37, 0x80, 0xca, 0x40, 0x65, 0xa0, 0x32, 0x07, 0x2a, 0x53,
		0x5f, 0x6e, 0x52, 0xeb, 0xab, 0x60, 0x18, 0xda, 0x2c, 0x77, 0x31, 0x4e, 0x8f, 0xc6, 0xdc, 0x1c,
		0x88, 0x1f, 0x20, 0x7e, 0x50, 0x38, 0x30, 0x19, 0x03, 0x28, 0xa3, 0x40, 0xc5, 0xc3, 0xe6, 0x54,
		0x2f, 0x7e, 0xc0, 0x76, 0x83, 0x21, 0xd3, 0x8d, 0x85, 0x60, 0xb7, 0x2a, 0xcb, 0x6e, 0x71, 0x18,
		0xd1, 0x25, 0xa0, 0xb9, 0xbe, 0xc4, 0xaf, 0xf5, 0x7f, 0xc6, 0x6f, 0x55, 0x16, 0x97, 0x6a, 0xa7,
		0x40, 0x99, 0xa6, 0x96, 0xe5, 0x12, 0xc9, 0x70, 0x8d, 0xc2, 0x55, 0x2d, 0x52, 0x5a, 0xf3, 0x09,
		0x68, 0x76, 0xb1, 0xca, 0x21, 0x52, 0x35, 0x3f, 0xe8, 0x3a, 0xbe, 0x7d, 0xa3, 0x3c, 0xb7, 0x2f,
		0x6c, 0x25, 0x7a, 0x42, 0x09, 0x49, 0x60, 0x50, 0xcd, 0x58, 0xd7, 0xd5, 0xe3, 0xe7, 0x3c, 0x04,
		0x34, 0xc6, 0x36, 0x99, 0x71, 0x4d, 0x69, 0x4c, 0xf3, 0x19, 0xcf, 0xd4, 0xc6, 0x32, 0x9b, 0x71,
		0xcc, 0x66, 0x0c, 0xb3, 0x1a, 0xbf, 0xc5, 0xaa, 0x05, 0x32, 0x63, 0x96, 0xde, 0x78, 0x25, 0x32,
		0x56, 0x73, 0xe0, 0xe3, 0x8e, 0xc1, 0x1d, 0xa1, 0x52, 0xd0, 0x85, 0x2a, 0xe6, 0x1c, 0xbb, 0x6e,
		0x5c, 0x05, 0x67, 0x3b, 0xb9, 0xe9, 0x65, 0x22, 0x83, 0x3c, 0xd4, 0x5c, 0x11, 0x75, 0x95, 0x17,
		0xe6, 0x12, 0x86, 0xe9, 0x81, 0x9c, 0x1f, 0x2c, 0xa3, 0x6c, 0xe6, 0xd3, 0x9b, 0xb9, 0xf5, 0x25,
		0x85, 0x9e, 0xa4, 0xd7, 0x8f, 0x54, 0x7a, 0x91, 0x5c, 0x1f, 0x92, 0xeb, 0x41, 0x16, 0xfd, 0x67,
		0x16, 0x5d, 0x73, 0xeb, 0x39, 0x3a, 0xfd, 0x96, 0x53, 0xaf, 0x99, 0x41, 0x20, 0xa1, 0x6f, 0x85,
		0x92, 0x42, 0x4f, 0xf4, 0x83, 0x1d, 0x38, 0x83, 0xfc, 0x50, 0xb4, 0x72, 0xd4, 0x7c, 0x98, 0xd4,
		0x00, 0x26, 0x01, 0x93, 0xaa, 0x89, 0x49, 0x79, 0x23, 0x61, 0xb5, 0x6e, 0x6f, 0x74, 0x3d, 0x6d,
		0xc3, 0x76, 0xfa, 0x74, 0xae, 0xf7, 0xc2, 0xa8, 0x34, 0x0e, 0x77, 0x03, 0x0e, 0x37, 0x1c, 0x6e,
		0x38, 0xdc, 0x94, 0xe1, 0xef, 0x9a, 0x6c, 0xda, 0x43, 0xe9, 0xd9, 0x5d, 0xfa, 0xc4, 0x9a, 0xe9,
		0xc8, 0xc8, 0xa9, 0x29, 0x1f, 0x38, 0x70, 0x81, 0x04, 0x3b, 0x58, 0xb0, 0x83, 0x86, 0x11, 0xf0,
		0xa0, 0x01, 0x11, 0x22, 0x30, 0x21, 0x07, 0x95, 0x99, 0x65, 0xd1, 0x1d, 0xd8, 0xb7, 0x81, 0xef,
		0x6a, 0x8f, 0x33, 0xab, 0x66, 0x61, 0x16, 0xe4, 0xd5, 0x20, 0xaf, 0xa6, 0x70, 0x70, 0x32, 0x06,
		0x52, 0x46, 0xc1, 0x8a, 0x16, 0xb4, 0x88, 0xc1, 0x8b, 0x8e, 0xa2, 0x79, 0x51, 0xfe, 0xd1, 0x64,
		0x6f, 0xe9, 0x1f, 0xea, 0x72, 0x37, 0x9b, 0x07, 0x75, 0xb9, 0x99, 0x44, 0x00, 0x4d, 0xf6, 0xaa,
		0x25, 0x0b, 0xaf, 0xb3, 0x38, 0x97, 0x58, 0x91, 0x89, 0x1f, 0x5a, 0x39, 0xf6, 0x50, 0x46, 0xda,
		0xb9, 0xf1, 0x99, 0x54, 0xda, 0x7c, 0xca, 0x4d, 0xe5, 0x34, 0xc3, 0xe7, 0x69, 0x90, 0xf7, 0xfd,
		0x7b, 0xeb, 0x8b, 0x76, 0xad, 0xe3, 0x7a, 0xd3, 0x6e, 0x38, 0xfd, 0x53, 0xeb, 0x9b, 0xa7, 0xf4,
		0xd0, 0xf1, 0xad, 0xb7, 0x49, 0xe2, 0x8f, 0x6b, 0x9d, 0x07, 0x5d, 0xc7, 0xb7, 0xce, 0x94, 0x70,
		0xac, 0x71, 0x1c, 0x37, 0xfa, 0x2e, 0x97, 0x47, 0x3c, 0x1b, 0x08, 0xe9, 0xc6, 0x56, 0x94, 0xd5,
		0x3e, 0xb5, 0x26, 0x21, 0xde, 0x3b, 0x4f, 0x3f, 0x58, 0x1f, 0x9c, 0xa1, 0xaf, 0xad, 0x4f, 0x8e,
		0x74, 0xfa, 0xc9, 0xfd, 0xd4, 0x9c, 0x77, 0xfd, 0x32, 0x1b, 0xbf, 0xab, 0x8c, 0x60, 0xaa, 0xcc,
		0xa8, 0xd2, 0xd8, 0xc3, 0x2b, 0xed, 0xe2, 0x22, 0xe4, 0x04, 0x18, 0xfb, 0x0a, 0x9a, 0xb0, 0x75,
		0xbb, 0x83, 0x51, 0x1e, 0xe9, 0x9d, 0xe3, 0xf3, 0xd2, 0x1c, 0xd3, 0x59, 0x40, 0x73, 0x80, 0xe6,
		0x00, 0xcd, 0x01, 0x9a, 0x03, 0x34, 0x07, 0x68, 0x0e, 0xd0, 0x1c, 0xa0, 0x39, 0x40, 0x73, 0x80,
		0xe6, 0x00, 0xcd, 0x01, 0x9a, 0x03, 0x34, 0x07, 0x68, 0x0e, 0xd0, 0x1c, 0xa0, 0x39, 0xb8, 0x68,
		0x8e, 0xd0, 0xbe, 0xf1, 0x74, 0x64, 0x87, 0xca, 0xe3, 0x25, 0x3a, 0xe6, 0xe6, 0x01, 0xd5, 0x01,
		0xaa, 0x03, 0x54, 0x07, 0xa8, 0x0e, 0x46, 0xf9, 0x4f, 0x10, 0x67, 0x7c, 0xb3, 0x85, 0xad, 0xe3,
		0xe9, 0xf8, 0x58, 0x8f, 0x36, 0x58, 0x0f, 0xb0, 0x1e, 0x60, 0x3d, 0x8a, 0x61, 0x3d, 0x8e, 0x20,
		0x02, 0x30, 0xc4, 0x41, 0x76, 0x80, 0xec, 0x00, 0xd9, 0x01, 0xb2, 0x03, 0x64, 0x07, 0xc8, 0x8e,
		0xf5, 0x64, 0x47, 0x10, 0xd9, 0xbd, 0x40, 0xd9, 0xdd, 0xde, 0xc0, 0x0e, 0xdd, 0x61, 0xc4, 0x48,
		0x77, 0x3c, 0x9d, 0x09, 0x84, 0x07, 0x08, 0x0f, 0x10, 0x1e, 0x20, 0x3c, 0x90, 0xdb, 0x01, 0x96,
		0x03, 0x2c, 0x07, 0x58, 0x8e, 0xd4, 0x22, 0x80, 0xdc, 0x0e, 0x98, 0xe2, 0xa0, 0x3b, 0x40, 0x77,
		0x80, 0xee, 0x00, 0xdd, 0x01, 0xba, 0x03, 0x74, 0xc7, 0x06, 0x42, 0x36, 0x70, 0x08, 0x2f, 0x3d,
		0x5c, 0x82, 0xb7, 0x64, 0x74, 0xd0, 0x1a, 0xa0, 0x35, 0x40, 0x6b, 0x80, 0xd6, 0xc0, 0x8d, 0x37,
		0xb0, 0xb7, 0x61, 0x6f, 0xc3, 0xde, 0x86, 0xbd, 0x0d, 0x7b, 0xfb, 0xf5, 0xda, 0xdb, 0x22, 0xb4,
		0x59, 0x2d, 0xee, 0xd1, 0xf8, 0xb0, 0xb9, 0x61, 0x73, 0xc3, 0xe6, 0x86, 0xcd, 0x8d, 0x50, 0xe2,
		0xe2, 0xd0, 0x08, 0x25, 0x3e, 0x37, 0x09, 0x42, 0x89, 0x25, 0x3b, 0xc6, 0x8b, 0x22, 0x80, 0x50,
		0x62, 0xb5, 0x64, 0x01, 0xa1, 0x44, 0x50, 0x1b, 0xa0, 0x36, 0x40, 0x6d, 0x80, 0xda, 0x00, 0xc6,
		0xbe, 0x12, 0x6a, 0xc3, 0x17, 0x77, 0xc2, 0xe7, 0x65, 0x37, 0x46, 0x53, 0x80, 0xe0, 0x00, 0xc1,
		0x01, 0x82, 0x03, 0x04, 0x07, 0x08, 0x0e, 0x10, 0x1c, 0x20, 0x38, 0x40, 0x70, 0x80, 0xe0, 0x00,
		0xc1, 0x01, 0x82, 0x03, 0x04, 0x07, 0x08, 0x0e, 0x10, 0x1c, 0x20, 0x38, 0x40, 0x70, 0x70, 0x11,
		0x1c, 0xc3, 0xd0, 0x76, 0x83, 0x7b, 0xc9, 0x4b, 0x71, 0x4c, 0x26, 0x01, 0xc9, 0x01, 0x92, 0x03,
		0x24, 0x07, 0x48, 0x0e, 0x46, 0xf9, 0x17, 0x72, 0x38, 0x10, 0xca, 0x89, 0x1d, 0x14, 0xce, 0xf4,
		0xe9, 0x16, 0xc3, 0xd8, 0xef, 0xe5, 0x70, 0xc0, 0x77, 0xac, 0xbe, 0x06, 0x5f, 0x46, 0x49, 0xe5,
		0x9c, 0x06, 0x5a, 0xad, 0x9e, 0x10, 0x4d, 0x21, 0xa7, 0x9d, 0xd9, 0x88, 0xa7, 0x48, 0xd4, 0xc9,
		0x4e, 0x85, 0x08, 0x81, 0xda, 0xd7, 0xe0, 0x63, 0x82, 0x00, 0x8c, 0x8b, 0x3f, 0x56, 0xe4, 0x0d,
		0xc6, 0xc5, 0x1f, 0x86, 0xb1, 0x5e, 0xac, 0x88, 0x0d, 0xf7, 0x08, 0x3f, 0x19, 0x7e, 0x32, 0xfc,
		0x64, 0xf8, 0xc9, 0xf0, 0x93, 0xe1, 0x27, 0xe7, 0x42, 0xd1, 0x41, 0xa0, 0x85, 0xcd, 0x5d, 0xea,
		0xb0, 0x38, 0x0d, 0x7c, 0x65, 0xf8, 0xca, 0xf0, 0x95, 0xe1, 0x2b, 0x23, 0x21, 0x60, 0x71, 0x68,
		0x24, 0x04, 0x3c, 0x37, 0x09, 0x12, 0x02, 0x4a, 0xea, 0xff, 0x5b, 0x48, 0x08, 0xa8, 0xa0, 0x2c,
		0x20, 0x21, 0x00, 0x44, 0x07, 0x88, 0x0e, 0x10, 0x1d, 0x20, 0x3a, 0x80, 0xb1, 0x65, 0x25, 0x3a,
		0x76, 0x4a, 0x84, 0xf9, 0xf1, 0x59, 0x24, 0xee, 0x93, 0x56, 0x3b, 0xf7, 0x22, 0x7d, 0xa6, 0xb5,
		0x22, 0x05, 0x92, 0xd8, 0x1a, 0x7f, 0xef, 0x27, 0xa2, 0x4d, 0x6c, 0xb1, 0xc4, 0x46, 0xde, 0xdc,
		0xc8, 0x8d, 0xe3, 0x56, 0xab, 0x73, 0xd4, 0x6a, 0xd5, 0x8f, 0x0e, 0x8f, 0xea, 0x27, 0xed, 0x76,
		0xa3, 0xd3, 0x20, 0xb4, 0xc7, 0x6a, 0xbf, 0x2b, 0x57, 0x28, 0xe1, 0xbe, 0x8d, 0x57, 0x5d, 0x0e,
		0x7d, 0x9f, 0x63, 0xe8, 0x3f, 0x23, 0xa1, 0x48, 0x4d, 0x2d, 0x2a, 0x61, 0x3b, 0x93, 0x32, 0xd0,
		0xa3, 0x50, 0x2f, 0xa9, 0x6c, 0x44, 0xdd, 0x5b, 0x31, 0x70, 0x42, 0x47, 0xdf, 0xc6, 0xb2, 0x7c,
		0xb0, 0x48, 0x43, 0xd8, 0xf1, 0x7f, 0x23, 0xa1, 0xee, 0xbc, 0xae, 0x88, 0x0e, 0xe6, 0xbe, 0x49,
		0xbe, 0x96, 0x81, 0x3b, 0xfe, 0x69, 0xfc, 0xd5, 0xe8, 0x8b, 0x11, 0x00, 0xdb, 0x4e, 0xb7, 0x2b,
		0xa2, 0x68, 0xf2, 0xdb, 0x85, 0x1f, 0x1e, 0x08, 0x7d, 0x2b, 0x94, 0x14, 0x7a, 0x32, 0x96, 0x1d,
		0x38, 0x83, 0x83, 0x6e, 0x6f, 0x60, 0x1f, 0xd7, 0x9b, 0xfb, 0x0d, 0xdb, 0xe9, 0x1f, 0xc8, 0xa6,
		0x3d, 0x94, 0x9e, 0xdd, 0x25, 0x54, 0x6c, 0xb5, 0x48, 0xab, 0x61, 0x57, 0xcb, 0xa9, 0xf5, 0xf1,
		0xf5, 0xc3, 0x79, 0xf3, 0x5b, 0x28, 0x3f, 0xeb, 0xfb, 0x6f, 0xa1, 0xfc, 0x32, 0x7e, 0xc5, 0xeb,
		0xd9, 0xd7, 0xf1, 0x97, 0x9f, 0xe3, 0x17, 0x9c, 0x7c, 0x91, 0xfc, 0x77, 0xf4, 0x26, 0x67, 0xe3,
		0xb7, 0x5b, 0xfa, 0xd1, 0xf5, 0xfb, 0xf1, 0xbb, 0x8d, 0x07, 0xf9, 0xdd, 0x19, 0x5c, 0xff, 0xd6,
		0x1b, 0x5c, 0x1f, 0xd7, 0x9b, 0xd7, 0x8d, 0xb3, 0xfe, 0xf5, 0xe7, 0xe6, 0x9f, 0xd2, 0xfb, 0x8d,
		0x46, 0xbf, 0xe4, 0xc7, 0x42, 0x02, 0xd1, 0xac, 0x8d, 0xb7, 0x8a, 0x4e, 0x28, 0xa7, 0x06, 0xe2,
		0x74, 0x64, 0x2a, 0xb4, 0x1e, 0x67, 0x33, 0x10, 0x0d, 0x47, 0x4d, 0x06, 0x73, 0x90, 0xc0, 0xfc,
		0xe4, 0x2f, 0x97, 0xdd, 0xcb, 0x4e, 0xf6, 0xb2, 0x1b, 0xb5, 0x46, 0xc8, 0xdd, 0x72, 0xd9, 0x43,
		0xef, 0x3c, 0x62, 0xbb, 0xa5, 0xdb, 0x1d, 0xd8, 0xb7, 0x81, 0xef, 0x6a, 0x6f, 0x20, 0x78, 0x6f,
		0x2e, 0x9e, 0xce, 0x82, 0x48, 0x14, 0x22, 0x51, 0x85, 0x83, 0x93, 0x71, 0xcf, 0x1b, 0x91, 0xa8,
		0xe9, 0x4a, 0x20, 0x12, 0xb5, 0x72, 0x68, 0x44, 0xa2, 0x9e, 0x9b, 0x04, 0x91, 0xa8, 0x92, 0x1d,
		0xe3, 0xa7, 0x24, 0x05, 0x22, 0x51, 0x55, 0x92, 0x05, 0x44, 0xa2, 0x08, 0xb6, 0x0b, 0x91, 0xa8,
		0x0d, 0xf5, 0x31, 0x22, 0x51, 0x79, 0x8d, 0x60, 0x44, 0xa2, 0x10, 0x89, 0xaa, 0x06, 0xc6, 0x96,
		0xf3, 0xd6, 0xe2, 0xee, 0xc0, 0xf6, 0xa4, 0x16, 0xea, 0xce, 0xf1, 0x79, 0x69, 0x8e, 0xe9, 0x2c,
		0xa0, 0x39, 0x40, 0x73, 0x80, 0xe6, 0x00, 0xcd, 0x01, 0x9a, 0x03, 0x34, 0x07, 0x68, 0x0e, 0xd0,
		0x1c, 0xa0, 0x39, 0x40, 0x73, 0x80, 0xe6, 0x00, 0xcd, 0x01, 0x9a, 0x03, 0x34, 0x07, 0x68, 0x0e,
		0xd0, 0x1c, 0x5c, 0x34, 0x47, 0x68, 0xdf, 0x78, 0x3a, 0xb2, 0x43, 0xe5, 0xf1, 0x12, 0x1d, 0x73,
		0xf3, 0x80, 0xea, 0x00, 0xd5, 0x01, 0xaa, 0x03, 0x54, 0x07, 0xa3, 0xfc, 0x27, 0x88, 0xa3, 0xbc,
		0x40, 0x79, 0xfa, 0xc1, 0xd6, 0xf1, 0x74, 0x7c, 0xac, 0x47, 0x1b, 0xac, 0x07, 0x58, 0x0f, 0xb0,
		0x1e, 0xc5, 0xb0, 0x1e, 0x47, 0x10, 0x01, 0x18, 0xe2, 0x20, 0x3b, 0x40, 0x76, 0x80, 0xec, 0x00,
		0xd9, 0x01, 0xb2, 0x03, 0x64, 0xc7, 0x7a, 0xb2, 0x23, 0x88, 0xec, 0x5e, 0xa0, 0xec, 0x6e, 0x6f,
		0x60, 0x87, 0xee, 0x30, 0x62, 0xa4, 0x3b, 0x9e, 0xce, 0x04, 0xc2, 0x03, 0x84, 0x07, 0x08, 0x0f,
		0x10, 0x1e, 0xc8, 0xed, 0x00, 0xcb, 0x01, 0x96, 0x03, 0x2c, 0x47, 0x6a, 0x11, 0x40, 0x6e, 0x07,
		0x4c, 0x71, 0xd0, 0x1d, 0xa0, 0x3b, 0x40, 0x77, 0x80, 0xee, 0x00, 0xdd, 0x01, 0xba, 0x63, 0x03,
		0x21, 0x4b, 0x7a, 0xa0, 0xf1, 0x5d, 0xab, 0xe6, 0xa0, 0x47, 0x3c, 0x68, 0x0d, 0xd0, 0x1a, 0xa0,
		0x35, 0x78, 0xe5, 0x3f, 0x1a, 0x5d, 0x1a, 0xc6, 0x78, 0x95, 0xda, 0x31, 0xec, 0x6d, 0xd8, 0xdb,
		0xb0, 0xb7, 0x61, 0x6f, 0xc3, 0xde, 0x86, 0xbd, 0x9d, 0xc7, 0xde, 0x66, 0xbe, 0x9e, 0x09, 0xf7,
		0x32, 0xc1, 0xe6, 0x86, 0xcd, 0x0d, 0x9b, 0x1b, 0xa1, 0xc4, 0x95, 0x43, 0x23, 0x94, 0xf8, 0xdc,
		0x24, 0x08, 0x25, 0x96, 0xec, 0x18, 0x2f, 0x8a, 0x00, 0x42, 0x89, 0xd5, 0x92, 0x05, 0x84, 0x12,
		0x41, 0x6d, 0x80, 0xda, 0x00, 0xb5, 0x01, 0x6a, 0x03, 0x18, 0xfb, 0x4a, 0xa8, 0x0d, 0x5f, 0xdc,
		0x09, 0x9f, 0x97, 0xdd, 0x18, 0x4d, 0x01, 0x82, 0x03, 0x04, 0x07, 0x08, 0x0e, 0x10, 0x1c, 0x20,
		0x38, 0x40, 0x70, 0x80, 0xe0, 0x00, 0xc1, 0x01, 0x82, 0x03, 0x04, 0x07, 0x08, 0x0e, 0x10, 0x1c,
		0x20, 0x38, 0x40, 0x70, 0x80, 0xe0, 0x00, 0xc1, 0xc1, 0x45, 0x70, 0x0c, 0x43, 0xdb, 0x0d, 0xee,
		0x25, 0x2f, 0xc5, 0x31, 0x99, 0x04, 0x24, 0x07, 0x48, 0x0e, 0x90, 0x1c, 0x20, 0x39, 0x18, 0xe5,
		0x5f, 0xc8, 0xe1, 0x40, 0xa8, 0xd1, 0xf5, 0xe4, 0x8c, 0xe9, 0xd3, 0x2d, 0x86, 0xb1, 0xdf, 0xcb,
		0xe1, 0x80, 0xef, 0x58, 0x7d, 0x0d, 0xbe, 0x8c, 0x92, 0xca, 0x39, 0x0d, 0xb4, 0x5a, 0x3d, 0x21,
		0x9a, 0x42, 0x4e, 0x3b, 0xb3, 0x11, 0x4f, 0x91, 0xa8, 0x93, 0x9d, 0x0a, 0x11, 0x02, 0xb5, 0xaf,
		0xc1, 0xc7, 0x04, 0x01, 0x18, 0x17, 0x7f, 0xac, 0xc8, 0x1b, 0x8c, 0x8b, 0x3f, 0x0c, 0x63, 0xbd,
		0x58, 0x11, 0x1b, 0xee, 0x11, 0x7e, 0x32, 0xfc, 0x64, 0xf8, 0xc9, 0xf0, 0x93, 0xe1, 0x27, 0xc3,
		0x4f, 0xce, 0x85, 0xa2, 0x83, 0x40, 0x0b, 0x9b, 0xbb, 0xd4, 0x61, 0x71, 0x1a, 0xf8, 0xca, 0xf0,
		0x95, 0xe1, 0x2b, 0xc3, 0x57, 0x46, 0x42, 0xc0, 0xe2, 0xd0, 0x48, 0x08, 0x78, 0x6e, 0x12, 0x24,
		0x04, 0x94, 0xd4, 0xff, 0xb7, 0x90, 0x10, 0x50, 0x41, 0x59, 0x40, 0x42, 0x00, 0x88, 0x0e, 0x10,
		0x1d, 0x20, 0x3a, 0x40, 0x74, 0x00, 0x63, 0xcb, 0x4a, 0x74, 0xec, 0x94, 0x08, 0xf3, 0xe3, 0xb3,
		0x48, 0xdc, 0x27, 0xad, 0x76, 0xee, 0x45, 0xfa, 0x4c, 0x6b, 0x45, 0x0a, 0x24, 0xb1, 0x35, 0xfe,
		0xde, 0x4f, 0x44, 0x9b, 0xd8, 0x62, 0x89, 0x8d, 0xbc, 0xb9, 0x91, 0x1b, 0xc7, 0xad, 0x56, 0xe7,
		0xa8, 0xd5, 0xaa, 0x1f, 0x1d, 0x1e, 0xd5, 0x4f, 0xda, 0xed, 0x46, 0xa7, 0x41, 0x68, 0x8f, 0xd5,
		0x7e, 0x57, 0xae, 0x50, 0xc2, 0x7d, 0x1b, 0xaf, 0xba, 0x1c, 0xfa, 0x3e, 0xc7, 0xd0, 0x7f, 0x46,
		0x42, 0x91, 0x9a, 0x5a, 0x54, 0xc2, 0x76, 0x26, 0x65, 0xa0, 0x47, 0xa1, 0x5e, 0x52, 0xd9, 0x88,
		0xba, 0xb7, 0x62, 0xe0, 0x84, 0x8e, 0xbe, 0x8d, 0x65, 0xf9, 0x60, 0x91, 0x86, 0xb0, 0xe3, 0xff,
		0x46, 0x42, 0xdd, 0x79, 0x5d, 0x11, 0x1d, 0xcc, 0x7d, 0x93, 0x7c, 0x2d, 0x03, 0x77, 0xfc, 0xd3,
		0xf8, 0xab, 0xd1, 0x17, 0x23, 0x00, 0xb6, 0x9d, 0x6e, 0x57, 0x44, 0xd1, 0xe4, 0xb7, 0x0b, 0x3f,
		0x3c, 0x10, 0xfa, 0x56, 0x28, 0x29, 0xf4, 0x64, 0x2c, 0x3b, 0x70, 0x06, 0x07, 0xdd, 0xde, 0xc0,
		0x3e, 0xae, 0x37, 0xf7, 0x1b, 0xb6, 0xd3, 0x3f, 0x90, 0x4d, 0x7b, 0x28, 0x3d, 0x9b, 0x32, 0xa8,
		0x5d, 0x8b, 0xb4, 0x1a, 0x76, 0xb5, 0x9c, 0x5a, 0x1f, 0x5f, 0x3f, 0x9c, 0x37, 0xbf, 0x85, 0xf2,
		0xb3, 0xbe, 0xff, 0x16, 0xca, 0x2f, 0xe3, 0x57, 0xbc, 0x9e, 0x7d, 0x1d, 0x7f, 0xf9, 0x39, 0x7e,
		0xc1, 0xc9, 0x17, 0xc9, 0x7f, 0x47, 0x6f, 0x72, 0x36, 0x7e, 0xbb, 0xa5, 0x1f, 0x5d, 0xbf, 0x1f,
		0xbf, 0xdb, 0x78, 0x90, 0xdf, 0x9d, 0xc1, 0xf5, 0x6f, 0xbd, 0xc1, 0xf5, 0x71, 0xbd, 0x79, 0xdd,
		0x38, 0xeb, 0x5f, 0x7f, 0x6e, 0xfe, 0x29, 0xbd, 0xcf, 0x34, 0xfa, 0x25, 0x3f, 0x16, 0xe6, 0x1b,
		0x21, 0xa7, 0x60, 0x53, 0x0b, 0x74, 0x19, 0x05, 0x99, 0x40, 0x7e, 0x4b, 0x21, 0xb7, 0xf9, 0x04,
		0x36, 0xbb, 0x98, 0xe5, 0x10, 0xb1, 0xda, 0xc0, 0x25, 0xaa, 0x67, 0x9c, 0x25, 0xf7, 0xb9, 0x24,
		0xe5, 0x8b, 0x44, 0xd1, 0x09, 0xb2, 0x68, 0x04, 0x65, 0xf4, 0x81, 0x2f, 0xda, 0x40, 0xed, 0x60,
		0xb1, 0x45, 0x13, 0xd8, 0xbc, 0x25, 0xd6, 0x68, 0x41, 0xb1, 0xaa, 0x80, 0x8c, 0xfd, 0x5f, 0x60,
		0xfb, 0x8f, 0x29, 0xc4, 0x8e, 0xee, 0xfe, 0x57, 0x62, 0x32, 0x9f, 0xd6, 0x3d, 0xa0, 0x0f, 0xf4,
		0x32, 0x91, 0xf3, 0xec, 0x04, 0x2c, 0x1f, 0xe1, 0xfa, 0x48, 0xeb, 0x77, 0xf1, 0x6d, 0x59, 0xb3,
		0xdd, 0xc6, 0xa6, 0xd1, 0x32, 0x0e, 0x3b, 0xc5, 0x32, 0x32, 0x85, 0x99, 0x60, 0x63, 0xbb, 0x95,
		0xce, 0x02, 0x4b, 0x06, 0x84, 0x01, 0x06, 0x03, 0x0c, 0x06, 0x58, 0xa9, 0x0d, 0x30, 0xb2, 0xa6,
		0xee, 0x44, 0x4d, 0xdc, 0x8b, 0x41, 0xc0, 0x07, 0xbb, 0x71, 0x74, 0xd8, 0xa0, 0x03, 0xc0, 0xf1,
		0x78, 0x34, 0xf8, 0xd7, 0x00, 0xfe, 0x01, 0xff, 0x80, 0x7f, 0xf1, 0x9b, 0xbd, 0xf3, 0x68, 0x22,
		0x2e, 0xb5, 0x6e, 0x40, 0x77, 0xe7, 0xf0, 0xfc, 0x5d, 0xc3, 0x54, 0xb2, 0x41, 0x9b, 0x19, 0x4b,
		0x9e, 0x11, 0xcb, 0x91, 0x09, 0xcb, 0x9f, 0x01, 0xcb, 0x15, 0xfc, 0x67, 0xcf, 0x78, 0x65, 0x8f,
		0xec, 0x1b, 0xc9, 0x70, 0x2d, 0x57, 0x50, 0x98, 0x3c, 0x93, 0x95, 0x2f, 0x83, 0x95, 0x21, 0x73,
		0x95, 0x29, 0x63, 0x95, 0x21, 0x89, 0x8a, 0x33, 0x43, 0x95, 0x3b, 0x33, 0xd5, 0x58, 0x16, 0x22,
		0x7f, 0xf6, 0x21, 0x43, 0x06, 0x2a, 0x6b, 0xe6, 0xa9, 0xb1, 0x8c, 0xd3, 0x6d, 0xda, 0xe3, 0x92,
		0x66, 0x13, 0x5d, 0x95, 0x25, 0x0e, 0x4f, 0xe0, 0x9d, 0xb8, 0xc2, 0x77, 0x1e, 0xec, 0x81, 0x70,
		0xa2, 0xa1, 0x12, 0x63, 0x8d, 0x4b, 0x6c, 0x86, 0x2e, 0x4f, 0x41, 0x6b, 0x94, 0x36, 0x60, 0x94,
		0xc2, 0x28, 0x85, 0x51, 0xca, 0x61, 0x94, 0x52, 0xf9, 0xb7, 0xd3, 0x01, 0x85, 0x74, 0x6e, 0x7c,
		0x61, 0xbb, 0x03, 0xbe, 0x0a, 0xd1, 0xd9, 0x14, 0xa8, 0x0e, 0x45, 0x75, 0x68, 0xe1, 0xb0, 0x64,
		0x0c, 0x9e, 0x8c, 0xc2, 0x14, 0x93, 0x89, 0x56, 0xb9, 0xea, 0xd0, 0x9b, 0x20, 0xf0, 0x85, 0xc3,
		0xda, 0x45, 0xa9, 0xf1, 0x0a, 0x9a, 0x07, 0xe8, 0xfb, 0xc0, 0xbe, 0x77, 0x1e, 0xf8, 0x94, 0xc2,
		0x64, 0x02, 0xa8, 0x04, 0xa8, 0x04, 0xa8, 0x04, 0xa8, 0x04, 0xa8, 0x04, 0x16, 0x95, 0x80, 0xca,
		0x17, 0x73, 0x05, 0x03, 0xa3, 0x98, 0xfe, 0x01, 0x17, 0xbb, 0x62, 0x15, 0x5a, 0x44, 0xf0, 0x7f,
		0xaf, 0xe3, 0x97, 0xbb, 0x7e, 0x17, 0xbf, 0xdc, 0xa7, 0xb9, 0x77, 0xdb, 0x22, 0xe6, 0xad, 0xa7,
		0x9c, 0x81, 0xb0, 0x23, 0xef, 0x7f, 0x05, 0x3d, 0xe5, 0x36, 0x37, 0x36, 0x02, 0xc0, 0xe0, 0xda,
		0xc0, 0xb5, 0x55, 0x40, 0x5d, 0x21, 0x00, 0x8c, 0x00, 0x30, 0x02, 0xc0, 0x45, 0x39, 0x06, 0x16,
		0x02, 0xc0, 0x25, 0xdc, 0x63, 0x04, 0x80, 0xd9, 0xcd, 0x50, 0x3f, 0x88, 0x22, 0xde, 0xf8, 0xef,
		0xd2, 0x0c, 0x30, 0x49, 0x61, 0x92, 0xc2, 0x24, 0x7d, 0xd5, 0x26, 0x29, 0x3d, 0x49, 0x46, 0x4c,
		0x8e, 0x95, 0x03, 0x9c, 0x93, 0x16, 0x41, 0xe4, 0x80, 0x4c, 0xd9, 0x78, 0x08, 0x20, 0x0c, 0x10,
		0x06, 0x08, 0x57, 0x13, 0x84, 0xc9, 0x6a, 0xed, 0x96, 0x30, 0xf8, 0x78, 0x9b, 0x30, 0x78, 0x66,
		0xb9, 0xda, 0x9e, 0xd4, 0x42, 0xdd, 0x39, 0x3e, 0x03, 0x26, 0xaf, 0x9a, 0x05, 0x18, 0x0d, 0x8c,
		0x06, 0x46, 0xbf, 0x6a, 0x8c, 0x06, 0x77, 0x4b, 0x29, 0x99, 0xe0, 0x6e, 0x37, 0x92, 0x3d, 0x70,
		0xb7, 0x6b, 0xb6, 0x16, 0xdc, 0xad, 0x61, 0x80, 0xa6, 0x1f, 0xed, 0x6a, 0xab, 0x4c, 0x53, 0xd2,
		0xcb, 0x96, 0x16, 0xae, 0x23, 0x06, 0x45, 0x00, 0xf3, 0x13, 0xe6, 0x27, 0xcc, 0x4f, 0x98, 0x9f,
		0x30, 0x3f, 0x61, 0x7e, 0xc2, 0xfc, 0x84, 0xf9, 0x09, 0xf3, 0x73, 0xc9, 0xfc, 0x8c, 0x22, 0xa7,
		0x2f, 0xec, 0x50, 0x28, 0x2f, 0x60, 0x31, 0x43, 0x17, 0xc6, 0x87, 0x39, 0x0a, 0x73, 0x14, 0xe6,
		0x28, 0xcc, 0x51, 0x98, 0xa3, 0x30, 0x47, 0x61, 0x8e, 0xc2, 0x1c, 0x85, 0x39, 0x0a, 0x73, 0x74,
		0x7e, 0x13, 0xc3, 0x81, 0xad, 0x29, 0x35, 0xcf, 0x54, 0xeb, 0x4c, 0x06, 0x86, 0x01, 0x0a, 0x03,
		0x14, 0x06, 0xe8, 0xab, 0x36, 0x40, 0x3d, 0x57, 0x48, 0xed, 0xe9, 0x07, 0x25, 0x7a, 0x1c, 0x79,
		0x53, 0x94, 0xb7, 0x1e, 0x7e, 0x1c, 0x3f, 0xea, 0x5b, 0x27, 0x12, 0x7c, 0x8d, 0x35, 0x68, 0xb1,
		0x71, 0xd1, 0xc4, 0x88, 0x58, 0xee, 0x29, 0x66, 0x32, 0x8a, 0x16, 0xba, 0xdd, 0xd5, 0xaa, 0x60,
		0x24, 0x32, 0x2f, 0x84, 0x1f, 0x44, 0x51, 0xd9, 0xbb, 0x4b, 0x5c, 0x6d, 0xdd, 0x7d, 0x2f, 0x14,
		0x86, 0x94, 0x12, 0x83, 0x40, 0x0b, 0x9b, 0x2b, 0xba, 0xbc, 0x38, 0x3c, 0x8c, 0x2a, 0x18, 0x55,
		0x30, 0xaa, 0x5e, 0xb5, 0x51, 0x05, 0x56, 0x8f, 0x94, 0xfa, 0x01, 0xab, 0x57, 0x0a, 0xc6, 0x07,
		0xac, 0xde, 0xf6, 0xef, 0x31, 0x58, 0x3d, 0x76, 0x63, 0x34, 0x12, 0x51, 0xe4, 0x05, 0x92, 0x89,
		0xda, 0x5b, 0x18, 0x1d, 0xa6, 0x28, 0x4c, 0x51, 0x98, 0xa2, 0xaf, 0xda, 0x14, 0x15, 0x72, 0x38,
		0x10, 0x6a, 0xd4, 0x34, 0x90, 0x81, 0xdf, 0x6b, 0x11, 0x8e, 0xf9, 0x5e, 0x0e, 0x19, 0xba, 0xa8,
		0x7f, 0x0d, 0xbe, 0x8c, 0xaa, 0x42, 0x59, 0x7a, 0x64, 0xd6, 0x47, 0xc7, 0x2c, 0x88, 0x0d, 0x80,
		0x3b, 0xc1, 0xd1, 0x22, 0xb3, 0x11, 0xcf, 0x10, 0x48, 0xdb, 0x15, 0x03, 0x47, 0xba, 0xb5, 0x72,
		0xf7, 0x22, 0x0d, 0x3e, 0x12, 0xf6, 0x5b, 0x59, 0x18, 0x7a, 0xb6, 0x02, 0x64, 0xf7, 0x63, 0x2c,
		0x8c, 0x3f, 0xdb, 0xc3, 0x53, 0xab, 0xbe, 0xdd, 0xdd, 0x48, 0xcb, 0x61, 0x05, 0x3d, 0x48, 0x7d,
		0x2b, 0xf4, 0xad, 0xd7, 0xb5, 0xf9, 0x1b, 0xf6, 0x3c, 0x37, 0x19, 0x6c, 0x24, 0xd8, 0x48, 0xb0,
		0x91, 0x5e, 0xb5, 0x8d, 0xf4, 0x1a, 0x7a, 0xf7, 0x14, 0x7a, 0xab, 0xec, 0x7f, 0x8b, 0x07, 0xa2,
		0x36, 0x3d, 0xb5, 0x73, 0x2f, 0xd2, 0x67, 0x5a, 0x13, 0xdd, 0x52, 0xfb, 0xc9, 0x93, 0xef, 0xfd,
		0x44, 0x0f, 0x10, 0xd1, 0x36, 0xb5, 0x4f, 0xce, 0x8f, 0xb9, 0x11, 0x1b, 0xc7, 0xad, 0x56, 0xe7,
		0xa8, 0xd5, 0xaa, 0x1f, 0x1d, 0x1e, 0xd5, 0x4f, 0xda, 0xed, 0x46, 0x87, 0x22, 0x22, 0x5e, 0xfb,
		0x5d, 0xb9, 0x42, 0x09, 0xf7, 0x6d, 0xbc, 0xaa, 0x72, 0xe8, 0xfb, 0x94, 0x43, 0xfe, 0x19, 0x09,
		0x45, 0xc2, 0x2f, 0xe5, 0x15, 0x1a, 0xf1, 0x43, 0x2b, 0xc7, 0x1e, 0xca, 0x48, 0x3b, 0x37, 0x3e,
		0xd1, 0xa5, 0xec, 0x4a, 0xf4, 0x84, 0x12, 0xb2, 0x4b, 0xc7, 0x7b, 0x33, 0xc0, 0xd1, 0xc7, 0xaf,
		0x7f, 0xda, 0x5f, 0xad, 0xff, 0x9b, 0x74, 0x43, 0x3f, 0xb5, 0xac, 0xdf, 0xc3, 0xb1, 0xff, 0x16,
		0xbd, 0xb1, 0x1c, 0x77, 0xe0, 0x49, 0x2f, 0xd2, 0xa3, 0x1f, 0x58, 0x8e, 0x74, 0xad, 0x81, 0xe3,
		0x49, 0x2d, 0xa4, 0x23, 0xbb, 0xe2, 0xbb, 0x7c, 0x32, 0xe4, 0xee, 0xef, 0x67, 0x9f, 0xf6, 0xac,
		0xde, 0x50, 0x26, 0xf4, 0x64, 0x34, 0xfa, 0x7b, 0xd1, 0xbd, 0x75, 0xa4, 0x17, 0x0d, 0x22, 0xab,
		0x17, 0xa8, 0xa5, 0x8f, 0x4c, 0x5a, 0x97, 0xdb, 0x37, 0x4e, 0x24, 0x5c, 0x6b, 0xdc, 0xb7, 0x3d,
		0xaa, 0x98, 0x52, 0x9f, 0xed, 0x73, 0x95, 0xf5, 0x7a, 0x29, 0x05, 0x61, 0xeb, 0xbc, 0x99, 0xab,
		0x42, 0x51, 0x8e, 0xf8, 0x4e, 0x87, 0x72, 0xdd, 0xe5, 0x50, 0xa3, 0x70, 0x14, 0x8b, 0xbd, 0xb1,
		0x21, 0x9f, 0xbc, 0x67, 0x97, 0xce, 0x6c, 0x9f, 0xcc, 0x28, 0x8d, 0x54, 0x52, 0x58, 0x12, 0xe9,
		0xcb, 0x21, 0x76, 0x85, 0x89, 0x5b, 0x36, 0x39, 0x4b, 0x2f, 0x25, 0x19, 0x24, 0xa4, 0xd6, 0xf7,
		0x83, 0x1b, 0xc7, 0xb7, 0x43, 0x47, 0x39, 0x03, 0xa1, 0x85, 0x8a, 0xec, 0x50, 0x05, 0x3d, 0x2f,
		0x87, 0x51, 0x36, 0xb5, 0x75, 0xd6, 0x0f, 0x9d, 0x51, 0x92, 0xf3, 0xf1, 0x30, 0xb9, 0x79, 0x17,
		0x0a, 0x9e, 0x85, 0x9e, 0x57, 0xa1, 0x32, 0xb9, 0xc8, 0x79, 0x13, 0x72, 0x7b, 0x8a, 0x85, 0x17,
		0x31, 0x8b, 0xc5, 0xb9, 0x79, 0x0e, 0xba, 0x76, 0x98, 0x39, 0xdb, 0x5f, 0x1a, 0x42, 0x27, 0x15,
		0x0c, 0x43, 0x02, 0x24, 0x4a, 0x86, 0xc9, 0x87, 0x3a, 0x0d, 0xa0, 0x0e, 0x50, 0xa7, 0x9a, 0xa8,
		0x93, 0xf7, 0x62, 0xec, 0xda, 0x9c, 0x21, 0xd6, 0x1f, 0x35, 0x7d, 0x4d, 0xca, 0x35, 0x7a, 0x9e,
		0xc8, 0xcf, 0xd5, 0xcd, 0xa2, 0xd9, 0xcf, 0x4c, 0x92, 0x97, 0xa3, 0x24, 0x09, 0xe0, 0x90, 0x05,
		0x6e, 0x28, 0x03, 0x36, 0x7c, 0x81, 0x1a, 0x6a, 0x2e, 0x87, 0x2d, 0x30, 0xc3, 0x46, 0xdc, 0xb0,
		0x06, 0x62, 0x8a, 0x65, 0xed, 0xc9, 0x02, 0x2e, 0xf4, 0xfd, 0xb9, 0x89, 0xfa, 0x72, 0xe7, 0x70,
		0xcf, 0x73, 0xa8, 0xc5, 0xc4, 0xd2, 0xa0, 0x28, 0x44, 0x59, 0xb4, 0x5d, 0xf2, 0xd7, 0x9e, 0x00,
		0x03, 0x81, 0x81, 0xc0, 0x40, 0x60, 0xa0, 0x01, 0x0c, 0x0c, 0x95, 0xe8, 0x0a, 0x77, 0x1c, 0x89,
		0x23, 0x42, 0xc1, 0xb9, 0x31, 0x81, 0x83, 0xc0, 0x41, 0xe0, 0x60, 0xa9, 0x71, 0x90, 0xb6, 0xf1,
		0x00, 0x65, 0xc3, 0x01, 0x9e, 0x46, 0x03, 0x2b, 0x60, 0x8a, 0xb4, 0x48, 0x83, 0xa1, 0xc1, 0x00,
		0x57, 0x87, 0x05, 0xe5, 0x0d, 0x1c, 0x45, 0xd8, 0x52, 0x80, 0x30, 0x8d, 0x99, 0xe9, 0x95, 0x23,
		0xd1, 0x0d, 0xa4, 0x4b, 0xfb, 0xd2, 0x24, 0x23, 0x5d, 0x15, 0x8d, 0x4b, 0x15, 0xa1, 0xc7, 0xc6,
		0x19, 0x6c, 0x39, 0x1d, 0x2d, 0x9a, 0xec, 0x35, 0xba, 0xac, 0x35, 0xd6, 0x6c, 0x35, 0xc2, 0x2c,
		0x35, 0xc2, 0xec, 0xb4, 0xd7, 0x17, 0x21, 0xcf, 0x13, 0xd8, 0xb0, 0xcc, 0x85, 0xc4, 0xff, 0x95,
		0x3c, 0x66, 0x89, 0xe3, 0x4c, 0x39, 0x08, 0x9b, 0x39, 0xa3, 0x07, 0x71, 0x6d, 0x44, 0x98, 0xca,
		0xe2, 0x5a, 0x54, 0x35, 0xae, 0x1d, 0xbf, 0x78, 0x2e, 0xb2, 0xb3, 0x12, 0x71, 0xed, 0xe4, 0xd2,
		0xc4, 0x9e, 0xd3, 0x15, 0x36, 0x09, 0xf2, 0xcc, 0x8f, 0x06, 0x0c, 0x02, 0x06, 0x01, 0x83, 0xf2,
		0x79, 0x74, 0xaf, 0x22, 0xb7, 0x66, 0x6c, 0x7e, 0xe6, 0x87, 0x9f, 0xc9, 0x40, 0xc8, 0xaf, 0x01,
		0xf2, 0xbc, 0x4a, 0xe4, 0xc9, 0x9d, 0x5f, 0x73, 0xa3, 0x02, 0xc7, 0xed, 0x3a, 0x91, 0xb6, 0x87,
		0xf2, 0x2f, 0x19, 0xdc, 0x4b, 0x7b, 0x28, 0xbd, 0xe4, 0xfb, 0xc1, 0xd0, 0xd7, 0xc9, 0x57, 0x74,
		0xa1, 0x94, 0x4d, 0x26, 0xa3, 0x89, 0xb1, 0x34, 0x10, 0x63, 0x29, 0xe0, 0xc8, 0xb3, 0x1d, 0x7d,
		0x36, 0x08, 0x60, 0x85, 0x02, 0x22, 0x2e, 0x33, 0xa7, 0x04, 0xe6, 0x85, 0x88, 0x19, 0x54, 0x0c,
		0x07, 0x76, 0x70, 0x27, 0x94, 0xe3, 0xfb, 0xb6, 0x72, 0x34, 0x43, 0x0c, 0x63, 0x69, 0x06, 0x74,
		0x51, 0x28, 0x1f, 0x58, 0x70, 0x81, 0x06, 0x3b, 0x78, 0xb0, 0x83, 0x88, 0x11, 0x30, 0xa1, 0x01,
		0x15, 0x22, 0x70, 0xa1, 0xf3, 0x80, 0xd6, 0xca, 0x2f, 0x9a, 0x9e, 0x52, 0x4a, 0x26, 0x9a, 0x9e,
		0x6e, 0x24, 0x7b, 0x68, 0x7a, 0xba, 0x66, 0x6b, 0xd1, 0xf4, 0xd4, 0x30, 0x40, 0xd3, 0x8f, 0xb6,
		0x55, 0x37, 0x6b, 0x4e, 0xdc, 0x46, 0xbb, 0x1f, 0xda, 0x8e, 0xeb, 0x2a, 0x11, 0x45, 0xf6, 0xc0,
		0x09, 0x43, 0xca, 0xce, 0x7c, 0xb3, 0x7b, 0x36, 0x9f, 0x9b, 0x8d, 0xd6, 0x54, 0x6d, 0xc0, 0x54,
		0x85, 0xa9, 0x0a, 0x53, 0x95, 0xc3, 0x54, 0xa5, 0xf2, 0x87, 0xa7, 0x03, 0x12, 0xde, 0xfd, 0xb1,
		0x7c, 0x24, 0x5c, 0x6a, 0x89, 0xa2, 0xf5, 0x85, 0xd9, 0x80, 0x86, 0x13, 0x70, 0xcc, 0x01, 0x0f,
		0x37, 0x00, 0x19, 0x03, 0x22, 0x63, 0x80, 0x64, 0x14, 0x98, 0x98, 0x4c, 0x35, 0xea, 0xf6, 0xb7,
		0xd4, 0xbe, 0xf5, 0x92, 0xfc, 0x93, 0x15, 0x8f, 0xac, 0x35, 0x67, 0x8e, 0xcb, 0xda, 0xfb, 0x96,
		0xd0, 0xc8, 0x18, 0x38, 0xdd, 0x39, 0xc3, 0x90, 0x4f, 0x27, 0x3c, 0x99, 0x07, 0xfa, 0x01, 0xfa,
		0x01, 0xfa, 0x01, 0xfa, 0x81, 0x51, 0xfe, 0x63, 0xc4, 0xe1, 0x81, 0x9b, 0x45, 0x25, 0xc1, 0x30,
		0xf6, 0x85, 0xa3, 0xb5, 0x50, 0x92, 0xe5, 0x86, 0xcc, 0x64, 0x82, 0xcb, 0xba, 0x7d, 0xe2, 0xd8,
		0xbd, 0x33, 0xfb, 0xc3, 0xd5, 0xcf, 0xe6, 0xe3, 0xee, 0xe9, 0xe2, 0xf7, 0x7b, 0x3f, 0xdb, 0x8f,
		0xf4, 0xf2, 0x78, 0xf5, 0x0a, 0xb4, 0x69, 0x18, 0x28, 0x6d, 0xfb, 0x4e, 0xdf, 0x96, 0xc3, 0xc1,
		0x8d, 0x50, 0x8c, 0x37, 0xb3, 0x3e, 0x99, 0x08, 0xfa, 0x14, 0xfa, 0x14, 0xfa, 0x14, 0xfa, 0x94,
		0x51, 0xfe, 0xc9, 0x63, 0x9a, 0x4f, 0xd1, 0xe6, 0x88, 0x61, 0x68, 0x9e, 0x18, 0xe7, 0xe4, 0x1f,
		0xcf, 0x39, 0xb5, 0xb8, 0x63, 0x9e, 0xd3, 0x49, 0x98, 0x63, 0x9f, 0xd3, 0x79, 0x4c, 0xc5, 0xc7,
		0x66, 0x32, 0xcb, 0x1d, 0x27, 0x63, 0x3a, 0xc6, 0x8b, 0x22, 0xc0, 0x18, 0x1b, 0x5d, 0x12, 0x01,
		0xee, 0x18, 0xe9, 0x6b, 0x90, 0x85, 0x9d, 0x6a, 0x8c, 0xfa, 0x1a, 0x0c, 0xf1, 0x3b, 0xdf, 0x91,
		0x36, 0x67, 0x8c, 0x63, 0x32, 0x01, 0x0c, 0x6f, 0x18, 0xde, 0x30, 0xbc, 0x61, 0x78, 0xc3, 0xf0,
		0x86, 0xe1, 0x0d, 0xc3, 0x1b, 0x86, 0x37, 0x0c, 0x6f, 0x18, 0xde, 0x95, 0x33, 0xbc, 0x4b, 0x95,
		0xea, 0x34, 0x6e, 0x2f, 0x44, 0x66, 0x5b, 0xd3, 0x5e, 0x93, 0x37, 0xaf, 0x27, 0x68, 0xaf, 0xcb,
		0x9b, 0x87, 0x1f, 0xf6, 0x6b, 0xf3, 0xa6, 0x93, 0xd1, 0x5f, 0x9f, 0xb7, 0x3c, 0x34, 0xd9, 0x35,
		0x7a, 0xd4, 0xa2, 0x46, 0x7c, 0xe1, 0xd4, 0x74, 0x5c, 0xf3, 0x8d, 0x8d, 0x26, 0x43, 0x6c, 0x50,
		0xac, 0x7a, 0x60, 0x20, 0x23, 0xd8, 0x32, 0xd7, 0x2b, 0x69, 0xf2, 0xe1, 0xb7, 0x93, 0x37, 0xff,
		0x73, 0xf4, 0xe2, 0x7f, 0x8e, 0xde, 0xfb, 0xd3, 0xe4, 0x65, 0xaf, 0xa7, 0x5f, 0xfd, 0x2b, 0x3c,
		0x1b, 0xbd, 0xf4, 0xa7, 0xf1, 0x3b, 0x6f, 0x65, 0x6e, 0x79, 0xe4, 0xe9, 0x71, 0x53, 0x45, 0xc6,
		0x94, 0xf2, 0xd9, 0x24, 0x54, 0x79, 0xae, 0xa2, 0xe7, 0x0c, 0x7d, 0x4d, 0xea, 0x38, 0xd4, 0xa2,
		0xc4, 0xbd, 0xb7, 0x95, 0xe8, 0x0a, 0xef, 0x4e, 0x28, 0x9a, 0xfd, 0xbe, 0x42, 0x99, 0x67, 0x79,
		0x99, 0x1d, 0xe4, 0xce, 0x17, 0xca, 0xdc, 0xbc, 0x96, 0x32, 0x4f, 0x21, 0x87, 0x83, 0xf1, 0x3d,
		0xa4, 0x1c, 0x17, 0x66, 0xb7, 0x08, 0xc7, 0x7c, 0x2f, 0x87, 0x03, 0xfa, 0xe3, 0xf0, 0x35, 0xf8,
		0x32, 0xca, 0xc2, 0x65, 0x21, 0xc0, 0xea, 0xa3, 0xeb, 0x6b, 0x47, 0xa8, 0x6d, 0x07, 0xd2, 0x7f,
		0xe0, 0x20, 0xc1, 0x1a, 0x49, 0x32, 0xf1, 0x48, 0x45, 0x70, 0xcd, 0xd1, 0x9c, 0x9b, 0x83, 0x56,
		0x0d, 0xb1, 0xd1, 0x9a, 0xc1, 0x47, 0xa9, 0x79, 0xb6, 0x75, 0x71, 0x47, 0x59, 0x78, 0x88, 0x85,
		0xfd, 0x24, 0x2b, 0x4c, 0x7b, 0xd6, 0xa8, 0x38, 0xb5, 0x9a, 0xdb, 0xed, 0xde, 0x57, 0xbc, 0xa3,
		0x48, 0xf5, 0x2f, 0x17, 0x4e, 0xe1, 0xe3, 0x55, 0xe7, 0xb2, 0xe1, 0x4d, 0xdd, 0xb7, 0x5a, 0x05,
		0x2f, 0xf6, 0x18, 0x38, 0x5d, 0x3b, 0x0c, 0x7c, 0xaf, 0xeb, 0x89, 0x88, 0xae, 0x1f, 0xd5, 0xc2,
		0xa8, 0x68, 0x3c, 0x65, 0xde, 0xc9, 0x40, 0xe3, 0x29, 0x34, 0x9e, 0x7a, 0x79, 0xa0, 0x11, 0x68,
		0xdb, 0xdd, 0x40, 0x6a, 0x15, 0xf8, 0xb6, 0xef, 0x45, 0x9a, 0x9e, 0x89, 0x59, 0x35, 0x09, 0x6a,
		0xfa, 0xc1, 0x4b, 0x80, 0x97, 0xa8, 0x00, 0x2f, 0x41, 0x5e, 0xd3, 0x3f, 0x8a, 0xef, 0xf2, 0xe5,
		0xbc, 0x8d, 0xc7, 0x27, 0xde, 0x78, 0x0e, 0xca, 0x77, 0x3a, 0xb8, 0xab, 0x82, 0x90, 0xd6, 0xd1,
		0xbe, 0x42, 0xc6, 0x1f, 0x32, 0xfe, 0x0a, 0xc7, 0x63, 0x63, 0xb8, 0x6c, 0x14, 0x9f, 0xe9, 0xb9,
		0x0f, 0xab, 0x92, 0x19, 0x7f, 0xb4, 0xf7, 0xc1, 0xad, 0x35, 0xed, 0x18, 0x32, 0x8e, 0x78, 0xee,
		0x8b, 0x7b, 0xd6, 0x17, 0x66, 0xd1, 0x4a, 0xd3, 0x99, 0x18, 0xae, 0x92, 0x7b, 0xfa, 0x8f, 0x39,
		0xd1, 0x6c, 0xb2, 0x56, 0xf4, 0xaa, 0x90, 0xf1, 0x90, 0x15, 0xb0, 0x3e, 0x3d, 0x3f, 0x08, 0x5c,
		0x2c, 0xd0, 0xfa, 0x05, 0xba, 0x77, 0x94, 0x24, 0x4b, 0x97, 0xe0, 0x87, 0xfd, 0xa9, 0xc1, 0xf6,
		0x6a, 0x9a, 0x24, 0x52, 0x16, 0xd0, 0xb8, 0x91, 0xb6, 0xe7, 0x3b, 0x28, 0xb0, 0x39, 0x15, 0x4f,
		0x27, 0x82, 0x79, 0x0d, 0xf3, 0x1a, 0xe6, 0x35, 0xcc, 0x6b, 0x74, 0x86, 0x59, 0x09, 0x0f, 0xe8,
		0x0c, 0x63, 0x5a, 0x1e, 0x59, 0xd2, 0xc7, 0xa7, 0xa3, 0xb3, 0xa5, 0x91, 0xcf, 0x66, 0x30, 0x98,
		0x4e, 0x3e, 0x9d, 0x94, 0x2f, 0xad, 0x7c, 0x79, 0x0a, 0xf2, 0xf4, 0xf2, 0x4a, 0x59, 0x66, 0xf6,
		0xc0, 0x89, 0xfe, 0x32, 0x66, 0x9e, 0x8d, 0x66, 0x83, 0x8d, 0x06, 0x1b, 0x0d, 0x36, 0x1a, 0x6c,
		0x34, 0xd8, 0x68, 0xb0, 0xd1, 0x60, 0xa3, 0xc1, 0x46, 0x83, 0x8d, 0xf6, 0xe4, 0xbd, 0xc7, 0x59,
		0x93, 0x4c, 0x36, 0x59, 0x32, 0x3a, 0x6c, 0x30, 0xd8, 0x60, 0xb0, 0xc1, 0x60, 0x83, 0xa1, 0xc3,
		0x7e, 0xc9, 0x75, 0x81, 0x72, 0xb4, 0xb0, 0x7d, 0x6f, 0xe0, 0x69, 0x3e, 0x8d, 0x30, 0x37, 0x07,
		0xf4, 0x02, 0xf4, 0x02, 0xf4, 0x02, 0xf4, 0x02, 0xa3, 0xfc, 0xbb, 0xa2, 0xeb, 0x0d, 0x1c, 0xbf,
		0xd3, 0xe2, 0x54, 0x0d, 0x4d, 0x86, 0xb1, 0x97, 0x5a, 0x20, 0x35, 0xd1, 0xf9, 0x6c, 0xc1, 0xcd,
		0x35, 0xd7, 0xf6, 0xea, 0xa4, 0xd9, 0x3c, 0x3c, 0x3c, 0x6a, 0xd6, 0x0f, 0x3b, 0xc7, 0xed, 0xd6,
		0xd1, 0x51, 0xfb, 0xb8, 0x7e, 0x6c, 0xba, 0xff, 0x55, 0xd3, 0x5c, 0xff, 0xab, 0x18, 0xf8, 0xd0,
		0x0a, 0x2d, 0xbd, 0x4c, 0x1c, 0x6d, 0xb1, 0x4c, 0xa0, 0x27, 0x9a, 0x55, 0x7a, 0x5e, 0x51, 0xfc,
		0xd0, 0xca, 0xb1, 0x87, 0x32, 0xd2, 0xce, 0x8d, 0xcf, 0xa4, 0x55, 0xef, 0x6f, 0x85, 0xac, 0xa2,
		0xba, 0x98, 0x59, 0x03, 0xca, 0xbb, 0x13, 0xae, 0xdd, 0x53, 0xc1, 0xc0, 0x0e, 0x94, 0x1d, 0x09,
		0xbf, 0xb7, 0xbb, 0xbf, 0x7f, 0x30, 0x3a, 0x59, 0x6f, 0xac, 0xbf, 0x25, 0x89, 0x95, 0x7f, 0xdb,
		0xab, 0x31, 0xc2, 0x14, 0xb3, 0xbd, 0xbc, 0xca, 0x6e, 0x4e, 0xb6, 0x8d, 0x19, 0x2d, 0x4c, 0x59,
		0xcf, 0x2b, 0xad, 0xe8, 0x8d, 0xf7, 0xb5, 0x92, 0x8a, 0xed, 0x9d, 0x88, 0xba, 0xca, 0x0b, 0x59,
		0x0a, 0xa6, 0xd6, 0x1e, 0x95, 0x3f, 0xa6, 0x6e, 0xba, 0xe5, 0x45, 0xd6, 0x9d, 0xe3, 0x7b, 0xae,
		0x15, 0x48, 0xff, 0xc1, 0x8a, 0x85, 0xc9, 0xd2, 0xb7, 0xc2, 0x1a, 0x2d, 0xae, 0xe5, 0x45, 0xdf,
		0xa5, 0x0e, 0x2c, 0xa7, 0xdb, 0x15, 0xa1, 0x4e, 0x7e, 0x31, 0x70, 0x74, 0xf7, 0xd6, 0x93, 0x7d,
		0xab, 0xa7, 0x9c, 0x81, 0xd8, 0xe7, 0x96, 0x3c, 0x43, 0x07, 0xea, 0xe9, 0xa1, 0x72, 0xe7, 0x76,
		0xe5, 0x0d, 0xff, 0xcc, 0xa6, 0xcf, 0xd7, 0xd2, 0x19, 0x23, 0x14, 0x08, 0xd6, 0x07, 0x7f, 0x84,
		0x9d, 0xf2, 0x0a, 0x98, 0xca, 0x48, 0x75, 0xcd, 0xe4, 0x7c, 0x3f, 0x9d, 0x08, 0x9c, 0x25, 0x38,
		0xcb, 0x34, 0x6a, 0x02, 0x9c, 0x65, 0xc1, 0x88, 0x88, 0x7c, 0xa2, 0xd5, 0x90, 0x83, 0x7c, 0xa2,
		0xed, 0xf0, 0xfb, 0x91, 0x4f, 0x94, 0x61, 0x52, 0xe4, 0x13, 0x99, 0xb2, 0xcc, 0x98, 0x73, 0xbe,
		0x57, 0xce, 0x06, 0x1b, 0x0d, 0x36, 0x1a, 0x6c, 0x34, 0xd8, 0x68, 0xb0, 0xd1, 0x60, 0xa3, 0xc1,
		0x46, 0x83, 0x8d, 0xb6, 0x1d, 0x36, 0x5a, 0x19, 0x6f, 0x3e, 0x22, 0x4c, 0xef, 0xc6, 0xdd, 0x47,
		0xc5, 0x1c, 0x06, 0xdc, 0x7d, 0x54, 0x40, 0x5f, 0xec, 0xf9, 0xc6, 0xc8, 0x07, 0x7c, 0x9d, 0x51,
		0x2d, 0xf3, 0xcd, 0xb1, 0x3f, 0x39, 0xdd, 0x8b, 0xf1, 0x8b, 0x5d, 0x8f, 0x7e, 0xf5, 0xdb, 0xe8,
		0xbd, 0xe2, 0xe3, 0xbd, 0x55, 0xd7, 0x17, 0x8d, 0x2d, 0x40, 0xe2, 0x7c, 0xe9, 0x25, 0x0b, 0x93,
		0x34, 0x57, 0x1a, 0xad, 0x72, 0xd1, 0x2a, 0xd7, 0xa4, 0x6f, 0x8a, 0x56, 0xb9, 0xf9, 0x07, 0xac,
		0x66, 0xab, 0x5c, 0x90, 0x66, 0x20, 0xcd, 0x40, 0x9a, 0x81, 0x34, 0x43, 0xaf, 0xd8, 0xac, 0xb6,
		0x1f, 0x7a, 0xc5, 0x6e, 0xb4, 0x56, 0xe8, 0x15, 0xfb, 0xfc, 0xfa, 0xa0, 0x57, 0xec, 0x0b, 0x0b,
		0x84, 0x5e, 0xb1, 0x3c, 0xea, 0xa9, 0x94, 0xd1, 0xe9, 0x18, 0x59, 0xe5, 0x70, 0xc0, 0x5d, 0xe4,
		0xbc, 0x38, 0x0d, 0x4c, 0x6b, 0x98, 0xd6, 0x30, 0xad, 0x61, 0x5a, 0x33, 0xca, 0xff, 0xd0, 0x93,
		0xba, 0xd1, 0x61, 0xb4, 0xaa, 0x3b, 0x28, 0x3f, 0x9e, 0x3d, 0xb8, 0xd1, 0xf2, 0xe3, 0xba, 0xe9,
		0xc2, 0xd2, 0xfa, 0xd6, 0x14, 0x96, 0x6e, 0x4b, 0xb5, 0x71, 0xa7, 0xdd, 0x3e, 0x6c, 0x43, 0x0c,
		0x4a, 0x65, 0x7f, 0xa3, 0x6e, 0x27, 0xcb, 0xa6, 0x6b, 0x6f, 0x20, 0x6c, 0x4f, 0x6a, 0xa1, 0xee,
		0x1c, 0x9f, 0xcf, 0xfe, 0x5e, 0x9c, 0x06, 0xf6, 0x37, 0xec, 0x6f, 0xd8, 0xdf, 0xb0, 0xbf, 0x99,
		0xed, 0xef, 0xc3, 0x26, 0xa3, 0xfd, 0x7d, 0x04, 0xfb, 0x1b, 0xf6, 0x37, 0xec, 0xef, 0x62, 0xec,
		0xef, 0x56, 0xf3, 0xa4, 0x75, 0xd2, 0x39, 0x6a, 0x9e, 0xc0, 0x08, 0x87, 0x11, 0x5e, 0x90, 0x11,
		0x8e, 0x8c, 0x4c, 0x73, 0x19, 0x99, 0x2c, 0xb9, 0x77, 0x56, 0xb1, 0xc9, 0x98, 0x9f, 0x9c, 0xee,
		0x99, 0xeb, 0xaa, 0xf3, 0xe4, 0x8d, 0xb6, 0x2c, 0x0f, 0xd3, 0x0f, 0x82, 0xd0, 0x0e, 0x95, 0xb8,
		0x13, 0x92, 0x54, 0x26, 0x17, 0xe2, 0x39, 0x4f, 0x27, 0x41, 0x46, 0x66, 0x79, 0xbd, 0x46, 0x64,
		0x64, 0x16, 0xea, 0x15, 0x6e, 0x79, 0x46, 0x66, 0x4f, 0x89, 0xff, 0x0c, 0x85, 0xec, 0x3e, 0xf0,
		0x11, 0x58, 0xb3, 0x29, 0x88, 0xb7, 0xff, 0x9d, 0xe8, 0x39, 0x43, 0x5f, 0xb3, 0x78, 0x7d, 0xb5,
		0x36, 0x2d, 0xb1, 0x70, 0x05, 0xe2, 0x0e, 0xc4, 0x1d, 0x88, 0x3b, 0x10, 0x77, 0x20, 0xee, 0x40,
		0xdc, 0x81, 0xb8, 0x03, 0x71, 0x07, 0xe2, 0x0e, 0xc4, 0x5d, 0xe5, 0x88, 0x3b, 0x42, 0xaf, 0x36,
		0x54, 0x81, 0x16, 0x89, 0x9c, 0xd9, 0x9a, 0x43, 0x33, 0x4e, 0xb5, 0xe2, 0xd3, 0x89, 0x60, 0x88,
		0xc3, 0x10, 0x87, 0x21, 0x0e, 0x43, 0x1c, 0xc5, 0x61, 0xab, 0xc6, 0x36, 0x5b, 0x1c, 0xf6, 0x84,
		0x87, 0xe6, 0x00, 0xe8, 0x45, 0x3b, 0x6a, 0x2b, 0xca, 0xc4, 0xa2, 0xdb, 0xa1, 0x46, 0x15, 0xd4,
		0xfa, 0xf5, 0xd1, 0xca, 0x09, 0x51, 0x02, 0xf5, 0x1a, 0x4a, 0xa0, 0x94, 0xd0, 0xea, 0xc1, 0xd6,
		0xde, 0x40, 0x28, 0xc6, 0x5b, 0x1e, 0xe7, 0x26, 0x81, 0xf1, 0x08, 0xe3, 0x11, 0xc6, 0x23, 0x8c,
		0x47, 0xb0, 0xb8, 0x8b, 0x43, 0x83, 0xc5, 0x7d, 0xd1, 0xf4, 0x04, 0x8b, 0x5b, 0x4e, 0xa3, 0x14,
		0x2c, 0x6e, 0xd5, 0x64, 0x01, 0x2c, 0x6e, 0x69, 0x0c, 0xf0, 0x7b, 0x4f, 0xba, 0xc1, 0x3d, 0x9f,
		0xed, 0x3d, 0x1e, 0xbf, 0x4a, 0x89, 0x23, 0x8d, 0xe3, 0x3a, 0x52, 0x47, 0xe0, 0x74, 0xc0, 0xe9,
		0x80, 0xd3, 0x01, 0xa7, 0x03, 0x4e, 0x07, 0x9c, 0x0e, 0x38, 0x1d, 0x70, 0x3a, 0xe0, 0x74, 0xbc,
		0x76, 0xa7, 0x03, 0x35, 0x5f, 0x66, 0x6b, 0xbe, 0x78, 0x4a, 0x7c, 0xac, 0xc2, 0x0b, 0xbf, 0xce,
		0x83, 0x20, 0xbc, 0x98, 0xbd, 0x56, 0x59, 0xaa, 0xbf, 0x76, 0x0a, 0x14, 0x6b, 0x6a, 0x71, 0x2e,
		0x89, 0x18, 0x13, 0x88, 0x6c, 0x71, 0xa2, 0x9a, 0x4f, 0x30, 0xb3, 0x8b, 0x53, 0x0e, 0x51, 0xaa,
		0x0d, 0xf4, 0x30, 0xb7, 0xfc, 0xcc, 0xca, 0x0c, 0xf5, 0x30, 0xe7, 0x06, 0x12, 0x11, 0x15, 0x64,
		0xc4, 0x04, 0x25, 0x11, 0xc1, 0x47, 0x3c, 0x50, 0x13, 0x0d, 0x6c, 0xc4, 0x02, 0x1b, 0x91, 0xc0,
		0x4a, 0x1c, 0x14, 0x0b, 0xf4, 0x64, 0x44, 0x00, 0xbd, 0xe3, 0x4f, 0xe8, 0xe8, 0x13, 0x3b, 0xf6,
		0xb4, 0x37, 0x70, 0xd1, 0x73, 0xdd, 0x4c, 0x8e, 0x3a, 0xbb, 0x33, 0xc6, 0xe7, 0x7c, 0x3d, 0xd2,
		0x5e, 0x6d, 0xc6, 0xb7, 0x65, 0x5c, 0x8e, 0x75, 0x95, 0xf7, 0xae, 0x24, 0x16, 0xf9, 0x55, 0x05,
		0x0d, 0xb0, 0xff, 0x04, 0x11, 0x9d, 0x01, 0x16, 0x0f, 0x46, 0x63, 0x80, 0x35, 0x60, 0x80, 0xc1,
		0x00, 0x83, 0x01, 0x46, 0xd9, 0x7f, 0x21, 0x3e, 0x9d, 0x76, 0xd7, 0x77, 0xa2, 0xc8, 0xeb, 0x79,
		0xdd, 0xc4, 0x75, 0x1f, 0xf9, 0xbd, 0x0f, 0xf4, 0x0d, 0x5f, 0xd6, 0x4f, 0x85, 0xb6, 0x2f, 0xe5,
		0x83, 0x0f, 0x2e, 0x18, 0x61, 0x87, 0x13, 0x76, 0x58, 0x31, 0x02, 0x2f, 0xc4, 0x66, 0x4c, 0x59,
		0xdb, 0xbe, 0xa8, 0xa1, 0xcf, 0x58, 0x72, 0x99, 0x8c, 0xce, 0x93, 0xb5, 0xd2, 0x40, 0xd6, 0x0a,
		0xb2, 0x56, 0x4a, 0x08, 0x4a, 0x46, 0xc1, 0x89, 0x16, 0xa4, 0x18, 0xbc, 0x6e, 0x16, 0xd0, 0x9a,
		0x0e, 0xec, 0xb9, 0xfc, 0x95, 0x89, 0x9e, 0xcb, 0x25, 0x89, 0x3c, 0xe9, 0x77, 0xec, 0x80, 0x66,
		0x02, 0xd8, 0xcc, 0x03, 0x9c, 0x29, 0xa0, 0x33, 0x0e, 0x78, 0xc6, 0x81, 0xaf, 0x10, 0x00, 0xe4,
		0x01, 0x42, 0x26, 0x40, 0x9c, 0xae, 0x10, 0x5b, 0x3a, 0xdf, 0xd2, 0xf9, 0x89, 0xb4, 0xf2, 0x64,
		0x9f, 0xf3, 0xdc, 0x4c, 0xcc, 0xb2, 0xe3, 0x8a, 0xe4, 0xc7, 0x30, 0xec, 0x69, 0x6d, 0xe0, 0xe8,
		0xee, 0x2d, 0x4f, 0x17, 0x93, 0xa5, 0x1d, 0x9d, 0x9b, 0x8b, 0x49, 0x3a, 0x39, 0x93, 0xe3, 0x9f,
		0x2c, 0x59, 0xcf, 0x0f, 0x98, 0x40, 0xe1, 0x8a, 0x57, 0x79, 0xb7, 0xa1, 0xbc, 0xa1, 0xbc, 0xa1,
		0xbc, 0x5f, 0xa3, 0xf2, 0xe6, 0xf2, 0x6a, 0x9e, 0x40, 0xa3, 0x13, 0x86, 0xfe, 0x98, 0xad, 0xe5,
		0x97, 0xeb, 0x45, 0xe5, 0x32, 0x3f, 0x35, 0xb3, 0xb8, 0x8d, 0xe1, 0xb4, 0xc5, 0x3c, 0x0d, 0x37,
		0xac, 0x9a, 0x84, 0xd7, 0xe2, 0x60, 0xd6, 0x34, 0xdc, 0x16, 0x06, 0xbb, 0x85, 0xc1, 0x6f, 0xa1,
		0x30, 0xcc, 0x0b, 0xc7, 0xcc, 0xb0, 0x6c, 0x0c, 0x9e, 0x0b, 0x84, 0xe9, 0xc2, 0xe1, 0xda, 0x10,
		0x85, 0x55, 0x18, 0x7c, 0x17, 0x01, 0xe3, 0xc5, 0xc3, 0x79, 0x51, 0xb0, 0x5e, 0x38, 0xbc, 0x17,
		0x0e, 0xf3, 0xa5, 0x80, 0x7b, 0x33, 0xb0, 0x6f, 0x08, 0xfe, 0xa7, 0x2b, 0xca, 0x4e, 0xb1, 0xad,
		0x3f, 0xbf, 0xac, 0xbd, 0x1f, 0x5f, 0x82, 0xe4, 0x46, 0xdb, 0xe0, 0x9c, 0x46, 0x7a, 0x45, 0xbe,
		0xb8, 0xe0, 0xdd, 0x61, 0xa4, 0x83, 0x81, 0x50, 0x05, 0x28, 0xc2, 0xe9, 0xb3, 0x18, 0xe8, 0x2d,
		0xb9, 0xee, 0xdf, 0x4f, 0xe3, 0x33, 0x2e, 0xac, 0xbe, 0xeb, 0x68, 0xe7, 0x26, 0xde, 0x7f, 0xe3,
		0x8f, 0xf1, 0xf8, 0xe6, 0xb5, 0xad, 0xb5, 0x18, 0xdc, 0xdc, 0x60, 0x9d, 0xf9, 0xd7, 0xb9, 0xe7,
		0xf9, 0xc2, 0xd6, 0xca, 0x91, 0x51, 0x4f, 0x28, 0x2c, 0x38, 0xff, 0x82, 0xf7, 0x9d, 0x41, 0xde,
		0x8a, 0x39, 0x2c, 0xf4, 0x66, 0x1e, 0xa3, 0xe7, 0x63, 0x9d, 0x0d, 0xac, 0xf3, 0x40, 0x77, 0xb1,
		0xce, 0xfc, 0xeb, 0x3c, 0xa9, 0x22, 0x1e, 0x38, 0xd2, 0xe9, 0x8b, 0xc4, 0x85, 0xc2, 0xaa, 0xb3,
		0xaf, 0x7a, 0xd8, 0x0c, 0xb1, 0xcc, 0xfc, 0xcb, 0x1c, 0x05, 0x5d, 0xcf, 0x01, 0x5c, 0x1b, 0x58,
		0xe9, 0xa1, 0xf2, 0x7d, 0xe0, 0xb5, 0x81, 0x85, 0xbe, 0xf3, 0x5c, 0x11, 0x60, 0xa1, 0x0d, 0x2c,
		0x74, 0xe0, 0x75, 0xe1, 0x93, 0x1b, 0x58, 0xe8, 0x7b, 0x51, 0x84, 0x4b, 0x6e, 0x74, 0xc6, 0xab,
		0x6d, 0xe3, 0xa0, 0x11, 0x42, 0x7d, 0x56, 0xb4, 0x99, 0x9a, 0x63, 0xad, 0x9d, 0xaf, 0xb8, 0x6e,
		0x43, 0xff, 0x09, 0xa2, 0x83, 0xb5, 0xd5, 0x91, 0x07, 0x6a, 0xe8, 0x8b, 0x83, 0x59, 0xbe, 0xe5,
		0xc1, 0x72, 0xb8, 0x75, 0xa7, 0x9a, 0x42, 0xc4, 0xd9, 0xd7, 0x70, 0x2e, 0xb1, 0xd3, 0x70, 0xda,
		0x52, 0x32, 0x27, 0xf2, 0x95, 0x52, 0x4d, 0x84, 0x7c, 0x25, 0x16, 0x29, 0x41, 0xbe, 0x12, 0xf2,
		0x95, 0x36, 0x5c, 0x39, 0xc3, 0xf9, 0x4a, 0x46, 0x80, 0xb9, 0x38, 0x80, 0x7e, 0x0a, 0xd4, 0x0d,
		0x64, 0x28, 0x6d, 0x01, 0x80, 0x17, 0x05, 0xe4, 0x85, 0x03, 0x7a, 0xe1, 0xc0, 0x5e, 0x0a, 0x80,
		0x37, 0xec, 0x1d, 0x1a, 0x3a, 0xc1, 0xa6, 0x80, 0x7f, 0x3a, 0xa1, 0x23, 0x1f, 0x8a, 0x4b, 0xd2,
		0x89, 0x27, 0x37, 0x2c, 0xb2, 0x66, 0x93, 0x54, 0x0b, 0x53, 0x05, 0x45, 0xaa, 0x84, 0xf2, 0xa8,
		0x86, 0xa2, 0x55, 0x44, 0x69, 0x54, 0x45, 0x69, 0x54, 0x46, 0xa9, 0x54, 0x87, 0x59, 0x15, 0x62,
		0x58, 0x95, 0x4c, 0x57, 0xda, 0x78, 0xd2, 0xeb, 0xd2, 0xf9, 0x17, 0x83, 0x50, 0x3f, 0x14, 0x71,
		0xec, 0x27, 0xf6, 0xfe, 0xe1, 0xce, 0x76, 0x8a, 0x93, 0x41, 0x51, 0xaa, 0x75, 0x03, 0x3f, 0x50,
		0xbc, 0xe5, 0xec, 0x2f, 0x0a, 0xd2, 0xdc, 0x33, 0xc0, 0x6c, 0x80, 0xd9, 0x00, 0xb3, 0x01, 0x66,
		0x03, 0xcc, 0x86, 0xad, 0x35, 0x1b, 0x8a, 0xa9, 0x99, 0x59, 0x32, 0x1e, 0xda, 0x05, 0xcc, 0x5d,
		0x68, 0x0d, 0x4d, 0x79, 0xd4, 0xee, 0xf4, 0x49, 0x0a, 0xac, 0xa4, 0x99, 0xfc, 0xfb, 0x59, 0xd8,
		0xcc, 0x0b, 0x7b, 0xd1, 0x57, 0x42, 0xc8, 0x5a, 0x61, 0xcf, 0xf2, 0xf8, 0xe6, 0xb5, 0x6f, 0x80,
		0x12, 0x2e, 0x96, 0xbf, 0xb8, 0xe5, 0x7f, 0x10, 0x3e, 0x5b, 0x7b, 0xa8, 0xf2, 0x29, 0xfd, 0xc9,
		0xbf, 0xab, 0x6d, 0x37, 0x6e, 0xb6, 0xd2, 0x65, 0x76, 0x03, 0xdd, 0xf8, 0x4f, 0x71, 0xde, 0xf2,
		0x68, 0x7a, 0x38, 0xca, 0x70, 0x94, 0xe1, 0x28, 0xc3, 0x51, 0x86, 0xa3, 0xbc, 0xb5, 0x8e, 0xf2,
		0xd0, 0x93, 0xba, 0xd1, 0x29, 0xd0, 0x47, 0xee, 0x14, 0x30, 0x35, 0xef, 0x35, 0xef, 0xe5, 0xb5,
		0x86, 0x8d, 0x5c, 0x13, 0xbf, 0x99, 0x43, 0x6e, 0x5e, 0xdd, 0x2e, 0x3d, 0x87, 0xe9, 0xab, 0xc5,
		0x5f, 0x3e, 0x93, 0xa6, 0xae, 0x1e, 0x2f, 0xb1, 0xab, 0x68, 0xe4, 0x1a, 0xfb, 0x8d, 0x45, 0xb4,
		0xd3, 0x6e, 0x1f, 0xb6, 0x21, 0xa6, 0x65, 0x15, 0xd3, 0x9d, 0xd7, 0x31, 0xeb, 0x15, 0xfc, 0xe9,
		0xfc, 0xfe, 0x74, 0xd4, 0x0d, 0x0b, 0x74, 0xa7, 0xe3, 0xd9, 0xe1, 0x4d, 0xc3, 0x9b, 0x86, 0x37,
		0x0d, 0x6f, 0x1a, 0xde, 0xf4, 0xd6, 0x7a, 0xd3, 0x05, 0xe0, 0xbc, 0xc5, 0x7f, 0x89, 0x04, 0x7c,
		0x69, 0xf8, 0xd2, 0x70, 0x52, 0xe0, 0x4b, 0xe7, 0xf4, 0xa5, 0x0f, 0x21, 0xa3, 0x70, 0xa4, 0xe1,
		0x48, 0x57, 0xde, 0x91, 0xd6, 0xf6, 0xc0, 0xe9, 0xda, 0x8e, 0xeb, 0x2a, 0x11, 0x45, 0x45, 0xfa,
		0xd4, 0x8b, 0x0f, 0x02, 0xf7, 0x1a, 0xee, 0x35, 0xdc, 0x6b, 0xb8, 0xd7, 0x70, 0xaf, 0xb7, 0xd6,
		0xbd, 0x2e, 0x0e, 0xee, 0xad, 0x85, 0x9b, 0x49, 0x0b, 0x98, 0xfb, 0xc2, 0xd1, 0x5a, 0x28, 0x59,
		0x98, 0xa3, 0x5d, 0xbb, 0xac, 0xdb, 0x27, 0x8e, 0xdd, 0x3b, 0xb3, 0x3f, 0x5c, 0xfd, 0x6c, 0x3e,
		0xee, 0x9e, 0x2e, 0x7e, 0xbf, 0xf7, 0xb3, 0xfd, 0x58, 0x83, 0x3d, 0x57, 0x41, 0x7b, 0x2e, 0x2c,
		0x32, 0x2e, 0x12, 0x22, 0x2c, 0x02, 0xbb, 0x0d, 0x76, 0x1b, 0xec, 0x36, 0xd8, 0x6d, 0xdb, 0x6c,
		0xb7, 0x0d, 0x3d, 0xa9, 0x8f, 0x11, 0x17, 0x31, 0xf8, 0x0f, 0x71, 0x11, 0xc4, 0x45, 0x56, 0x1f,
		0x49, 0xc4, 0x45, 0x4a, 0x16, 0x17, 0x39, 0x82, 0x88, 0x96, 0x55, 0x44, 0x11, 0x16, 0x81, 0x1b,
		0xbd, 0xa1, 0xd0, 0x46, 0xaa, 0x5b, 0x8e, 0xb0, 0xc8, 0xd3, 0x07, 0x81, 0x7b, 0x0d, 0xf7, 0x1a,
		0xee, 0x35, 0xdc, 0x6b, 0xb8, 0xd7, 0x5b, 0xeb, 0x5e, 0x23, 0x2c, 0x82, 0xb0, 0xc8, 0xab, 0xb0,
		0xe7, 0xb6, 0xaa, 0x5d, 0xb3, 0xe1, 0x4b, 0x71, 0x66, 0x96, 0x6a, 0xa5, 0x2e, 0xc7, 0xe9, 0xf9,
		0xc1, 0xfd, 0x81, 0xf1, 0x6e, 0xff, 0xa3, 0x85, 0xd2, 0x6a, 0xd8, 0xd5, 0x72, 0x0c, 0xb2, 0x1f,
		0xdf, 0x7f, 0xfd, 0x70, 0xde, 0xfc, 0x16, 0xca, 0xcf, 0xfa, 0xfe, 0x5b, 0x28, 0xbf, 0x8c, 0xd7,
		0xe8, 0x7a, 0xf6, 0x75, 0xfc, 0xe5, 0xe7, 0x78, 0x85, 0x26, 0x5f, 0x24, 0xff, 0x1d, 0x2d, 0xc5,
		0xd9, 0x78, 0x79, 0x96, 0x7e, 0x74, 0x3d, 0xf9, 0xf0, 0xbf, 0x83, 0x28, 0xfe, 0xdf, 0x6f, 0x0b,
		0x6b, 0x73, 0x91, 0x2c, 0xcd, 0xf5, 0x1f, 0x43, 0x5f, 0x5c, 0x7f, 0x8a, 0x17, 0xe1, 0x83, 0xb1,
		0x06, 0x36, 0xb8, 0xd3, 0xaa, 0x54, 0xc7, 0xb7, 0x82, 0xc7, 0xb6, 0xb2, 0x97, 0x59, 0xed, 0x54,
		0x48, 0x1e, 0x4d, 0xc9, 0x61, 0x55, 0xe4, 0x8f, 0x47, 0xe8, 0xe8, 0x45, 0x82, 0x41, 0x1c, 0x6a,
		0xda, 0x51, 0x7d, 0xa1, 0x47, 0xeb, 0x64, 0x7b, 0x2e, 0x9b, 0x3c, 0x4c, 0x1d, 0x8f, 0xa7, 0x13,
		0x32, 0x89, 0x38, 0x2f, 0xa7, 0xc4, 0xce, 0x1d, 0x99, 0xe0, 0x88, 0xcc, 0x73, 0x41, 0xa6, 0x38,
		0x1f, 0xe3, 0xdc, 0x8e, 0x71, 0x0e, 0xa7, 0x10, 0xae, 0xa6, 0x5a, 0x4a, 0x8e, 0x9d, 0x63, 0x99,
		0xd1, 0xe7, 0x5a, 0x79, 0xb2, 0xcf, 0x79, 0x6e, 0xa6, 0x74, 0x49, 0x55, 0x34, 0xd5, 0x4e, 0x89,
		0x25, 0x24, 0x46, 0x87, 0x51, 0xbf, 0x67, 0xe2, 0x2d, 0xab, 0x9d, 0x7b, 0x91, 0x3e, 0xd3, 0x9a,
		0xe7, 0x4a, 0xa5, 0xda, 0x27, 0x4f, 0xbe, 0xf7, 0x45, 0x7c, 0xe8, 0x99, 0x22, 0xae, 0xb5, 0x4f,
		0xce, 0x8f, 0xb9, 0x19, 0x1a, 0xc7, 0xad, 0x56, 0xe7, 0xa8, 0xd5, 0xaa, 0x1f, 0x1d, 0x1e, 0xd5,
		0x4f, 0xda, 0xed, 0x46, 0x87, 0xa3, 0x37, 0x75, 0xed, 0x77, 0xe5, 0x0a, 0x25, 0xdc, 0xb7, 0x0f,
		0xfc, 0xb6, 0xc7, 0x30, 0x12, 0x8a, 0xcb, 0xe0, 0x30, 0xa0, 0xda, 0xe6, 0xd5, 0x5a, 0x30, 0x5a,
		0x35, 0xfb, 0x86, 0xf3, 0xa2, 0x13, 0xa3, 0x6a, 0x6d, 0x41, 0xa5, 0x25, 0x3b, 0xf5, 0x8a, 0xcd,
		0xf2, 0xe9, 0xa1, 0xf8, 0x33, 0x5e, 0x88, 0xd1, 0xd2, 0x97, 0x1a, 0x53, 0xc5, 0x0f, 0xad, 0x1c,
		0x7b, 0x28, 0x23, 0xed, 0xdc, 0xf8, 0x3c, 0xc7, 0x60, 0x5e, 0xe6, 0xb9, 0xb8, 0x7b, 0x03, 0xd6,
		0x02, 0x23, 0x08, 0x15, 0x65, 0x63, 0x1b, 0x01, 0xa3, 0xe2, 0xed, 0x6c, 0x3e, 0x50, 0x62, 0xb4,
		0xae, 0xc9, 0x47, 0xbd, 0x2a, 0x35, 0x0e, 0x31, 0x53, 0x5b, 0xa5, 0xa6, 0xb4, 0x18, 0x0e, 0x5f,
		0xc9, 0x02, 0x1a, 0xb4, 0xa7, 0x8f, 0xee, 0x6c, 0xd0, 0x8c, 0x44, 0x74, 0x16, 0xb8, 0xce, 0x40,
		0x59, 0x65, 0x9f, 0x50, 0xec, 0xcb, 0x23, 0xee, 0x34, 0x92, 0x9e, 0x5f, 0x2e, 0x09, 0x64, 0xb2,
		0x16, 0xef, 0x5c, 0xa8, 0x82, 0x9e, 0x47, 0x68, 0x18, 0x4e, 0xcd, 0xa9, 0xf9, 0xc1, 0x89, 0xce,
		0x0f, 0xed, 0xb5, 0xed, 0xe4, 0x5c, 0x31, 0x07, 0x37, 0xcc, 0xcf, 0x05, 0x73, 0xd9, 0xa5, 0xec,
		0x5c, 0x2f, 0xbb, 0xcd, 0x69, 0x84, 0xcb, 0x2d, 0x97, 0x86, 0xa2, 0xbe, 0x76, 0x9c, 0x05, 0x62,
		0x0c, 0x40, 0x0d, 0x13, 0xe4, 0xb0, 0x41, 0x0f, 0x27, 0x04, 0x99, 0x83, 0x22, 0x53, 0xae, 0xb2,
		0xb1, 0x30, 0x94, 0x31, 0xb7, 0xd8, 0x68, 0xd8, 0xa9, 0xdc, 0x41, 0x04, 0x6a, 0x08, 0x9b, 0x0e,
		0xec, 0x7a, 0x4a, 0x74, 0x59, 0x73, 0x33, 0x66, 0xed, 0xb0, 0xa6, 0x53, 0x31, 0x89, 0xcb, 0x3b,
		0xd1, 0x73, 0x86, 0xbe, 0x66, 0x4d, 0xb5, 0xad, 0xc5, 0x02, 0xd8, 0x0d, 0x06, 0x83, 0x40, 0x9e,
		0xde, 0x04, 0xfa, 0x96, 0x87, 0xa1, 0xb9, 0x42, 0x9e, 0x82, 0x69, 0x45, 0x60, 0x5e, 0x21, 0x14,
		0xc9, 0xa1, 0x22, 0x4f, 0xa1, 0xec, 0x4c, 0x6a, 0xe5, 0xf3, 0x14, 0xcc, 0x5c, 0x70, 0x6c, 0xe2,
		0x22, 0x63, 0xb3, 0x17, 0x16, 0xaf, 0x72, 0x00, 0x6c, 0x6e, 0xdd, 0x39, 0x9d, 0xdc, 0xe0, 0x5d,
		0xc4, 0x66, 0x2a, 0x0a, 0xa6, 0xcb, 0xc9, 0xa7, 0xad, 0x0d, 0x9c, 0xdb, 0x02, 0xd7, 0x2d, 0xf2,
		0xb4, 0xb0, 0x75, 0x60, 0xdf, 0x3b, 0x12, 0xcb, 0x97, 0x7e, 0xf9, 0xee, 0x1d, 0x19, 0xaf, 0x5e,
		0xbc, 0x8a, 0xb5, 0x8a, 0x17, 0x2c, 0x5c, 0xbd, 0xfa, 0x68, 0x24, 0x47, 0xf2, 0x05, 0x17, 0x91,
		0xb4, 0x24, 0x89, 0x3c, 0x64, 0x12, 0x7c, 0x0b, 0xf8, 0x16, 0xf0, 0x2d, 0xe0, 0x5b, 0x20, 0x07,
		0xba, 0x58, 0xcd, 0x54, 0x85, 0x1c, 0x68, 0xa6, 0x70, 0x06, 0x12, 0xa1, 0x33, 0x4c, 0x3a, 0x9f,
		0x08, 0x2d, 0x87, 0xbe, 0x6f, 0x20, 0xad, 0x94, 0xbe, 0x57, 0x16, 0xf2, 0xb9, 0xd2, 0xe6, 0xb4,
		0x8c, 0x8f, 0xe0, 0x01, 0x5f, 0x74, 0xd1, 0x2a, 0x2c, 0xb3, 0xe5, 0x62, 0xf4, 0x3e, 0x73, 0x5f,
		0x22, 0x83, 0xab, 0x40, 0xa9, 0x2f, 0x8f, 0xb4, 0x57, 0x3e, 0x67, 0x8b, 0x54, 0x9c, 0x09, 0xd2,
		0xb4, 0x76, 0x0a, 0x14, 0x5b, 0x6a, 0x71, 0x2d, 0x56, 0x4c, 0x09, 0x44, 0xd3, 0xbc, 0x48, 0xe6,
		0x93, 0xc3, 0xec, 0xd2, 0x93, 0x43, 0x72, 0x6a, 0xd1, 0x5d, 0xd7, 0xf6, 0xe4, 0x4d, 0x30, 0x94,
		0xae, 0x7d, 0xe3, 0x48, 0xf7, 0xde, 0x73, 0x93, 0x0d, 0xcf, 0x27, 0x40, 0x33, 0x8f, 0x64, 0xe5,
		0xf0, 0x39, 0x25, 0x9d, 0x26, 0x4f, 0x87, 0x8c, 0x3a, 0xa1, 0xa4, 0x48, 0xf8, 0xa8, 0x10, 0x6a,
		0xca, 0x83, 0x8d, 0xda, 0x60, 0xa3, 0x30, 0x58, 0xa9, 0x8a, 0x62, 0xb1, 0x9f, 0x2a, 0x0f, 0xa6,
		0x46, 0x0f, 0x05, 0xcb, 0x92, 0x4d, 0x0c, 0x07, 0xc4, 0xb0, 0xc0, 0xc6, 0xac, 0x22, 0x63, 0xd8,
		0x28, 0x33, 0x8a, 0x8c, 0x61, 0x7a, 0x8f, 0x88, 0x3c, 0x63, 0xf8, 0xe6, 0x7e, 0xd4, 0xfb, 0x87,
		0x2d, 0x5b, 0x78, 0x32, 0x01, 0x4f, 0xa6, 0x70, 0x1d, 0x99, 0xc2, 0xc8, 0x14, 0x2e, 0x21, 0x34,
		0x19, 0x85, 0x28, 0x7a, 0x1a, 0x88, 0x83, 0xc2, 0x64, 0x0b, 0xc2, 0x18, 0x4a, 0xec, 0xe2, 0x4c,
		0xe8, 0x32, 0x93, 0xc8, 0xc5, 0x8c, 0xc9, 0xd3, 0x69, 0x0c, 0xa4, 0x6a, 0x19, 0xca, 0x74, 0xbb,
		0xb9, 0xb7, 0x43, 0xa1, 0xec, 0x6e, 0x5e, 0x66, 0xc1, 0xe0, 0x39, 0x2b, 0x6e, 0x95, 0xc2, 0xff,
		0x9f, 0xbd, 0x6b, 0xdb, 0x6d, 0x1b, 0x49, 0xa2, 0xef, 0xfa, 0x0a, 0x82, 0x2f, 0x23, 0x61, 0xc2,
		0xb1, 0x6e, 0x8e, 0x13, 0xbf, 0x0c, 0x92, 0x9d, 0x0c, 0x10, 0xc0, 0xb9, 0x20, 0xb3, 0xeb, 0x05,
		0xd6, 0x16, 0x02, 0x5a, 0x6a, 0x3b, 0xdc, 0x50, 0x24, 0x41, 0xb6, 0x9c, 0x31, 0xd6, 0xf9, 0xf7,
		0x85, 0x6e, 0x94, 0x28, 0xea, 0xc2, 0x4b, 0x57, 0x35, 0x29, 0x9d, 0xbc, 0x8c, 0x27, 0xb1, 0xba,
		0xc5, 0x62, 0xf5, 0xe9, 0x53, 0x55, 0xdd, 0xa7, 0xfc, 0x50, 0xc2, 0x4c, 0x07, 0xcd, 0xb4, 0xc8,
		0xb1, 0xc1, 0x52, 0x87, 0x2d, 0x45, 0x7a, 0x34, 0x8d, 0xe6, 0x08, 0xc3, 0xa0, 0xea, 0xbb, 0x7a,
		0xa3, 0x82, 0x6e, 0x66, 0x0e, 0xef, 0x22, 0xba, 0x08, 0x64, 0x3a, 0x38, 0xa2, 0x0f, 0x44, 0x1f,
		0x88, 0x3e, 0x10, 0x7d, 0x10, 0xfa, 0xff, 0xc4, 0xf1, 0xe4, 0xcb, 0x3e, 0x61, 0xe0, 0x41, 0xd0,
		0x24, 0x84, 0xb8, 0xd5, 0x26, 0xe1, 0x81, 0x3b, 0x8e, 0x56, 0x99, 0x5c, 0xad, 0x30, 0xd9, 0xfb,
		0x08, 0xf2, 0xf5, 0x09, 0x24, 0xe4, 0xa2, 0x2c, 0xad, 0x28, 0x63, 0x17, 0xe0, 0x39, 0xfc, 0x76,
		0x2a, 0x5e, 0x71, 0x9a, 0x1a, 0x6f, 0xd5, 0xa4, 0xde, 0x04, 0x17, 0xf8, 0x57, 0xd4, 0xdb, 0x09,
		0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd,
		0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0xe7, 0xd4, 0xdb, 0x27, 0xe9, 0x35, 0xb5, 0x62, 0xdf, 0x3e,
		0x41, 0x6b, 0x29, 0x10, 0x70, 0x10, 0x70, 0x10, 0x70, 0x10, 0xf0, 0x14, 0x01, 0x7f, 0x45, 0xc8,
		0xbf, 0xcf, 0xc1, 0xbf, 0xc1, 0xbf, 0xc1, 0xbf, 0xf5, 0xf0, 0xef, 0xee, 0x39, 0xe8, 0x36, 0xe8,
		0x76, 0xfd, 0xe9, 0xb6, 0xa0, 0x3c, 0x64, 0x22, 0x70, 0xc8, 0x04, 0x44, 0x1b, 0x44, 0x1b, 0x44,
		0x1b, 0x99, 0x6e, 0x30, 0x6d, 0x30, 0x6d, 0x30, 0xed, 0x22, 0x2e, 0x80, 0x4c, 0x37, 0xa8, 0xf7,
		0x71, 0x52, 0x6f, 0xca, 0x43, 0x26, 0x02, 0x87, 0x4c, 0x40, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41,
		0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x41, 0xbd, 0x17, 0x2f, 0x3d,
		0xa0, 0xcc, 0x7a, 0x07, 0xc8, 0x7a, 0x83, 0x7a, 0x83, 0x7a, 0x83, 0x7a, 0x83, 0x7a, 0x83, 0x7a,
		0x83, 0x7a, 0x83, 0x7a, 0x83, 0x7a, 0x83, 0x7a, 0x83, 0x7a, 0x2f, 0xa9, 0x37, 0x65, 0xd6, 0x3b,
		0x40, 0xd6, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4,
		0x1b, 0xd4, 0x1b, 0xd4, 0xbb, 0xde, 0xd4, 0xbb, 0x52, 0x4a, 0xeb, 0x8b, 0xce, 0x80, 0x6a, 0xa5,
		0x72, 0x69, 0x3a, 0x02, 0xd2, 0x75, 0x02, 0x64, 0xed, 0x00, 0x48, 0xd8, 0xf9, 0x8f, 0xb0, 0xe3,
		0x1f, 0x7a, 0x9d, 0xed, 0x6a, 0x22, 0xb5, 0xb5, 0xf3, 0xd0, 0x19, 0x55, 0xf3, 0x11, 0x83, 0xbf,
		0xe1, 0xd4, 0x5f, 0x8f, 0xc3, 0xf7, 0xf3, 0xa7, 0x79, 0xbb, 0x7c, 0x98, 0xaf, 0x9b, 0x7f, 0x81,
		0xce, 0x68, 0xc7, 0xd5, 0x19, 0x8d, 0xa2, 0x9d, 0x56, 0x35, 0x5c, 0xb7, 0xae, 0xbd, 0xd3, 0xfc,
		0x89, 0x24, 0x6d, 0x9e, 0xb6, 0x65, 0x7c, 0x74, 0x4f, 0xe3, 0xcf, 0x9b, 0xa1, 0x7b, 0x1a, 0xba,
		0xa7, 0x1d, 0x1e, 0x88, 0x00, 0x0c, 0x52, 0xae, 0xad, 0x1c, 0x10, 0x14, 0x03, 0x83, 0x72, 0x80,
		0xa0, 0x00, 0x0a, 0x7a, 0xc0, 0xa0, 0x02, 0x0e, 0x72, 0x00, 0x21, 0x07, 0x12, 0x16, 0x40, 0xa9,
		0x66, 0x54, 0x8f, 0xfe, 0x69, 0x49, 0xa8, 0x41, 0xad, 0x0f, 0xb5, 0xbe, 0x2a, 0x42, 0x13, 0x2b,
		0x44, 0xd1, 0xa4, 0x5a, 0xd1, 0x3f, 0x6d, 0x07, 0xbb, 0x41, 0xff, 0xb4, 0x03, 0xd3, 0xa0, 0x7f,
		0x9a, 0xc6, 0x75, 0xa6, 0xcf, 0x4a, 0xe8, 0x9f, 0x96, 0xc9, 0x4c, 0xe8, 0x9f, 0x96, 0xd9, 0x52,
		0xe8, 0x9f, 0x86, 0xfe, 0x69, 0xe5, 0xbd, 0x09, 0xfd, 0xd3, 0x10, 0x7d, 0x20, 0xfa, 0x40, 0xf4,
		0x81, 0x93, 0x86, 0xe9, 0xa1, 0x71, 0xd2, 0xf0, 0x60, 0x20, 0x83, 0x93, 0x86, 0xd5, 0xe4, 0xa2,
		0x38, 0x69, 0x58, 0x5f, 0xaf, 0xc0, 0x49, 0xc3, 0xea, 0x50, 0x6f, 0xf4, 0x4f, 0x03, 0xf5, 0x06,
		0xf5, 0x06, 0xf5, 0x06, 0xf5, 0x06, 0xf5, 0x06, 0xf5, 0x06, 0xf5, 0x06, 0xf5, 0x06, 0xf5, 0x06,
		0xf5, 0x66, 0xa1, 0xde, 0xe8, 0x9f, 0x06, 0x02, 0x0e, 0x02, 0x0e, 0x02, 0x7e, 0x14, 0x04, 0x1c,
		0xfd, 0xd3, 0xc0, 0xbf, 0xc1, 0xb4, 0x8e, 0x90, 0x7f, 0xa3, 0x7f, 0x1a, 0xe8, 0xf6, 0x31, 0xd0,
		0x6d, 0xf4, 0x4f, 0x03, 0xd1, 0x06, 0xd1, 0x06, 0xd1, 0xae, 0x3b, 0xd1, 0x46, 0xa6, 0x1b, 0x4c,
		0x1b, 0x24, 0xeb, 0x18, 0x99, 0x36, 0x32, 0xdd, 0xa0, 0xde, 0xc7, 0x49, 0xbd, 0xd1, 0x3f, 0x0d,
		0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b, 0xd4, 0x1b,
		0xd4, 0x1b, 0xd4, 0x9b, 0x83, 0x7a, 0xa3, 0x7f, 0x1a, 0xa8, 0x37, 0xa8, 0x37, 0xa8, 0x37, 0xa8,
		0x37, 0xa8, 0x37, 0xa8, 0x37, 0xa8, 0x37, 0xa8, 0x37, 0xa8, 0x37, 0xa8, 0x37, 0x0f, 0xf5, 0x46,
		0xff, 0x34, 0x50, 0x6f, 0x50, 0x6f, 0x50, 0x6f, 0x50, 0x6f, 0x50, 0x6f, 0x50, 0x6f, 0x50, 0x6f,
		0x50, 0x6f, 0x50, 0x6f, 0x50, 0x6f, 0xda, 0x91, 0xd0, 0x3f, 0x0d, 0xfd, 0xd3, 0xf6, 0x0c, 0x8d,
		0xfe, 0x69, 0xac, 0xad, 0xa6, 0xd2, 0xbd, 0x46, 0xce, 0xc8, 0xda, 0x8f, 0x18, 0x5a, 0xda, 0x50,
		0x7d, 0x5a, 0x3c, 0xce, 0xaa, 0x85, 0x5a, 0xea, 0x6f, 0xd0, 0x43, 0xed, 0xf8, 0x7a, 0xa8, 0x91,
		0x78, 0x71, 0x05, 0xbc, 0x57, 0x5b, 0x17, 0xb5, 0x06, 0xa3, 0x4f, 0xaa, 0xf2, 0x45, 0x7d, 0x3e,
		0x68, 0x96, 0x69, 0x3a, 0xc7, 0xe9, 0x64, 0xc5, 0xfc, 0x29, 0xbf, 0x37, 0x14, 0xf0, 0x04, 0x33,
		0x92, 0xb6, 0x9c, 0x14, 0x3f, 0x1d, 0xb1, 0xea, 0xb2, 0x37, 0x1f, 0xa7, 0xa0, 0x2f, 0x96, 0x6b,
		0x9a, 0x55, 0x3a, 0xbb, 0xaa, 0x22, 0x8b, 0x1a, 0x5b, 0x62, 0xea, 0xb0, 0x43, 0x7f, 0x3c, 0xf6,
		0xbd, 0x32, 0x0e, 0xaa, 0x28, 0x23, 0xaa, 0x3c, 0xf3, 0xa9, 0x3c, 0xc3, 0x99, 0xc8, 0x64, 0xae,
		0xd9, 0xae, 0x26, 0x28, 0x5a, 0xb6, 0x19, 0x95, 0x69, 0x8f, 0xc6, 0x8e, 0x67, 0x95, 0x5c, 0x86,
		0x29, 0x27, 0x4c, 0x8c, 0x8a, 0x56, 0x97, 0x3c, 0x8b, 0x56, 0xf5, 0xe2, 0x25, 0x5b, 0xc4, 0x64,
		0x8b, 0x99, 0x6c, 0x51, 0x57, 0x83, 0xbe, 0x2b, 0x6b, 0x71, 0xe9, 0xda, 0x91, 0xb4, 0x86, 0xdf,
		0x16, 0x29, 0x7a, 0xc5, 0xbd, 0x2d, 0xd7, 0x07, 0x57, 0xdb, 0xd4, 0xb2, 0x7d, 0x8a, 0x4d, 0x2d,
		0x95, 0x42, 0x03, 0x15, 0x44, 0x90, 0x43, 0x05, 0x39, 0x64, 0x90, 0x43, 0x47, 0x35, 0x53, 0xac,
		0xca, 0xab, 0x97, 0xb1, 0xdf, 0x8e, 0x6c, 0x29, 0x2c, 0xdb, 0x1b, 0x59, 0xd2, 0x19, 0xab, 0x6c,
		0x73, 0x16, 0xf3, 0x01, 0x85, 0x55, 0x4b, 0xf3, 0xb3, 0x2d, 0xa5, 0x08, 0x3d, 0xe5, 0xf5, 0x4a,
		0xf3, 0xa6, 0x6d, 0xbd, 0x1e, 0xfc, 0xaf, 0xff, 0xd3, 0x6a, 0x76, 0x6e, 0xda, 0x56, 0x77, 0xf0,
		0xdc, 0xbe, 0xe9, 0x58, 0xaf, 0x07, 0x2d, 0xab, 0x39, 0xff, 0xe1, 0xf9, 0xa6, 0xf3, 0xdc, 0x1d,
		0xcc, 0x7e, 0xeb, 0xb9, 0x77, 0xd3, 0xb6, 0x3a, 0x83, 0xd6, 0x3f, 0x9b, 0xed, 0xf9, 0xff, 0x77,
		0xe6, 0xff, 0xe9, 0xde, 0xb4, 0xad, 0xde, 0xa0, 0x75, 0x79, 0xd3, 0xb6, 0xce, 0xe7, 0xbf, 0xb9,
		0xf6, 0x63, 0xf3, 0xf6, 0xf6, 0xb7, 0xd9, 0x0f, 0xbf, 0xb6, 0x7e, 0x6f, 0xfe, 0xe7, 0xf9, 0xe6,
		0xf6, 0xf6, 0xd7, 0xdb, 0x5b, 0x6b, 0xd0, 0x9c, 0x4d, 0xd7, 0x9b, 0x4e, 0x37, 0xfd, 0xc7, 0xd6,
		0x65, 0x73, 0xf5, 0x91, 0xd6, 0x73, 0xa7, 0x7f, 0xd9, 0x6e, 0xb7, 0x5a, 0xbf, 0xab, 0x73, 0xea,
		0x41, 0x55, 0xd2, 0x6b, 0x4a, 0x12, 0x40, 0x4a, 0xb8, 0xb0, 0xda, 0x10, 0x15, 0x5b, 0x22, 0xb6,
		0x44, 0x6c, 0x89, 0x35, 0xdf, 0x12, 0x69, 0x9a, 0xa3, 0x52, 0x34, 0x45, 0xa5, 0x6d, 0x86, 0x9a,
		0x4c, 0x13, 0x38, 0x91, 0x0c, 0x67, 0xa7, 0x03, 0x2c, 0xa5, 0x08, 0x19, 0x4f, 0x46, 0xd8, 0x0a,
		0x95, 0xb8, 0x47, 0xec, 0x3c, 0x8b, 0x32, 0xf2, 0x7f, 0x78, 0x04, 0x87, 0xea, 0x5e, 0xd4, 0xd3,
		0x1a, 0x41, 0x28, 0xac, 0x91, 0x08, 0x5c, 0xff, 0x69, 0x86, 0x48, 0xb0, 0xcb, 0xc2, 0x2e, 0x52,
		0x44, 0xd2, 0xf1, 0x1e, 0x60, 0x90, 0xa5, 0x41, 0x26, 0x41, 0xd5, 0x4f, 0xa2, 0x0e, 0xaa, 0xb6,
		0x81, 0xa2, 0xba, 0x9d, 0x0c, 0x04, 0xf8, 0x2b, 0x8b, 0xb3, 0x0d, 0xf0, 0x4c, 0x61, 0xf6, 0xdc,
		0x60, 0xac, 0x36, 0xce, 0xbe, 0xef, 0xd7, 0x37, 0xd3, 0x2f, 0x3f, 0xff, 0x59, 0x5b, 0x21, 0xbb,
		0x44, 0xe1, 0xcb, 0x9f, 0x75, 0x3d, 0x56, 0x5c, 0x0e, 0x59, 0x1f, 0xb4, 0x62, 0xd5, 0x90, 0x2e,
		0xaa, 0x21, 0x15, 0x89, 0xe7, 0x50, 0x0d, 0xc9, 0xf7, 0x54, 0xa8, 0x86, 0x28, 0x4e, 0xfd, 0x74,
		0x91, 0xfa, 0x41, 0xea, 0x07, 0xa9, 0x1f, 0x54, 0x43, 0x50, 0x0d, 0xa9, 0x42, 0x60, 0x87, 0x6a,
		0x08, 0xb6, 0x44, 0x6c, 0x89, 0xd8, 0x12, 0x8f, 0x75, 0x4b, 0x44, 0x35, 0x64, 0x4b, 0x96, 0x60,
		0x96, 0xbe, 0xb2, 0x5d, 0x94, 0x42, 0x52, 0xb6, 0x41, 0x1d, 0x64, 0x65, 0x8a, 0x89, 0xf7, 0xdd,
		0x83, 0x35, 0x62, 0x6b, 0x20, 0xd3, 0xcf, 0x4f, 0x2d, 0x91, 0xe9, 0x57, 0x91, 0xe9, 0x57, 0x97,
		0x18, 0x36, 0xd8, 0x13, 0xfd, 0x9f, 0x02, 0x11, 0x6a, 0xce, 0xf3, 0xe3, 0xc2, 0x5a, 0x0e, 0x67,
		0xab, 0xc1, 0x7d, 0xb5, 0x12, 0xde, 0xc4, 0x73, 0x5d, 0xed, 0x31, 0xf8, 0x11, 0x2d, 0xdf, 0x88,
		0xe5, 0x78, 0x91, 0xb4, 0xbd, 0x12, 0x41, 0xd2, 0x5a, 0x08, 0xb7, 0x6d, 0x58, 0x5c, 0x66, 0x53,
		0x27, 0xfd, 0x75, 0xa2, 0x17, 0xda, 0x54, 0x49, 0x73, 0xd5, 0xec, 0x52, 0x9b, 0xeb, 0x0f, 0x6d,
		0xd7, 0x7a, 0x8c, 0x1c, 0x6b, 0xf8, 0xcd, 0x77, 0x54, 0xbc, 0xf6, 0xb8, 0x9c, 0xb3, 0x39, 0xb2,
		0x9a, 0x72, 0xee, 0xf9, 0x31, 0x5f, 0x6e, 0x53, 0xae, 0xdf, 0x87, 0x92, 0x2e, 0xa9, 0xfe, 0xde,
		0x91, 0x94, 0x75, 0xed, 0x89, 0xf4, 0x2d, 0x3b, 0x8a, 0x9c, 0x07, 0x4f, 0x8c, 0xd4, 0x27, 0xb0,
		0x93, 0xc3, 0xab, 0xcd, 0x63, 0xf7, 0x4f, 0xf1, 0x54, 0x3f, 0x99, 0xcc, 0x27, 0x72, 0xd9, 0x5a,
		0x60, 0x44, 0x71, 0xca, 0x42, 0x91, 0x07, 0xff, 0xa1, 0x58, 0x10, 0x78, 0x8d, 0x11, 0x4c, 0x11,
		0x81, 0x2e, 0x3b, 0xbc, 0x31, 0x0f, 0x8d, 0xee, 0x70, 0x07, 0xba, 0xc3, 0xd0, 0x1d, 0xae, 0x20,
		0x50, 0xb1, 0x02, 0x16, 0x4d, 0x0e, 0x58, 0xb5, 0xee, 0xf0, 0x1f, 0x04, 0xca, 0xe6, 0x2b, 0xde,
		0x14, 0xa3, 0x0d, 0x9d, 0x73, 0x26, 0x88, 0xd4, 0x6a, 0x3e, 0x22, 0xc7, 0xa1, 0x11, 0x56, 0x4f,
		0x03, 0x5d, 0x97, 0x68, 0x02, 0x42, 0xc0, 0xe3, 0x07, 0x3e, 0x2e, 0x00, 0x64, 0x07, 0x42, 0x76,
		0x40, 0xd4, 0x02, 0x8c, 0x34, 0x00, 0x49, 0x04, 0x94, 0xb1, 0x85, 0xc8, 0x84, 0xda, 0x53, 0xeb,
		0x67, 0xe2, 0x78, 0xb2, 0xd7, 0xa5, 0x5c, 0x37, 0x0b, 0x34, 0xbb, 0x20, 0x9c, 0x82, 0x56, 0xc0,
		0x7d, 0xf9, 0x87, 0x76, 0xdd, 0x1b, 0x5c, 0x82, 0xee, 0xf1, 0x64, 0xb1, 0xaa, 0xf7, 0x0b, 0x9e,
		0xf9, 0xb8, 0xa5, 0xbc, 0x57, 0xbe, 0xce, 0x25, 0xe9, 0x4d, 0x0c, 0x0b, 0x49, 0x57, 0x61, 0x10,
		0x7e, 0x4f, 0xbb, 0xca, 0xcb, 0x8b, 0x8b, 0x8b, 0x2e, 0xb5, 0xe8, 0xfb, 0x29, 0x7a, 0x4c, 0xa3,
		0x9e, 0xa3, 0x0f, 0x6a, 0x22, 0x62, 0x4f, 0xb0, 0x22, 0xe7, 0xc1, 0xc0, 0xd8, 0x1f, 0x09, 0xa6,
		0xb8, 0x63, 0x36, 0x15, 0x6d, 0xc8, 0x71, 0x4e, 0x1d, 0x72, 0xb4, 0x11, 0x72, 0x20, 0xe4, 0x40,
		0xc8, 0x51, 0xc1, 0x90, 0x83, 0x2a, 0x47, 0x13, 0x4f, 0x70, 0x1f, 0xfa, 0x63, 0x2b, 0xf0, 0x7d,
		0x97, 0xde, 0x9f, 0x97, 0x2b, 0x75, 0x35, 0x25, 0xb1, 0x7b, 0xa9, 0xad, 0x85, 0x69, 0x83, 0x51,
		0x4e, 0x38, 0xd5, 0x07, 0xab, 0xdc, 0xf0, 0xaa, 0x0d, 0x66, 0xb5, 0xc1, 0xad, 0x56, 0xd8, 0x65,
		0xa2, 0xd4, 0xc4, 0x2b, 0x90, 0x1a, 0x8e, 0xe3, 0x89, 0x1e, 0x23, 0x67, 0x06, 0x91, 0xd6, 0xe2,
		0xc4, 0x24, 0xd3, 0x5a, 0x88, 0x8f, 0x13, 0x26, 0xa6, 0x67, 0x72, 0x4b, 0xda, 0x04, 0xbb, 0x36,
		0xd8, 0xd6, 0x01, 0xdf, 0xfa, 0x61, 0x5c, 0x17, 0x9c, 0x6b, 0x87, 0x75, 0xed, 0xf0, 0x5e, 0x09,
		0x98, 0xe7, 0x81, 0x7b, 0x26, 0xd8, 0x8f, 0x2d, 0x4a, 0x5e, 0x00, 0xd8, 0xb9, 0x7e, 0x23, 0x19,
		0x3a, 0xde, 0x03, 0xe7, 0xba, 0x8d, 0x65, 0x01, 0x1a, 0xc7, 0xe1, 0x27, 0xf5, 0x26, 0x1e, 0x44,
		0x8d, 0xe5, 0x76, 0xce, 0xc7, 0x7f, 0xc5, 0x64, 0xeb, 0x0d, 0x86, 0xb3, 0xcd, 0xd3, 0xd2, 0x67,
		0x89, 0x43, 0x93, 0x67, 0xc9, 0x23, 0x4d, 0x67, 0x71, 0x42, 0xee, 0x6c, 0x15, 0x63, 0xd6, 0x34,
		0x85, 0x4b, 0xd9, 0x9d, 0xf6, 0x7e, 0xe2, 0xba, 0x34, 0x67, 0xcd, 0x76, 0xc7, 0xfc, 0xf1, 0x94,
		0x88, 0xf9, 0x11, 0xf3, 0x23, 0xe6, 0x47, 0xcc, 0x8f, 0x98, 0x7f, 0x73, 0x22, 0x16, 0x44, 0x4e,
		0x2d, 0x76, 0x06, 0x50, 0x46, 0x84, 0x8f, 0x08, 0x1f, 0x11, 0x3e, 0x22, 0x7c, 0x44, 0xf8, 0x7b,
		0xd6, 0xaf, 0x18, 0x07, 0xf2, 0x49, 0x47, 0x80, 0xdf, 0x43, 0x80, 0x8f, 0x00, 0xbf, 0x7e, 0x01,
		0x7e, 0x1c, 0x50, 0xd6, 0x35, 0xc0, 0xaf, 0xd5, 0x39, 0x04, 0x26, 0xf7, 0xac, 0xbb, 0x5b, 0x9a,
		0x75, 0x39, 0x78, 0x57, 0xe9, 0x8b, 0x49, 0xc4, 0xce, 0x56, 0x4f, 0x27, 0xa3, 0xb8, 0x3d, 0xc8,
		0x23, 0xca, 0x73, 0x1d, 0xfc, 0x88, 0x16, 0x03, 0xbc, 0x5f, 0x3c, 0xfa, 0xd7, 0xab, 0xe9, 0xb3,
		0x5d, 0x47, 0xce, 0x1b, 0xe5, 0x08, 0xfe, 0xf3, 0x48, 0xaf, 0x1d, 0x13, 0x2d, 0x8a, 0x9a, 0x2c,
		0x06, 0xf3, 0x88, 0x04, 0x91, 0x47, 0x4e, 0x28, 0x86, 0xd2, 0x7d, 0x22, 0x94, 0x96, 0x48, 0x4f,
		0x01, 0x79, 0x89, 0xea, 0x66, 0x58, 0x20, 0x2f, 0xa1, 0x35, 0xc3, 0x71, 0x1a, 0xf2, 0x12, 0x4a,
		0x75, 0xe7, 0x0e, 0xae, 0x95, 0x7d, 0x93, 0xd2, 0x08, 0x4f, 0xb4, 0x21, 0x3c, 0x01, 0xe1, 0x89,
		0x0a, 0x27, 0x71, 0x21, 0x3c, 0x41, 0x9f, 0x64, 0xa5, 0xbf, 0x3f, 0x4d, 0x78, 0x6f, 0x9a, 0xf8,
		0xbe, 0x34, 0x61, 0xd2, 0x86, 0xe3, 0x7e, 0x34, 0xd7, 0xbd, 0x68, 0xf6, 0xdb, 0xad, 0x7c, 0xb7,
		0x5a, 0x29, 0x8f, 0x14, 0x71, 0xdc, 0x7b, 0x66, 0xbe, 0xef, 0x7c, 0xcc, 0x9e, 0x50, 0x93, 0x34,
		0xe5, 0x00, 0x99, 0x21, 0x64, 0x86, 0xd2, 0x99, 0xa1, 0x74, 0x76, 0x03, 0x3d, 0x0d, 0x8e, 0xa2,
		0xa7, 0x41, 0xb6, 0xf7, 0x5f, 0xc7, 0xa6, 0xc0, 0xa1, 0x18, 0xfb, 0x52, 0x90, 0x08, 0x4a, 0xa7,
		0x87, 0x86, 0xa2, 0x34, 0x7f, 0x80, 0x0c, 0x45, 0x69, 0x28, 0x4a, 0x1f, 0x1e, 0x08, 0x8a, 0xd2,
		0x48, 0xf9, 0x93, 0xe6, 0xcf, 0x90, 0xf2, 0xaf, 0x21, 0x81, 0x57, 0x9e, 0xf2, 0x5f, 0xa3, 0x04,
		0xb4, 0x92, 0xd2, 0x9b, 0x13, 0x41, 0x53, 0x1a, 0xa9, 0x7d, 0xed, 0x10, 0xc5, 0x06, 0x55, 0xac,
		0x90, 0x45, 0x93, 0x65, 0xa9, 0x97, 0xa6, 0x34, 0x64, 0xdd, 0x74, 0xc2, 0x1b, 0x07, 0xcc, 0xf1,
		0xc3, 0x1d, 0x17, 0xec, 0xb1, 0xc3, 0x1f, 0x3b, 0x0c, 0x6a, 0x81, 0x43, 0x1a, 0x58, 0x24, 0x82,
		0x47, 0x72, 0x98, 0x8c, 0x27, 0x80, 0xac, 0x5b, 0xe5, 0x61, 0x94, 0x13, 0x4e, 0xf5, 0xc1, 0x2a,
		0x37, 0xbc, 0x6a, 0x83, 0x59, 0x6d, 0x70, 0xab, 0x15, 0x76, 0x69, 0xe1, 0x97, 0x18, 0x86, 0xd9,
		0xe0, 0x38, 0x9e, 0x08, 0xb2, 0x6e, 0xe4, 0xd3, 0xe1, 0xd2, 0x37, 0xcb, 0x37, 0xc0, 0xa5, 0x6f,
		0x5c, 0xfa, 0x26, 0x9f, 0x05, 0xb2, 0x6e, 0x54, 0x68, 0x0c, 0x59, 0xb7, 0x4a, 0x10, 0x8f, 0x53,
		0xbd, 0xf5, 0x9d, 0x3a, 0xb3, 0xb0, 0x71, 0xf5, 0x71, 0xa3, 0xae, 0x00, 0x61, 0xb7, 0x8c, 0x51,
		0x3f, 0x84, 0xdd, 0x10, 0xf5, 0x23, 0xea, 0x47, 0xd4, 0x8f, 0xa8, 0xbf, 0x4a, 0x51, 0x3f, 0x84,
		0xdd, 0x10, 0xe3, 0x23, 0xc6, 0x47, 0x8c, 0x8f, 0x18, 0xff, 0x14, 0x63, 0x7c, 0x08, 0xbb, 0x21,
		0xc4, 0x47, 0x88, 0x9f, 0x27, 0xc4, 0x87, 0xb4, 0x1b, 0xa3, 0xa3, 0x9e, 0x9c, 0xb4, 0x5b, 0x61,
		0xc7, 0x34, 0x4f, 0xbd, 0xab, 0xea, 0xca, 0x32, 0x4c, 0x87, 0xf0, 0xd6, 0x26, 0xa4, 0x3d, 0x8a,
		0xd7, 0xa6, 0x3e, 0x8a, 0xd7, 0xc5, 0x51, 0xbc, 0xea, 0x05, 0x1e, 0x38, 0x8a, 0x87, 0xed, 0x8f,
		0x3e, 0x30, 0xa0, 0x17, 0x25, 0xd9, 0x44, 0xb3, 0x0b, 0xc2, 0x29, 0x68, 0x45, 0x4a, 0x96, 0x7f,
		0x18, 0x78, 0x32, 0x87, 0x68, 0x49, 0x3c, 0x19, 0x93, 0x78, 0x49, 0x3c, 0xdf, 0x09, 0xb5, 0xe8,
		0x67, 0x28, 0x62, 0x70, 0x88, 0x9b, 0xa4, 0x5d, 0x85, 0x45, 0xe4, 0xe4, 0x14, 0x3d, 0xa6, 0xa6,
		0x51, 0xe5, 0x00, 0xda, 0xd2, 0xd5, 0x8f, 0x76, 0xeb, 0x1a, 0xe5, 0x1e, 0x97, 0xba, 0xf4, 0x97,
		0xd9, 0xc3, 0x41, 0x5e, 0x5a, 0xff, 0xba, 0xa8, 0xcb, 0x7a, 0x80, 0xbe, 0x74, 0xae, 0x50, 0x06,
		0xfa, 0xd2, 0x10, 0x9b, 0x80, 0xd8, 0x44, 0x2d, 0x81, 0x9e, 0x4c, 0x6c, 0x82, 0x57, 0x60, 0x7a,
		0xef, 0xac, 0x50, 0x98, 0x86, 0x0c, 0x85, 0x76, 0xf0, 0x62, 0x03, 0x31, 0x56, 0x30, 0xab, 0x47,
		0x94, 0x07, 0x85, 0xe9, 0xad, 0x43, 0x43, 0x61, 0x3a, 0x53, 0xe6, 0x0d, 0xba, 0xc2, 0xd5, 0x58,
		0xc6, 0x49, 0x17, 0x80, 0xc2, 0x74, 0x9d, 0x3c, 0x01, 0x0a, 0xd3, 0x48, 0x0e, 0xd5, 0x38, 0x39,
		0x04, 0x89, 0x69, 0x0e, 0x47, 0xa8, 0xae, 0x03, 0x68, 0xd3, 0x98, 0x6e, 0x30, 0xbe, 0x56, 0x53,
		0xfc, 0x2d, 0x43, 0xdb, 0x9a, 0x4c, 0xad, 0x70, 0xe7, 0x96, 0x23, 0xcc, 0x66, 0x28, 0xee, 0x45,
		0x28, 0xe6, 0x31, 0x7f, 0x39, 0x7e, 0xa9, 0x50, 0xe6, 0xf9, 0xcb, 0x9f, 0xff, 0x30, 0x5e, 0x75,
		0x3b, 0xfd, 0x4b, 0xe3, 0xda, 0x09, 0xe5, 0xc4, 0x76, 0x8d, 0xcf, 0xa1, 0xf3, 0x68, 0x4b, 0x61,
		0xfc, 0xdb, 0x09, 0x85, 0xb1, 0xa8, 0x1b, 0x18, 0x7f, 0x4d, 0x82, 0xc0, 0x0f, 0xe5, 0xad, 0xb7,
		0x1a, 0xc2, 0xf1, 0x8c, 0x77, 0xf2, 0x9b, 0x08, 0x3d, 0x21, 0x8d, 0xeb, 0xcf, 0x1f, 0x2b, 0xae,
		0x10, 0xbd, 0x32, 0x7e, 0x9d, 0x44, 0xa2, 0xd5, 0xbd, 0x1d, 0xdd, 0xb0, 0xda, 0xe0, 0xe5, 0x1f,
		0x45, 0xd7, 0xbb, 0x22, 0xf8, 0xae, 0x0a, 0x6c, 0x97, 0x70, 0x76, 0x7d, 0xc5, 0xc9, 0x62, 0xbe,
		0x9a, 0xdf, 0xc3, 0xf2, 0x7d, 0x22, 0xa7, 0x47, 0x4d, 0xb1, 0x67, 0x96, 0x65, 0xca, 0x5b, 0xf8,
		0x31, 0xaf, 0x9c, 0x48, 0xbe, 0x91, 0xb2, 0x58, 0x0e, 0xda, 0xfc, 0xe0, 0x78, 0xef, 0x5c, 0x31,
		0xc5, 0x8f, 0x82, 0xd1, 0xd2, 0x34, 0x8c, 0x5c, 0x1b, 0xa1, 0xf3, 0xaa, 0xdf, 0x7f, 0x79, 0xd1,
		0xef, 0xb7, 0x2f, 0x7a, 0x17, 0xed, 0xd7, 0xe7, 0xe7, 0x9d, 0x97, 0x45, 0x62, 0x3e, 0xf3, 0x53,
		0x38, 0x12, 0xa1, 0x18, 0xbd, 0x9d, 0xda, 0xc4, 0x9b, 0xb8, 0x6e, 0x99, 0x21, 0xfe, 0x15, 0x89,
		0xb0, 0x50, 0x78, 0x96, 0xf7, 0x15, 0x96, 0x04, 0x03, 0x7e, 0x10, 0x28, 0xb0, 0xdc, 0x79, 0x96,
		0x79, 0xbe, 0x25, 0x9d, 0x7d, 0x61, 0x66, 0xfb, 0xcd, 0x8c, 0xef, 0xbd, 0xe8, 0xfb, 0x26, 0x7e,
		0xcf, 0x39, 0x5e, 0x2a, 0xc9, 0xcb, 0xcc, 0xf6, 0xee, 0x0e, 0xbf, 0x89, 0x0c, 0x6f, 0xc1, 0x5c,
		0x1a, 0xc2, 0x72, 0xb2, 0x97, 0xe4, 0x57, 0xda, 0x6d, 0x6b, 0x1f, 0xce, 0xf8, 0xc6, 0xf3, 0xd5,
		0xad, 0x72, 0xd7, 0xa3, 0x8a, 0xd4, 0x99, 0xca, 0xd7, 0x8f, 0x8a, 0xd2, 0xe8, 0xd2, 0xf5, 0x9e,
		0xd2, 0x9c, 0x58, 0x49, 0x7d, 0x46, 0x2d, 0x26, 0xe4, 0xae, 0x93, 0x24, 0xdc, 0x31, 0xd7, 0xee,
		0x9f, 0x53, 0x79, 0x2a, 0xc3, 0x8a, 0x6b, 0x94, 0xb0, 0xc0, 0x92, 0xc0, 0x64, 0x5f, 0x55, 0xf9,
		0x98, 0x4b, 0x7e, 0xa6, 0xa2, 0x84, 0x99, 0x14, 0x60, 0x22, 0x05, 0x98, 0xc7, 0x21, 0xdb, 0xe6,
		0xdc, 0x69, 0xd4, 0xed, 0x30, 0x19, 0xdc, 0xb1, 0xfc, 0x26, 0xb2, 0x7f, 0xad, 0xee, 0xf6, 0xca,
		0xed, 0xff, 0xb2, 0xc3, 0x96, 0x59, 0x6d, 0x58, 0xda, 0x76, 0x7b, 0x4c, 0x56, 0xdc, 0x54, 0xdb,
		0x4d, 0x94, 0x36, 0xc0, 0x96, 0x87, 0x37, 0xd7, 0xbe, 0xa5, 0x25, 0xfd, 0xc0, 0x77, 0xfd, 0x87,
		0xa7, 0x9d, 0x26, 0x48, 0xc0, 0x51, 0xea, 0x53, 0x3b, 0x4c, 0xbb, 0x7f, 0x5b, 0x3c, 0xb8, 0x0d,
		0x66, 0xd9, 0xf6, 0xf2, 0x6f, 0x73, 0x59, 0xb7, 0xb5, 0xdc, 0xdb, 0x58, 0xee, 0x6d, 0xab, 0xd0,
		0x36, 0x95, 0xcf, 0xb9, 0x0f, 0x6e, 0x3b, 0x2b, 0xfb, 0x8d, 0x84, 0x27, 0x1d, 0xf9, 0x14, 0x8a,
		0xfb, 0x7d, 0xc6, 0x5b, 0xee, 0x2d, 0x7b, 0x20, 0xd2, 0x7c, 0xbf, 0x18, 0xea, 0xad, 0x1d, 0x65,
		0x30, 0xf3, 0xba, 0x63, 0x1d, 0x70, 0xa8, 0xf8, 0x33, 0xb3, 0xea, 0x61, 0x94, 0x29, 0xff, 0x99,
		0x93, 0xfc, 0xd9, 0xde, 0x93, 0x25, 0x7d, 0xcb, 0xf6, 0x9e, 0x4c, 0x15, 0x4c, 0x34, 0xe7, 0xec,
		0xc3, 0x49, 0x24, 0xfd, 0xb1, 0x8e, 0x99, 0xbf, 0x4d, 0xee, 0xac, 0x28, 0xf0, 0xbf, 0x0b, 0xad,
		0x93, 0x5b, 0x23, 0x27, 0xfa, 0xaf, 0xef, 0x78, 0xd2, 0x2c, 0x49, 0x4a, 0x06, 0x79, 0xd7, 0x4f,
		0x66, 0xc4, 0x94, 0xfb, 0x56, 0x54, 0xd2, 0x99, 0xa7, 0xbf, 0x09, 0x64, 0x04, 0x32, 0x96, 0x45,
		0xc6, 0x78, 0xbb, 0xdd, 0xed, 0x50, 0x0c, 0xc8, 0xe8, 0xf6, 0x1e, 0x03, 0x4f, 0x07, 0x3a, 0x8c,
		0x03, 0x37, 0xb2, 0x84, 0xa6, 0xc9, 0x83, 0xbb, 0x3b, 0x6d, 0x73, 0x3f, 0x06, 0x6e, 0xa4, 0x67,
		0xde, 0x1f, 0xda, 0xe6, 0xd5, 0x67, 0xec, 0xbf, 0x5d, 0xdb, 0xcb, 0x3a, 0xbb, 0xda, 0xbd, 0x67,
		0x07, 0x42, 0xe5, 0xa8, 0x19, 0x9b, 0xe3, 0x49, 0x24, 0x0f, 0x2e, 0xfa, 0x0c, 0x01, 0xe2, 0xd2,
		0x1a, 0x9e, 0x2f, 0x9b, 0x23, 0x11, 0x3a, 0x8f, 0x62, 0x64, 0xcd, 0x84, 0x80, 0xfd, 0xd0, 0x8a,
		0x84, 0x7b, 0xdf, 0x1c, 0x4e, 0xc2, 0x50, 0x78, 0xb2, 0xd9, 0x7a, 0x61, 0xfc, 0x32, 0x45, 0xe4,
		0xa1, 0x3f, 0x1e, 0xfb, 0xde, 0xe5, 0x0c, 0x1c, 0x7e, 0x69, 0xb5, 0xb2, 0xc4, 0x85, 0xef, 0xc2,
		0xd0, 0x0f, 0x3f, 0x88, 0x28, 0xb2, 0x1f, 0x44, 0xfe, 0xec, 0xdc, 0x55, 0xef, 0xfa, 0xf3, 0x47,
		0xc3, 0x89, 0x0c, 0xdf, 0x73, 0x9f, 0x0c, 0x3b, 0x08, 0x5c, 0x67, 0x38, 0xb5, 0x8f, 0xe1, 0x78,
		0xc6, 0x55, 0xef, 0xe3, 0x87, 0xdf, 0xb2, 0xe6, 0xec, 0x0a, 0x64, 0xb7, 0xd6, 0x37, 0x3e, 0x31,
		0x7d, 0x0a, 0x6b, 0xbc, 0x78, 0x8c, 0x1c, 0xd9, 0x99, 0x32, 0xc9, 0xad, 0xc4, 0xbe, 0x78, 0xd8,
		0x12, 0x3c, 0xf9, 0x9f, 0x46, 0xbe, 0x85, 0xb0, 0x85, 0x6a, 0x35, 0xf6, 0x2c, 0x87, 0x43, 0xf1,
		0x79, 0xc1, 0xb8, 0x7c, 0xcb, 0x1b, 0xcb, 0x1d, 0x85, 0x27, 0xed, 0xbb, 0x7a, 0x8a, 0xf9, 0x4f,
		0x8b, 0xe7, 0xd8, 0xf5, 0xfd, 0x4d, 0x27, 0xfa, 0xd3, 0xfe, 0x2e, 0xbe, 0xf8, 0x7e, 0xda, 0x0d,
		0x36, 0x9f, 0xc9, 0x5c, 0xff, 0xa7, 0xc4, 0x97, 0xbc, 0xea, 0x7e, 0x5c, 0x84, 0x0b, 0x3f, 0x1b,
		0x3f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x79, 0xe3, 0xe2,
		0x52, 0x24, 0x0f, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{
		"/nacm/exec-default": []reflect.Type{
			reflect.TypeOf((E_IETFNetconfAcm_ActionType)(0)),
		},
		"/nacm/read-default": []reflect.Type{
			reflect.TypeOf((E_IETFNetconfAcm_ActionType)(0)),
		},
		"/nacm/rule-list/rule/action": []reflect.Type{
			reflect.TypeOf((E_IETFNetconfAcm_ActionType)(0)),
		},
		"/nacm/write-default": []reflect.Type{
			reflect.TypeOf((E_IETFNetconfAcm_ActionType)(0)),
		},
		"/vpn-service/global-parameters-profiles/global-parameters-profile/mac-policies/mac-addr-limit/action": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_MacAction)(0)),
		},
		"/vpn-service/global-parameters-profiles/global-parameters-profile/mac-policies/mac-loop-prevention/protection-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_LoopPreventionType)(0)),
		},
		"/vpn-service/global-parameters-profiles/global-parameters-profile/multicast-like/customer-tree-flavors/tree-flavor": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_MulticastTreeType)(0)),
		},
		"/vpn-service/global-parameters-profiles/global-parameters-profile/vpn-target/route-target-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_RouteTargetType)(0)),
		},
		"/vpn-service/signaling-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_VpnSignalingType)(0)),
		},
		"/vpn-service/status/admin-status/status": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_AdministrativeStatus)(0)),
		},
		"/vpn-service/status/oper-status/status": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_OperationalStatus)(0)),
		},
		"/vpn-service/underlay-transport/type/abstract/instance-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_TransportInstanceType)(0)),
		},
		"/vpn-service/underlay-transport/type/protocol/protocol": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_ProtocolType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile/mac-policies/mac-addr-limit/action": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_MacAction)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile/mac-policies/mac-loop-prevention/protection-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_LoopPreventionType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/active-global-parameters-profiles/global-parameters-profile/multicast-like/customer-tree-flavors/tree-flavor": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_MulticastTreeType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/bgp-auto-discovery/vpn-target/route-target-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_RouteTargetType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/role": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_Role)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/signaling-option/signaling-option/bgp/bgp-type/evpn-bgp/evpn-policies/mac-learning-mode": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_MacLearningMode)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/signaling-option/signaling-option/bgp/bgp-type/evpn-bgp/service-interface-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_EvpnServiceType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/signaling-option/signaling-option/bgp/bgp-type/l2vpn-bgp/pw-encapsulation-type": []reflect.Type{
			reflect.TypeOf((E_IanaBgpL2Encaps_BgpL2EncapsType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/signaling-option/signaling-option/ldp-or-l2tp/ldp-or-l2tp/ldp-or-l2tp/l2tp/pseudowire-type": []reflect.Type{
			reflect.TypeOf((E_IanaPseudowireTypes_IanaPwTypes)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/signaling-option/signaling-option/ldp-or-l2tp/ldp-or-l2tp/ldp-or-l2tp/ldp/pw-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_PwType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/signaling-option/signaling-option/ldp-or-l2tp/ldp-or-l2tp/ldp-or-l2tp/ldp/t-ldp-pw-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_TLdpPwType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/status/admin-status/status": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_AdministrativeStatus)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/status/oper-status/status": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_OperationalStatus)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/dot1q/rewrite/direction": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Direction)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/dot1q/rewrite/tag-choice/pop/pop": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Pop)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/dot1q/rewrite/tag-choice/translate/translate": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Connection_Encapsulation_Dot1Q_Rewrite_Translate)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/dot1q/tag-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_TagType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/encap-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_EncapsulationType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/priority-tagged/tag-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_TagType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/encapsulation/qinq/tag-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_TagType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/lag-interface/lacp/member-link-list/member-link/mode": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_NegMode)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/connection/lag-interface/lacp/mode": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_LacpMode)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/cfm-802.1-ag/n2-uni-c/mep-up-down": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/cfm-802.1-ag/n2-uni-n/mep-up-down": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Cfm_802_1Ag_N2UniC_MepUpDown)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/y-1731/pm-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_PmType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/ethernet-service-oam/y-1731/session-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_EthernetServiceOam_Y_1731_SessionType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/group/precedence": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_PrecedenceType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/broadcast-unknown-unicast-multicast/multicast-site-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_VpnService_VpnNodes_VpnNode_VpnNetworkAccesses_VpnNetworkAccess_Service_BroadcastUnknownUnicastMulticast_MulticastSiteType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/mac-policies/access-control-list/action": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_MacAction)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/mac-policies/mac-addr-limit/action": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_MacAction)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/mac-policies/mac-loop-prevention/protection-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_LoopPreventionType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy/rule/match-type/match-application/match-application": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_CustomerApplication)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-classification-policy/rule/match-type/match-flow/match-flow/color-type": []reflect.Type{
			reflect.TypeOf((E_IETFL2VpnNtwVpnServices_ColorType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/qos/qos-profile/qos-profile/direction": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_QosProfileDirection)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/svc-inbound-bandwidth/inbound-bandwidth/bw-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_BwType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/service/svc-outbound-bandwidth/outbound-bandwidth/bw-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_BwType)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/admin-status/status": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_AdministrativeStatus)(0)),
		},
		"/vpn-service/vpn-nodes/vpn-node/vpn-network-accesses/vpn-network-access/status/oper-status/status": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_OperationalStatus)(0)),
		},
		"/vpn-service/vpn-service-topology": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_VpnTopology)(0)),
		},
		"/vpn-service/vpn-type": []reflect.Type{
			reflect.TypeOf((E_IETFVpnCommon_ServiceType)(0)),
		},
	}
}
