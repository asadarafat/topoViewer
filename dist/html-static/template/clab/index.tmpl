<!DOCTYPE html>
<!-- This code is for demonstration purposes only.  You should not hotlink to Github, Rawgit, or files from the Cytoscape.js documentation in your production apps. -->
<html>

<head>
  <meta charset=utf-8 />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Topology Viewer</title>
  <link href="css/style.css" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css">

  <script defer src="https://use.fontawesome.com/releases/v5.14.0/js/all.js"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/bulma-extensions@4.0.1/bulma-slider/dist/js/bulma-slider.min.js"></script>

  <!-- libs used in cytoscape-libs -->
 

   <!-- cytoscape-libs -->
  <script src="/cytoscape/libs/cola.min.js"></script>
  <script src="/cytoscape/libs/cytoscape.min.js"></script>
  <script src="/cytoscape/libs/cytoscape-cola.js"></script>
  <script src="/cytoscape/libs/popper.js"></script>
  <script src="/cytoscape/libs/cytoscape-popper.js"></script>
  <script src="/cytoscape/libs/cytoscape-grid-guide.js"></script>





</head>

<style>
body { 
  font: 14px helvetica neue, helvetica, arial, sans-serif;
}

#edgeLength, #nodeSpacing {
  width: 100%;
}

#cy {
  position: absolute;
  left: 0;
  right: 20;
  top: 5.5em;
  bottom: 0;
  right: 20em;
}

#logo {
  top: 20px; 
  left: 30px;
  z-index: 9999;
  position: absolute;
}

#Setting {
  /*top: 70px;*/
  bottom: 0px; 
  right: 10px; 
  width: 350px; 
  position: absolute;
}

.has-background-4a {
  background-color: #275bd4;
  z-index: 9999;
}

</style>

<body>
    <nav class="level m-0 px-3 py-1 has-background-4a">
      <div>
        <p class="title    m-0 px-1 py-0   is-4 is-unselectable has-text-weight-normal has-text-white"> TopoViewer</p>
        <p class="subtitle m-0 px-1 py-0   is-6                 has-text-weight-light  has-text-white">Containerlab: {{.}}</p>
      </div>
      <div class="level-right">
        <div class="level-item">
          <div class="dropdown is-hoverable is-right">
            <div class="dropdown-trigger">
              <button class="button is-small is-link is-light" aria-haspopup="true" aria-controls="dropdown-menu3">
                <span>Setting</span>
                <span class="icon is-small">
                  <i class="fas fa-angle-down" aria-hidden="true"></i>
                </span>
              </button>
            </div>
            <div class="dropdown-menu" id="dropdown-menu" role="menu">
              <div class="dropdown-content">
                <div class="dropdown-item">
                    <label class="label has-text-weight-normal is-small">Edge Length</label>
                    <input id="edgeLength" type="range" min="1" max="1000" step="1" value="50">
                </div>
                <div class="dropdown-item">
                    <label class="label has-text-weight-normal is-small">Node Spacing</label>
                    <input id="nodeSpacing" type="range" min="1" max="1000" step="1" value="25">
                </div>
                    <a id="clabClient" href="#" onclick="clabClient();" class="dropdown-item label has-text-weight-normal is-small">Clab Client Download</a>                  
                    <a id="TopologyAdjust" href="#" onclick="topologyAdjust();" class="dropdown-item label has-text-weight-normal is-small"> Topology Adjust</a>
                    <!-- <a id="telemetry" href="#" onclick="telemetry();" class="dropdown-item label has-text-weight-normal is-small">Telemetry</a> -->                  
                    <a id="toggleLinkEndpoint" href="#" onclick="toggleLinkEndpoint();" class="dropdown-item label has-text-weight-normal is-small">Toggle Link Endpoint</a>
                    <!-- <a id="showNodeIcon" href="#" onclick="showNodeIcon();" class="dropdown-item label has-text-weight-normal is-small">showNodeIcon</a> -->                      
              </div>
            </div>
          </div>
        </div>
      </div>
    </nav>
  <div id="cy"></div>
    <div class="message is-hidden" id="Setting">
      <div class="message-header" id=SettingHeader>
        <p class="has-text-weight-semibold">Properties</p>
    </div>
  </div>
      <script type="text/javascript">

        // initiate websocket for node telemetry
        var protocol = "ws://";
        var url = protocol + location.host + "/ws"
        var websocketMessage

        let socket = new WebSocket(url);
        console.log("Attempting Connection...");

        socket.onopen = () => {
            console.log("Successfully Connected");
            // socket.send("Hi From the Client!")
        };
        socket.onclose = event => {
          console.log("Socket Closed Connection: ", event);
          socket.send("Client Closed!")
        };

        socket.onerror = error => {
          console.log("Socket Error: ", error);
        };

        // retrieve websocket message
        function telemetry() {
          socket.onmessage = (msg) => {
            console.log(msg)
            websocketMessage = msg
            updateEdgeColorTelemetry()
          }
        }
  


        // global variable
        var linkImpairmentUrl;

        // Setting object
        let Setting = document.getElementById("Setting");
        let options = document.getElementById("options");
        
        const close = document.querySelectorAll(".close");
        close.forEach(e => e.addEventListener('click', event => {
          var c = Setting.className;
          if(c.includes("is-hidden")) {
            Setting.className = "message";
          } else {
            Setting.className = "message is-hidden";
          }
        }));
        
        // slider object
        var edgeLength = document.getElementById("edgeLength");
        var nodeSpacing = document.getElementById("nodeSpacing");
        console.log("edgeLength.value: " + edgeLength.value)

        
        // create html element
        function ce(tag, attrs, children) {
          var el = document.createElement(tag);
          Object.keys(attrs).forEach(function(key){
            var val = attrs[key];
            el.setAttribute(key, val);
          });
          children.forEach(function(child){
            el.appendChild(child);
          });
          return el;
        };
        
        // create text node
        function ctn(text) {
          var el = document.createTextNode(text);
          return el;
        };

        // return clab client on click
        function clabClient(e) {
          removeLastChild();
          var oldSettingHeader = Setting.childNodes[1]
          console.log("messageClabCLient oldSettingHeader: ")
          console.log(oldSettingHeader)
          var seperator1 = ce("hr", {class: "my-1"}, []);
          var seperator2 = ce("hr", {class: "my-1"}, []);

          var tt1 = ce("a", {target: "_blank", href: "http://"+location.host+"/clab-client/clab-client-mac/ClabCapture.app.zip", onclick: "", class: "text is-link is-small"}, [ctn("ContainerLab Wireshark Client - MAC")] );
          var tt2 = ce("a", {target: "_blank", href: "http://"+location.host+"/clab-client/clab-client-windows/ClabCapture.zip", onclick: "", class: "text is-link is-small"}, [ctn("ContainerLab Wireshark Client - Windows")] );
          var tt3 = ce("a", {target: "_blank", href: "http://"+location.host+"/clab-client/clab-client-mac/ClabPumbaDelay.app.zip", onclick: "", class: "text is-link is-small"}, [ctn("ContainerLab LinkImpairment Client - MAC")] );

          var tname = ce("p", {}, [tt1, seperator1, tt2, seperator2, tt3]);
         // var addon = ce("div", {}, [nodeInfo(node)]);

          var tpanel = ce("div", {}, [tname]);
          var tmessageBody = ce("div", {class: "message-body"}, [tpanel])

          var headerTitle = ce("p", {class: "my-7"}, [ctn("Clab Client Download")]);
          var messageHeader = ce("div", {class: "message-header"}, [headerTitle])


          Setting.replaceChild(messageHeader, oldSettingHeader);
          Setting.appendChild(tmessageBody);
          Setting.className = "message is-small is-link";
          
        }

        // return TopologyAdjust on click
        function topologyAdjust(e) {
          removeLastChild();
          var oldSettingHeader = Setting.childNodes[1]
          console.log("messageTopologyAdjust oldSettingHeader: ")
          console.log(oldSettingHeader)
          
          var tt1 = ce("label", {class: "label is-small"}, [ctn("Edge Length")]);
          var tt2 = ce("input", {class: "slider", step:"1", min:"1", max:"1000", value:"50", type:"range", id: "edgeLengthMessage", oninput: "slider", onchange: "slider"}, []);
          var tt3 = ce("label", {class: "label is-small"}, [ctn("Node Spacing")]);
          var tt4 = ce("input", {class: "slider", step:"1", min:"1", max:"1000", value:"25", type:"range", id: "nodeSpacingMessage", oninput: "slider", onchange: "slider"}, []);

          var tname = ce("p", {}, [tt1, tt2, tt3, tt4]);
          var addon = ce("div", {}, [nodeInfo(node)]);

          var tpanel = ce("div", {}, [tname]);
          var tmessageBody = ce("div", {class: "message-body"}, [tpanel])

          var headerTitle = ce("p", {class: "my-7"}, [ctn("Topology Adjust")]);
          var messageHeader = ce("div", {class: "message-header"}, [headerTitle])


          Setting.replaceChild(messageHeader, oldSettingHeader);
          Setting.appendChild(tmessageBody);
          Setting.className = "message is-small is-link";
          
        }

        // return node info on click
        function nodeInfo(node) {
          console.log("mgmtIpv4Address--SSH: " + node.data("extraData").mgmtIpv4Addresss)
          var shellUrl = location.protocol + "//" + location.host + "/cloudshell/";
          var elements = [
            {
              name: "SSH Session",
              url: shellUrl + "?RouterID=" + node.data("extraData").mgmtIpv4Addresss + "?RouterName=" + node.data("extraData").id
            }
          ].map(function(link) {
            return ce("a", {target: "_blank", href: link.url, class: "button is-link is-small"}, [ctn(link.name)] );
          });
          console.log("SSH-URL:" + url)

          return ce("div", {class: "has-text-right"}, elements);
        }
        
        // return link info on click
        function linkInfo(e) {
          var wiresharkElements = [
            {
              name: e.data("source") + "::" + e.data("sourceEndpoint"),
              url: "clab-capture://" + e.data("extraData").clabServerUsername + "@" + location.host + "?" + e.data("extraData").clabSourceLongName + "?" + e.data("sourceEndpoint")
            },
            {
              name: e.data("target") + "::" + e.data("targetEndpoint"),
              url: "clab-capture://" + e.data("extraData").clabServerUsername + "@" + location.host + "?" + e.data("extraData").clabTargetLongName + "?" + e.data("targetEndpoint")
            }
          ].map(function(link) {
            return ce("a", {target: "_blank", href: link.url, class: "button is-link is-small"}, [ctn(link.name)] );
          });
        
          var t1 = ce("label", {class: "label has-text-link is-small has-text-weight-semibold"}, [ctn("Wireshark Endpoints:")]);
          var t2 = ce("div", {class: "buttons is-small"}, wiresharkElements);
          var t3 = ce("div", {class: "control"}, [t1, t2]);
          var seperator = ce("hr", {class: "my-3 has-background-grey-lighter"}, []);
          var wireshark = ce("div", {class: "field"}, [t3, seperator]);

          t1 = ce("label", {class: "label has-text-link is-small has-text-weight-semibold pb-3"}, [ctn("Link Impairment:")]);
          var linkImpairment = ce("div", {class: "field"}, [t1]);

          label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-normal mr-0"}, [ctn("Delay")]);
          column01 = ce("label", {class: "column is-3 ml-3 pb-3"}, [label01]);
          input01 = ce("input", {class: "input is-small", type: "number", placeholder: "Delay (ms)", id: "delay", onkeyup: "updateUrl(this)", onchange:"updateUrl(this)"}, []);
          column02 = ce("label", {class: "column is-8 p-0"}, [input01]);
          var delay = ce("div", {class: "columns mb-2"}, [column01, column02]);
        
          label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-normal mr-0"}, [ctn("Jitter")]);
          column01 = ce("label", {class: "column is-3 ml-3 pb-3"}, [label01]);
          input01 = ce("input", {class: "input is-small", type: "number", placeholder: "Jitter (ms)", id: "jitter", onkeyup: "updateUrl(this)", onchange:"updateUrl(this)"}, []);
          column02 = ce("label", {class: "column is-8 p-0"}, [input01]);
          var jitter = ce("div", {class: "columns mb-2"}, [column01, column02]);
        
          label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-normal mr-0"}, [ctn("Rate")]);
          column01 = ce("label", {class: "column is-3 ml-3 pb-3"}, [label01]);
          input01 = ce("input", {class: "input is-small", type: "number", placeholder: "Rate (Kbps)", id: "rate", onkeyup: "updateUrl(this)", onchange:"updateUrl(this)"}, []);
          column02 = ce("label", {class: "column is-8 p-0"}, [input01]);
          var rate = ce("div", {class: "columns mb-2"}, [column01, column02]);

          label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-normal mr-0"}, [ctn("Loss")]);
          column01 = ce("label", {class: "column is-3 ml-3 pb-3"}, [label01]);
          input01 = ce("input", {class: "input is-small", type: "number", placeholder: "Loss (%)", id: "loss", onkeyup: "updateUrl(this)", onchange:"updateUrl(this)"}, []);
          column02 = ce("label", {class: "column is-8 p-0"}, [input01]);
          var loss = ce("div", {class: "columns mb-2"}, [column01, column02]);

          label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-normal mr-0"}, [ctn("Duration")]);
          column01 = ce("label", {class: "column is-3 ml-3 pb-3"}, [label01]);
          input01 = ce("input", {class: "input is-small", type: "number", placeholder: "Duration (min)", id: "duration", onkeyup: "updateUrl(this)", onchange:"updateUrl(this)"}, []);
          column02 = ce("label", {class: "column is-8 p-0"}, [input01]);
          var duration = ce("div", {class: "columns mb-1"}, [column01, column02]);

          linkImpairmentUrl = "clab-pumba://" + e.data("extraData").clabServerUsername + "@" + location.host + "?" + e.data("extraData").clabTargetLongName + "?" + e.data("targetEndpoint")

          var linkImpairmentElements = [
            {
              url: linkImpairmentUrl
            }
          ].map(function(link) {
            return ce("a", {target: "_blank", href: link.url, class: "button is-link is-small", id: "onSubmit"}, [ctn("Submit")] );
          });
          
          t1 = ce("a", {class: "button is-link is-small"}, linkImpairmentElements);
          t2 = ce("div", {class: "control has-text-right"}, [t1]);

          var submit = ce("div", {class: "field"}, [t2]);

          // return ce("div", {}, [wireshark, linkImpairment, delay, jitter, rate, loss, duration, submit]);
          return ce("div", {}, [wireshark, linkImpairment, delay, jitter, rate, loss, duration, submit]);
        }
        
        // remove last child
        function removeLastChild() {
          var lastChild = Setting.lastChild;
          if(lastChild.className == "message-body") {
            Setting.removeChild(lastChild);
          }
        }
        
        // proceed to main only if two files exist
        Promise.all([
          fetch("cy-style.json")
            .then(function (res) {
              return res.json();
            }),
          fetch("dataCytoMarshall-{{.}}.json")
            .then(function (res) {
              return res.json();
            })
        ])
        .then(function(dataArray) {

  
        // cy defintion
          
        // inital render random
          // var cy = window.cy = cytoscape({
          //  container: document.getElementById("cy"),
          //  style: dataArray[0],
          //  elements: dataArray[1],
          //  layout: { name: "random" }

       // inital render with cola
          var cy = window.cy = cytoscape({
            container: document.getElementById("cy"),
            style: dataArray[0],
            elements: dataArray[1],
            layout: { 
              name: 'cola',
              nodeSpacing: 5,
              edgeLengthVal: 45,
              animate: true,
              randomize: false,
              maxSimulationTime: 1500
            }            
          });
  
          // slider change event
          var slider = function(e) {
            var layout = cy.layout({
              fit: true,
              name: "cola",
              animate: true, 
              randomize: false, 
              maxSimulationTime: 1000,
              edgeLength: function(e) {
                return edgeLength.value / e.data('weight');
              },
              nodeSpacing: function(e) {
                return nodeSpacing.value / e.data('weight');
              },
            });
            console.log("edgeLength.value: " + edgeLength.value)
            layout.run();
          }
        
          var addSliderEvent = function(e) {
            e.addEventListener("input", slider);
            e.addEventListener("change", slider);
          }
          addSliderEvent(edgeLength);
          addSliderEvent(nodeSpacing);
             
          var tt1 = ce("p", {}, [ctn(" ")]);
          var tt2 = ce("p", {}, [ctn("Conceived by asad.arafat@nokia.com")]);
          var tt3 = ce("p", {}, [ctn("GUI revamped by siva.sivakumar@nokia.com")]);
          var tt4 = ce("hr", {class: "my-1 has-background-grey-lighter"}, []);
          var tt5 = ce("p", {}, [ctn("Instruction:")]);
          var tt6 = ce("p", {},  [ctn("- To view the attributes of a node or link, simply click on it.")]);
          var tt7 = ce("p", {},  [ctn("- Topology physical adjustment can be made in the setting")]);
          var tt8 = ce("p", {},  [ctn("- Link endpoint label display toggle can be made in setting")]);
          var tt9 = ce("p", {},  [ctn("- Link wireshark and imparment activation will need clab-client, visit https://github.com/asadarafat/topoViewer for more detail")]);

          var tname = ce("p", {}, [tt1, tt2, tt3, tt4, tt5, tt6, tt7, tt8, tt9]);
          var tpanel = ce("div", {}, [tname]);
          var tmessageBody = ce("div", {class: "message-body"}, [tpanel])

          var headerTitle = ce("p", {class: "my-10"}, [ctn("Welcome to TopoViewer")]);
          var messageHeader = ce("div", {class: "message-header"}, [headerTitle])
          var oldSettingHeader = document.getElementById("SettingHeader")
          console.log("messageInit oldSettingHeader: ")
          console.log(oldSettingHeader)

          Setting.replaceChild(messageHeader, oldSettingHeader);
          Setting.appendChild(tmessageBody);
          Setting.className = "message is-small is-link";
          


          // trigger info panel on node click
          cy.nodes().forEach(function(node) {
            node.on("click", function(e) {
            if (!node.isParent()) {          //  block of code to be executed if the condition is true

              console.log(node.data("extraData").clabServerUsername)
              
              removeLastChild();
              var headerTitle = ce("p", {class: "my-7"}, [ctn("Node Properties")]);
              var nodeMessageHeader = ce("div", {class: "message-header"}, [headerTitle]);
              var oldSettingHeader = Setting.childNodes[1]
              console.log("oldSettingHeader: ", oldSettingHeader)
              Setting.replaceChild(nodeMessageHeader, oldSettingHeader);
              
              console.log("nodeName: ", node.data("extraData").name);
              label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Node Name: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").shortname)]);  
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var clabName = ce("div", {class: "columns mb-1"}, [column01, column02]);  

              console.log("nodeKind: ", node.data("extraData").kind);
              label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Kind: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").kind)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var kind = ce("div", {class: "columns mb-1"}, [column01, column02]);

              console.log("image: ", node.data("extraData").image);
              label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Image: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").image)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var image = ce("div", {class: "columns mb-1"}, [column01, column02]);

              console.log("mgmtIpv4Addresss: ", node.data("extraData").mgmtIpv4Addresss);
              label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Mgmt IPv4: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").mgmtIpv4Addresss)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var mgmtIpv4 = ce("div", {class: "columns mb-1"}, [column01, column02]);

              console.log("mgmtIpv6Address: ", node.data("extraData").mgmtIpv6Address);
              label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Mgmt IPv6: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").mgmtIpv6Address)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var mgmtIpv6 = ce("div", {class: "columns mb-1"}, [column01, column02]);

              console.log("fqdn: ", node.data("extraData").fqdn);
              label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("FQDN: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").fqdn)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var fqdn = ce("div", {class: "columns mb-1"}, [column01, column02]);

              console.log("TopoViewerRole: ", node.data("extraData").labels.TopoViewerRole);
              label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Role: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").labels.TopoViewerRole)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var topoViewerRole = ce("div", {class: "columns mb-1"}, [column01, column02]);

              console.log("group: ", node.data("extraData").group);
              label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Group: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").group)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var group = ce("div", {class: "columns mb-1"}, [column01, column02]);

              
              var seperator = ce("hr", {class: "my-3 has-background-grey-lighter"}, []);
              var addon = ce("div", {}, [nodeInfo(node)]);
              console.log("addon: ", addon);

              var panel = ce("div", {}, [clabName, kind, image, mgmtIpv4, mgmtIpv6, fqdn, topoViewerRole, group, addon]);
              var messageBody = ce("div", {class: "message-body"}, [panel])
              Setting.appendChild(messageBody);
              Setting.className = "message is-small is-link";
              }
            });
          });

          // trigger info panel on edge or link click
          cy.edges().forEach(function(edge) {
            edge.on("click", function(e) {
              removeLastChild();


              var headerTitle = ce("p", {class: "my-7"}, [ctn("Link Properties")]);
              var linkMessageHeader = ce("div", {class: "message-header"}, [headerTitle]);
              var oldSettingHeader = Setting.childNodes[1]
              console.log(oldSettingHeader)
              Setting.replaceChild(linkMessageHeader, oldSettingHeader);

              var t1 = ce("b", {}, [ctn("Link Name: ")]);  
              var name = ce("p", {}, [t1, ctn(edge.data("name"))]);

              label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Link Name: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0 is-max-content"}, [ctn(edge.data("extraData").clabName)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var name = ce("div", {class: "columns mb-1"}, [column01, column02]);

              label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Source: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("source")+"::"+edge.data("sourceEndpoint"))]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var source = ce("div", {class: "columns mb-1"}, [column01, column02]);

              label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Target: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("target")+"::"+edge.data("targetEndpoint"))]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var target = ce("div", {class: "columns mb-1"}, [column01, column02]);

              label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Source MAC: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData").sourceMac)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var sourceMac = ce("div", {class: "columns mb-1"}, [column01, column02]);

              label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Target MAC: ")]);
              column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
              label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData").targetMac)]);
              column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
              var targetMac = ce("div", {class: "columns mb-1"}, [column01, column02]);

              var seperator = ce("hr", {class: "my-3 has-background-grey-lighter"}, []);
              var addon = ce("div", {}, [linkInfo(edge)]);
              var panel = ce("div", {}, [name, source, target, sourceMac, targetMac, seperator, addon]);
              var messageBody = ce("div", {class: "message-body"}, [panel])
              Setting.appendChild(messageBody);
              Setting.className = "message is-small is-link";
            });
          });
          
          // filter topoViewerNode and hide it
          topoViewerNode = cy.filter('node[name = "topoviewer"]');
          topoViewerNode.remove()


          // remove info panel on node or edge unselect
          cy.on("tap", function(e) {
            if(e.target === cy ){
              Setting.className = "message is-hidden";
              removeLastChild();
              }
            });
          });

        function updateEdgeColorTelemetry() {
          Srl01Edge = cy.filter('edge[source = "srl-01"][target = "sros-01"]');
          Srl01Edge.style("line-color", "red")
          Srl01Edge.style("label", websocketMessage.data + " kbps")
          Srl01Edge.style("text-background-padding", "0.1")
          Srl01Edge.style("text-outline-color", "#F2F2F2")
          Srl01Edge.style("text-outline-width", "0.3px")

          Srl01Edge.style("line-fill", "linear-gradient")
          Srl01Edge.style("line-gradient-stop-colors", ['blue', 'green', 'yellow', 'red'])
          Srl01Edge.style("line-gradient-stop-positions", ['25%', '40%', '50%', '100%'])
        }

        function showNodeIcon() {
          peNodesTest = cy.filter('node[name = "datacenter"]');
          console.log(peNodesTest)
          peNodesTest.style("background-image","images/clab-pe-router-light-gray.png")


          peNodesAsad = cy.nodes('node[topoviewerRole = "pe"]');
          console.log(peNodesAsad)
          peNodesAsad.style("background-image","images/clab-pe-router-dark-blue.png")
          



        }

        var linkEndpointVisibility = false

        function toggleLinkEndpoint() {
          if (linkEndpointVisibility) {
            cy.edges().forEach(function(edge) {
              edge.style('source-label', " ")
              edge.style('target-label', " ")
              linkEndpointVisibility = false
            }) 
          }else {
            cy.edges().forEach(function(edge) {
              edge.style('source-label', edge.data("sourceEndpoint"))
              edge.style('target-label', edge.data("targetEndpoint"))
              linkEndpointVisibility = true
            }) 
          }
        }

          
        function updateUrl(asad) {
          var button = document.getElementById("onSubmit")
          console.log(button)
          console.log("delay-value: ", document.getElementById("delay").value)
          button.href = linkImpairmentUrl + "?" + document.getElementById("delay").value + "?" + document.getElementById("jitter").value + "?" + document.getElementById("rate").value + "?" + document.getElementById("loss").value +  "?" + document.getElementById("duration").value
        }
      </script>
  </body>
</html>