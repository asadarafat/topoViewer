<!DOCTYPE html>
<html lang="en"data-theme="dark">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>TopoViewer</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.0/css/bulma.min.css">
		<link href="css/style.css?version=1" rel="stylesheet"/>
		<script defer src="https://use.fontawesome.com/releases/v6.4.2/js/all.js"></script>
		<script defer src="https://cdn.jsdelivr.net/npm/bulma-extensions@4.0.1/bulma-slider/dist/js/bulma-slider.min.js"></script>
		<script defer src="https://cdnjs.cloudflare.com/ajax/libs/bulma-toast/2.4.0/bulma-toast.min.js"></script>
		<script defer src="https://cdn.jsdelivr.net/npm/bulma-extensions@4.0.1/bulma-slider/dist/js/bulma-slider.min.js"></script>
	</head>
	<body>
		<nav class="level m-0 px-3 py-1 has-background-4a">
			<div>
				<p class="title    m-0 px-1 py-0   is-4 is-unselectable has-text-weight-normal has-text-white"> TopoViewer</p>
				<p class="subtitle m-0 px-1 py-0   is-6                 has-text-weight-light  has-text-white" id="ClabSubtitle">Topology name: nokia-MAGc-lab ::: Uptime: 10m10s</p>
			</div>
			<div class="level-right">
			<div id="nokia-logo">
				<img src="images/nokia-logo.png" width="100" hspace="10" vspace="5"><br>
			</div>
			<div class="level-item">
				<div class="dropdown is-hoverable is-right">
					<div class="dropdown-trigger">
						<button class="button is-small is-link">
						<i class="icon fas fa-bars" aria-hidden="true"></i>
						</button>
					</div>
					<div class="dropdown-menu" id="dropdown-menu" role="menu">
						<div class="dropdown-content">
							<a id="about" href="#" onclick="showPanelAbout();" class="dropdown-item label has-text-weight-normal is-small py-0">About TopoViewer</a>                      
							<hr class="dropdown-divider py-0">
							<a id="getAllEndpointDetail" href="#" onclick="getAllNodeEndpoint(event);" class="dropdown-item label has-text-weight-normal is-small py-0">Action - Get True Endpoint Label</a>     
							<a id="performNodeActionSaveNodesConfig" href="#" onclick="performNodeActionSaveNodesConfig(event);" class="dropdown-item label has-text-weight-normal is-small py-0">Action - Save Nodes Config</a>     
							<a id="logMessagesDropdownItem" href="#" onclick="logMessages(event);" class="dropdown-item label has-text-weight-normal is-small py-0">Action - Log Messages</a>       
							<hr class="dropdown-divider py-0">
							<a id="clabClientDropdownItem" href="#" onclick="showPanelTopoViewerClient();"        class="dropdown-item label has-text-weight-normal is-small py-0">TopoViewer Helper App</a>                  
						</div>
					</div>
				</div>
			</div>
		</nav>
		<div id="root-div">
			<div id="cy"></div>

			<div class="panel is-link" id="panel-node" style="display: none;">
				<p class="panel-heading is-size-7">Node Properties</p>
				<div  class="panel-tabContainer">
					<div  class="panel-block">
						<div  class="column">
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >Node Name</label></div>
										<div class="column is-8 p-1 pl-3">
											<label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content" id="panel-node-name">node-name-placeholder</label>
										</div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >Actions</label></div>
										<div class="column is-8 p-1 pl-3" >
											<div class="dropdown is-hoverable">
												<div class="dropdown-trigger">
												  <button class="button label has-text-weight-normal is-small py-0" aria-haspopup="true" aria-controls="dropdown-menu">
													<span>Action List</span>
													<span class="icon is-small">
													  <i class="fas fa-angle-down" aria-hidden="true"></i>
													</span>
												  </button>
												</div>
												<div class="dropdown-menu" id="panel-node-action-dropdown-menu" role="menu">
												  <div class="dropdown-content">
													<a onclick="sshWebBased(event);"       class="dropdown-item label has-text-weight-normal is-small py-0" id="panel-node-action-ssh-web-based">SSH Web-Based</a>
													<a onclick="sshCliCommandCopy(event);" class="dropdown-item label has-text-weight-normal is-small py-0" id="panel-node-action-ssh-copy-cli-command"> SSH Copy CLI Command </a>
													<hr class="dropdown-divider" />
													<a href="#" class="dropdown-item label has-text-weight-normal is-small py-0"> Backup-Restore Config </a>
													<a href="#" class="dropdown-item label has-text-weight-normal is-small py-0"> Reboot </a>
													<hr class="dropdown-divider" />
													<a href="#" class="dropdown-item label has-text-weight-normal is-small py-0"> With a divider </a>
												  </div>
												</div>
											  </div>
										</div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >Status</label></div>
										<div class="column is-8 p-1 pl-3" ><label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content" id="panel-node-status">node-status-placeholder</label></div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >Kind</label></div>
										<div class="column is-8 p-1 pl-3" ><label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content" id="panel-node-kind">node-kind-placeholder</label></div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >Image</label></div>
										<div class="column is-8 p-1 pl-3" ><label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content" id="panel-node-image">node-image-placeholder</label></div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >Management IPv4</label></div>
										<div class="column is-8 p-1 pl-3" ><label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content" id="panel-node-mgmtipv4">node-mgmtipv4-placeholder</label></div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >Management IPv6</label></div>
										<div class="column is-8 p-1 pl-3" ><label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content" id="panel-node-mgmtipv6">node-mgmtipv6-placeholder</label></div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >FQDN</label></div>
										<div class="column is-8 p-1 pl-3" ><label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content" id="panel-node-fqdn">node-fqdn-placeholder</label></div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >Group</label></div>
										<div class="column is-8 p-1 pl-3" ><label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content" id="panel-node-group">node-group-placeholder</label></div>
									</div>
								</div>
							</div>
							<div  class="column my-auto is-11">
								<div  class="panel-content">
									<div class="columns py-auto" >
										<div  class="column is-4 p-1"><label class="label is-size-7 has-text-right has-text-weight-medium px-auto" >TopoViewer Role</label></div>
										<div class="column is-8 p-1 pl-3" ><label class="label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content"id="panel-node-topoviewerrole">node-topoviewerrole-placeholder</label></div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>

			<div class="panel is-link" id="panel-backup-restore">
				<p class="panel-heading is-size-7" id="diff-panel-title">Diff</p>
				<div>
					<div class="columns m-0 p-0" style="height: 100%; width: 100%;">
						<div class="column is-one-fifth" id="file-browser">
							<div class="columns m-0 p-0" style="height: 100%; width: 100%;">
								<div class="column p-0 is-flex is-justify-content-left is-flex-direction-column">
									<h3 class="label is-size-7" id="file-browser-title">Config Files</h3>
									<div class="panel is-link is-size-7" id="panel-file-browser">
										<div>
											<p class="control has-icons-left">
												<input class="input is-link is-size-7" type="text" placeholder="Search" id="search-input">
												<span class="icon is-left is-size-7">
												<svg class="svg-inline--fa fa-magnifying-glass" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="magnifying-glass" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path></svg>
												</span>
											</p>
										</div>
									</div>
								</div>
							</div>
						</div>
						<div class="column p-0 is-two-third" style="height: 100%; width: 100%;">
							<div class="columns m-0 p-0" style="height: 100%; width: 100%;">
								<div class="column is-flex is-justify-content-left is-flex-direction-column">
									<div class="label is-size-7">Saved Config</div>
									<p class="control is-flex">
										<button class="button is-small is-link is-outlined" id="buttonRestoreConfig">
											<span>Restore</span>
											<span class="icon is-small">
												<svg class="svg-inline--fa fa-arrow-right-long" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-right-long" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M502.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l370.7 0-73.4 73.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l128-128z"></path></svg>
											</span>
										</button>
									</p>
								</div>
								<div class="column is-flex is-justify-content-left is-flex-direction-column">
									<div class="label label is-size-7">Running Config</div>
									<p class="buttons is-flex">
										<button class="button is-small is-link is-outlined" id="buttonBackupConfig">
											<span>Backup</span>
											<span class="icon is-small">
												<svg class="svg-inline--fa fa-arrow-left" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-left" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z"></path></svg>
											</span>
										</button>
										<button class="button is-small is-link is-outlined" id="buttonLoadRunningConfig">
											<span>Load</span>
											<span class="icon is-small">
												<svg class="svg-inline--fa fa-arrow-up" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-up" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" data-fa-i2svg=""><path fill="currentColor" d="M214.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 141.2V448c0 17.7 14.3 32 32 32s32-14.3 32-32V141.2L329.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160z"></path></svg>
											</span>
										</button>
									</p>
								</div>
							</div>
							<div class="column pt-0" id="editor-container"></div>
						</div>
					</div>
					<div id="loading-spinner" class="loading" style="display: none;">
						<button class="button is-loading is-large is-dark">
						<span class="icon is-small">
						<svg class="svg-inline--fa fa-italic" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="italic" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" data-fa-i2svg=""><path fill="currentColor" d="M128 64c0-17.7 14.3-32 32-32H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H293.3L160 416h64c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H90.7L224 96H160c-17.7 0-32-14.3-32-32z"></path></svg>
						</span>
						</button>
					</div>				
				</div>

			<div class="panel is-link" id="Panel-02" style="display: none;">
				<p class="panel-heading is-size-7">Log Messages</p>
				<div class="panel-block py-2 px-2">
					<textarea class="textarea is-small is-outlined is-expanded" id="notificationTextarea" rows="12"></textarea>
				</div>
				<div class="panel-block py-2 px-2">
					<div class="is-justify-content-space-between">
						<button id="copyToClipboardButton" class="button is-small">Copy to Clipboard</button>
						<button id="panel02CloseButton" class="button is-small">Close</button>
					</div>
				</div>
			</div>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.0/lodash.min.js"></script>
			<script src="https://unpkg.com/webcola@3.3.8/WebCola/cola.min.js"></script>
			<script src="https://unpkg.com/popper.js@1.14.4/dist/umd/popper.js"></script>
			<script src="https://unpkg.com/tippy.js@2.6.0/dist/tippy.all.js"></script>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.19.0/cytoscape.min.js"></script>
			<script src="https://unpkg.com/cytoscape-cola@2.2.3/cytoscape-cola.js"></script>
			<script src="https://unpkg.com/cytoscape-popper@1.0.2/cytoscape-popper.js"></script>
			<script src="https://cdn.jsdelivr.net/npm/cytoscape-grid-guide@2.3.3/cytoscape-grid-guide.min.js"></script>
			<script>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> ea41549a (adding python actions for config backup restore)
{{rawJSComment "				// CSS TUTORIAL"}}
{{rawJSComment "				//"}}
{{rawJSComment "				// /* Style box-shadow"}}
{{rawJSComment "				// The box-shadow property in CSS is used to create a shadow effect around an element, such as a button or a box. It adds depth and dimension to the element, making it appear raised or floating above the background. Here's the breakdown of the property values:"}}
{{rawJSComment "				// 0px represents the horizontal offset of the shadow. In this case, there is no horizontal offset, so the shadow is directly behind the element."}}
{{rawJSComment "				// 0px represents the vertical offset of the shadow. There's no vertical offset, so the shadow is right below the element."}}
{{rawJSComment "				// 5px is the blur radius of the shadow. It determines how blurry or sharp the shadow edges appear. In this case, the shadow is slightly blurry, creating a softer effect."}}
{{rawJSComment "				// rgba(0, 0, 0, 0.2) specifies the color and transparency of the shadow. It's a black shadow (0, 0, 0 represents black), and the 0.2 alpha value makes it slightly transparent. The alpha value controls the shadow's opacity, with 0 being completely transparent and 1 being fully opaque."}}
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "				// */	"}}
=======
=======
>>>>>>> ea41549a (adding python actions for config backup restore)
{{rawJSComment "				// */"}}
{{rawJSComment "				// CSS TUTORIAL"}}
{{rawJSComment "				//"}}
{{rawJSComment "				// /* Style box-shadow"}}
{{rawJSComment "				// The box-shadow property in CSS is used to create a shadow effect around an element, such as a button or a box. It adds depth and dimension to the element, making it appear raised or floating above the background. Here's the breakdown of the property values:"}}
{{rawJSComment "				// 0px represents the horizontal offset of the shadow. In this case, there is no horizontal offset, so the shadow is directly behind the element."}}
{{rawJSComment "				// 0px represents the vertical offset of the shadow. There's no vertical offset, so the shadow is right below the element."}}
{{rawJSComment "				// 5px is the blur radius of the shadow. It determines how blurry or sharp the shadow edges appear. In this case, the shadow is slightly blurry, creating a softer effect."}}
{{rawJSComment "				// rgba(0, 0, 0, 0.2) specifies the color and transparency of the shadow. It's a black shadow (0, 0, 0 represents black), and the 0.2 alpha value makes it slightly transparent. The alpha value controls the shadow's opacity, with 0 being completely transparent and 1 being fully opaque."}}
{{rawJSComment "				// */"}}
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
=======
{{rawJSComment "####				// CSS TUTORIAL"}}
{{rawJSComment "####				//"}}
{{rawJSComment "####				// /* Style box-shadow"}}
{{rawJSComment "####				// The box-shadow property in CSS is used to create a shadow effect around an element, such as a button or a box. It adds depth and dimension to the element, making it appear raised or floating above the background. Here's the breakdown of the property values:"}}
{{rawJSComment "####				// 0px represents the horizontal offset of the shadow. In this case, there is no horizontal offset, so the shadow is directly behind the element."}}
{{rawJSComment "####				// 0px represents the vertical offset of the shadow. There's no vertical offset, so the shadow is right below the element."}}
{{rawJSComment "####				// 5px is the blur radius of the shadow. It determines how blurry or sharp the shadow edges appear. In this case, the shadow is slightly blurry, creating a softer effect."}}
{{rawJSComment "####				// rgba(0, 0, 0, 0.2) specifies the color and transparency of the shadow. It's a black shadow (0, 0, 0 represents black), and the 0.2 alpha value makes it slightly transparent. The alpha value controls the shadow's opacity, with 0 being completely transparent and 1 being fully opaque."}}
{{rawJSComment "####				// */"}}
{{rawJSComment "####				// CSS TUTORIAL"}}
{{rawJSComment "####				//"}}
{{rawJSComment "####				// /* Style box-shadow"}}
{{rawJSComment "####				// The box-shadow property in CSS is used to create a shadow effect around an element, such as a button or a box. It adds depth and dimension to the element, making it appear raised or floating above the background. Here's the breakdown of the property values:"}}
{{rawJSComment "####				// 0px represents the horizontal offset of the shadow. In this case, there is no horizontal offset, so the shadow is directly behind the element."}}
{{rawJSComment "####				// 0px represents the vertical offset of the shadow. There's no vertical offset, so the shadow is right below the element."}}
{{rawJSComment "####				// 5px is the blur radius of the shadow. It determines how blurry or sharp the shadow edges appear. In this case, the shadow is slightly blurry, creating a softer effect."}}
{{rawJSComment "####				// rgba(0, 0, 0, 0.2) specifies the color and transparency of the shadow. It's a black shadow (0, 0, 0 represents black), and the 0.2 alpha value makes it slightly transparent. The alpha value controls the shadow's opacity, with 0 being completely transparent and 1 being fully opaque."}}
{{rawJSComment "####				// */"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
>>>>>>> ea41549a (adding python actions for config backup restore)

=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
{{rawJSComment "				// Instantiate Panel Weclome, this is should be loaded before CY"}}
{{rawJSComment "				// Instantiate Panel Weclome, this is should be loaded before CY"}}
=======
				// CSS TUTORIAL
				//
				// /* Style box-shadow
				// The box-shadow property in CSS is used to create a shadow effect around an element, such as a button or a box. It adds depth and dimension to the element, making it appear raised or floating above the background. Here's the breakdown of the property values:
				// 0px represents the horizontal offset of the shadow. In this case, there is no horizontal offset, so the shadow is directly behind the element.
				// 0px represents the vertical offset of the shadow. There's no vertical offset, so the shadow is right below the element.
				// 5px is the blur radius of the shadow. It determines how blurry or sharp the shadow edges appear. In this case, the shadow is slightly blurry, creating a softer effect.
				// rgba(0, 0, 0, 0.2) specifies the color and transparency of the shadow. It's a black shadow (0, 0, 0 represents black), and the 0.2 alpha value makes it slightly transparent. The alpha value controls the shadow's opacity, with 0 being completely transparent and 1 being fully opaque.
				// */
				// CSS TUTORIAL
				//
				// /* Style box-shadow
				// The box-shadow property in CSS is used to create a shadow effect around an element, such as a button or a box. It adds depth and dimension to the element, making it appear raised or floating above the background. Here's the breakdown of the property values:
				// 0px represents the horizontal offset of the shadow. In this case, there is no horizontal offset, so the shadow is directly behind the element.
				// 0px represents the vertical offset of the shadow. There's no vertical offset, so the shadow is right below the element.
				// 5px is the blur radius of the shadow. It determines how blurry or sharp the shadow edges appear. In this case, the shadow is slightly blurry, creating a softer effect.
				// rgba(0, 0, 0, 0.2) specifies the color and transparency of the shadow. It's a black shadow (0, 0, 0 represents black), and the 0.2 alpha value makes it slightly transparent. The alpha value controls the shadow's opacity, with 0 being completely transparent and 1 being fully opaque.
				// */
				
				// Instantiate Panel Weclome, this is should be loaded before CY
				// Instantiate Panel Weclome, this is should be loaded before CY
>>>>>>> 4b6d4438 (refactore - panels)
				showPanelWelcome();
				
				// Initialize a state variable to track the element's presence
				// Initialize a state variable to track the element's presence
				var isPanel01Cy = false;
				var nodeClicked = false;
				var edgeClicked = false;
				
				var globalSelectedNode

				var globalShellUrl = "/cloudshell"
				
				const labName =  'nokia-ServiceProvider'
				const deploymentType = 'colocated'
<<<<<<< HEAD

<<<<<<< HEAD
{{rawJSComment "			// Instantiate Panel Weclome, this is should be loaded before CY"}}
			showPanelWelcome()

{{rawJSComment "			// Initialize a state variable to track the element's presence"}}
			let isPanel01Cy = false;
			let nodeClicked = false;
			let edgeClicked = false;
			
=======
				console.log ("Lab-Name: ", labName)
				console.log ("DeploymentType: ", deploymentType)

>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)


=======
				
				console.log ("Lab-Name: ", labName)
				console.log ("DeploymentType: ", deploymentType)
				
				
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
				document.addEventListener("DOMContentLoaded", function () {
					// Reusable function to initialize a WebSocket connection
					// Reusable function to initialize a WebSocket connection
					function initializeWebSocket(url, onMessageCallback) {
						const protocol = location.protocol === "https:" ? "wss://" : "ws://";
						const socket = new WebSocket(protocol + location.host + url);
<<<<<<< HEAD

<<<<<<< HEAD
			console.log ("Lab-Name: ", labName)
			console.log ("DeploymentType: ", deploymentType)





			document.addEventListener('DOMContentLoaded', function() {




{{rawJSComment "				// Reusable function to initialize a WebSocket connection"}}
				function initializeWebSocket(url, onMessageCallback) {
					const protocol = location.protocol === 'https:' ? 'wss://' : 'ws://';
					const socket = new WebSocket(protocol + location.host + url);

					socket.onopen = () => {
						console.log(`Successfully connected WebSocket to ${url}`);
						if (socket.readyState === WebSocket.OPEN) {
							socket.send(`Hi From the WebSocketClient-${url}`);
						}
					};

					socket.onclose = (event) => {
						console.log(`Socket to ${url} closed: `, event);
						socket.send('Client Closed!');
					};

					socket.onerror = (error) => {
						console.log(`Socket to ${url} error: `, error);
					};

					socket.onmessage = onMessageCallback;

					return socket;
				}

{{rawJSComment "				// WebSocket for uptime"}}
				const socketUptime = initializeWebSocket('/uptime', (msgUptime) => {
<<<<<<< HEAD
					const string01 = 'Containerlab Topology: ' + labName;
=======
					const string01 = 'Containerlab Topology: ' + "{{.}}";
>>>>>>> f83b6f1 (commit with tag nightly-24.01.30b)
					const string02 = ' ::: Uptime: ' + msgUptime.data;

					const ClabSubtitle = document.getElementById("ClabSubtitle");
					const messageBody = string01 + string02;

					ClabSubtitle.innerText = messageBody;
					console.log(ClabSubtitle.innerText);
				});

{{rawJSComment "				// WebSocket for ContainerNodeStatus"}}
				const socketContainerNodeStatusInitial = initializeWebSocket('/containerNodeStatus', (msgContainerNodeStatus) => {
					try {
						const { Names, Status, State } = JSON.parse(msgContainerNodeStatus.data);
						setNodeContainerStatus(Names, Status);
						console.log(JSON.parse(msgContainerNodeStatus.data));

						setNodeDataWithContainerAttribute(Names, Status, State);

					} catch (error) {
						console.error("Error parsing JSON:", error);
					}
				});

{{rawJSComment "				// WebSocket for clabServerAddress"}}
				const socketclabServerAddress = initializeWebSocket('/clabServerAddress', (msgclabServerAddress) => {
					console.log(msgclabServerAddress.data);
					document.title = "TopoViewer ::: " + msgclabServerAddress.data;
				});


{{rawJSComment "				//- Instantiate Cytoscape.js"}}
				const cy = cytoscape({
					container: document.getElementById('cy'),
					elements: [],
					style: [
					{
						selector: 'node',
						style: {
							'background-color': '#3498db',
							'label': 'data(label)'
						}
					}]
				});

				loadCytoStyle()
				function loadCytoStyle() {
{{rawJSComment "					//- Load and apply Cytoscape styles from cy-style.json using fetch"}}
					fetch('cy-style.json')
						.then(response => response.json())
						.then(styles => {
{{rawJSComment "							//- Apply styles loaded from cy-style.json"}}
							cy.style().fromJson(styles).update();
						})
						.catch(error => {
							console.error('Oops, we hit a snag! Couldnt load the cyto styles, bro.', error);
							appendMessage(`Oops, we hit a snag! Couldnt load the cyto styles, bro.: ${error}`);
						});
				}

{{rawJSComment "	// Fetch and load element data from a JSON file"}}
<<<<<<< HEAD





 					fetch('dataCytoMarshall-'+labName+'.json')
=======
 					fetch('dataCytoMarshall-{{.}}.json')
>>>>>>> f83b6f1 (commit with tag nightly-24.01.30b)

					.then(response => response.json())
					.then(elements => {
{{rawJSComment "						// Add the elements to the Cytoscape instance"}}
						cy.add(elements);
{{rawJSComment "						//- run layout"}}
						const layout = cy.layout({
							name: 'cola',
							nodeGap: 5,
							edgeLength: 100,
							animate: true,
							randomize: false,
							maxSimulationTime: 1500
						});
						layout.run();

{{rawJSComment "						// remove node topoviewer"}}
						topoViewerNode = cy.filter('node[name = "topoviewer"]');
						topoViewerNode.remove()

					})
					.catch(error => {
						console.error('Error loading graph data:', error);
					});




{{rawJSComment "				// Instantiate hover text element"}}
				const hoverText = document.createElement('box');
				hoverText.classList.add('hover-text', 'is-hidden', 'box', 'has-text-weight-normal', 'is-warning', 'is-smallest');
				hoverText.textContent = 'Launch CloudShell.';
				document.body.appendChild(hoverText);

{{rawJSComment "				//- Toggle the Panel(s) when clicking on the cy container "}}
				document.getElementById('cy').addEventListener('click', function(event) {
{{rawJSComment "					//- This code will be executed when you click anywhere in the Cytoscape container"}}
{{rawJSComment "					//- You can add logic specific to the container here"}}

					loadCytoStyle()

					if (!nodeClicked && !edgeClicked) {
						if (!isPanel01Cy) {
							removeElementById("Panel-01");
							removeElementById("Panel-03");

{{rawJSComment "							// display none each ViewPortDrawer Element, the ViewPortDrawer is created during DOM loading and styled as display node initially	"}}
							var ViewPortDrawerElements = document.getElementsByClassName('ViewPortDrawer'); 
							var ViewPortDrawerArray = Array.from(ViewPortDrawerElements); 
							ViewPortDrawerArray.forEach(function(element) {
								element.style.display = 'none'
							});

{{rawJSComment "							// Define tabContentFns with custom content generation functions"}}
{{rawJSComment "							// createNetworkExplorerTab is has corresponding function with similar name."}}

{{rawJSComment "							// Hide Actions panel, future use"}}
{{rawJSComment "							// const tabContentFns = [createNetworkExplorerTab, createNetworkBuilderTab];"}}
{{rawJSComment "							// const tabContentFnsArg = ['createNetworkExplorerTab', 'createNetworkBuilderTab'];"}}
{{rawJSComment "							// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg, 'Actions');"}}
						} else {
							removeElementById("Panel-01");
							appendMessage(`"try to remove panel01-Cy"`)
						}
					}
					nodeClicked = false;
					edgeClicked = false;

					appendMessage(`"isPanel01Cy-cy: " ${isPanel01Cy}`)
					appendMessage(`"nodeClicked: " ${nodeClicked}`)
				});

{{rawJSComment "				// Click event listener for nodes"}}
				cy.on('click', 'node', function(event) {
{{rawJSComment "					// This code will be executed when you click on a node"}}
					const node = event.target
					nodeClicked = true;

					if (!node.isParent()) {
{{rawJSComment "						// You can add logic specific to nodes here"}}
						removeElementById("Panel-01");
						const tabContentFns = [createNodeDetailTab];
						const tabContentFnsArg = [node];

						createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');

						appendMessage(`"isPanel01Cy-cy: " ${isPanel01Cy}`)
						appendMessage(`"nodeClicked: " ${nodeClicked}`)
					}
				});

{{rawJSComment "				// Click event listener for edges"}}
				cy.on('click', 'edge', function(event) {
{{rawJSComment "					// This code will be executed when you click on a node"}}
{{rawJSComment "					// You can add logic specific to nodes here"}}
<<<<<<< HEAD
					const clickedEdge = event.target
					const defaultEdgeColor = '#B1BCC8'
					edgeClicked = true;


					console.log(defaultEdgeColor)

{{rawJSComment "					// Change the color of the clicked edge (for example, to red)"}}
					clickedEdge.style('line-color', '#0043BF');

{{rawJSComment "					// Revert the color of other edges that were not clicked (e.g., back to their default color)"}}
					cy.edges().forEach(function(edge) {
						if (edge !== clickedEdge) {
							edge.style('line-color', defaultEdgeColor); 
						}
					});

=======
					const edge = event.target
					edgeClicked = true;

>>>>>>> f83b6f1 (commit with tag nightly-24.01.30b)
{{rawJSComment "					// You can add logic specific to nodes here"}}
					removeElementById("Panel-01");
					const tabContentFns = [createEdgeDetailTab];
					tabContentFnsArg = [clickedEdge];

					createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Link Properties');

					appendMessage(`"isPanel01Cy-cy: " ${isPanel01Cy}`)
					appendMessage(`"nodeClicked: " ${nodeClicked}`)
				});

{{rawJSComment "				// Instantiate viewport buttons"}}
				createViewportButtons(cy)

				function createViewportButtons(cy) {
{{rawJSComment "					// Create a buttons container"}}
					const boxContainer = document.createElement('div');
					boxContainer.className = 'box p-2';
					boxContainer.id = 'ViewPortButtons';
{{rawJSComment "					// Set a new box shadow using the style property"}}
{{rawJSComment "					// boxContainer.style.boxShadow = '5px 10px 10px rgba(0, 0, 0, 0.3)';"}}

{{rawJSComment "					// Create a button container"}}
					const buttonContainer = document.createElement('div');
					buttonContainer.className = 'is-flex is-flex-direction-column is-justify-content-space-evenly';

					const configContent = [{
						name: 'fitToScreen',
						iconClass: 'fas fa-expand',
						hoverMessage: 'Fit to screen',
						hrefFunction: 'eventHandlerLink',
						hrefLink: '',
						callOutFuntionName: 'zoomToFitDrawer',
					},
					{
						name: 'findNode',
						iconClass: 'fas fa-crosshairs',
						hoverMessage: 'Find node',
						hrefFunction: 'drawer',
						hrefLink: ``,
						drawerConfig: [
						{
							idSuffix: 'labelFindNode',
							columnLabelTextContent: 'Node Finder',
							columnLabelClass: 'column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-weight-semibold px-auto',
							columnInputType: '',
							columnInputContent: '',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							addonsContent: []
						},
						{
							idSuffix: 'labelFindNodeNodeName',
							columnLabelTextContent: 'Node Name',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-6 p-1 pl-3',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '',
							columnInputPlaceholder: 'node name',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelFindNodeApply',
							columnLabelTextContent: '',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: '',
							columnInputType: 'button',
							columnInputClass: 'column is-6 p-1 pl-3 is-flex is-justify-content-right',
							columnInputElementClass: 'button is-size-7 is-smallest-element is-link',
							columnInputContent: 'Find',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							columnInputCallOutFuntionName: 'nodeFindDrawer',
							addonsContent: []				
						}]
					},
					{
						name: 'findRoute',
						iconClass: 'fas fa-route',
						hoverMessage: 'Route Finder',
						hrefFunction: 'drawer',
						hrefLink: ``,
						drawerConfig: [
						{
							idSuffix: 'labelFindRoute',
							columnLabelTextContent: 'Route Finder',
							columnLabelClass: 'column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-weight-semibold px-auto',
							columnInputType: '',
							columnInputContent: '',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							addonsContent: []
						},
						{
							idSuffix: 'labelFindRouteSource',
							columnLabelTextContent: 'Source Node',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-6 p-1 pl-3',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '',
							columnInputPlaceholder: 'node name',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelFindRouteTarget',
							columnLabelTextContent: 'Target Node',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-6 p-1 pl-3',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '',
							columnInputPlaceholder: 'node name',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelFindRouteTargetFind',
							columnLabelTextContent: '',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: '',
							columnInputType: 'button',
							columnInputClass: 'column is-6 p-1 pl-3 is-flex is-justify-content-right',
							columnInputElementClass: 'button is-size-7 is-smallest-element is-link',
							columnInputContent: 'Find',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							columnInputCallOutFuntionName: 'pathFinderDijkstraDrawer',
							addonsContent: []				
						}]
					},
					{
						name: 'adjustLayout',
						iconClass: 'fas fa-solid fa-circle-nodes',
						hoverMessage: 'Adjust Layout',
						hrefFunction: 'drawer',
						hrefLink: ``,
						drawerConfig: [
						{
							idSuffix: 'labelAdjustLayoutForceDirected',
							columnLabelTextContent: 'Force-Directed Layout',
							columnLabelClass: 'column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-weight-semibold px-auto',
							columnInputType: '',
							columnInputContent: '',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							addonsContent: []
						},
						{
							idSuffix: 'labelAdjustLayoutLinksLenghtSlider',
							columnLabelTextContent: 'Link Length',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto',
							columnInputType: 'slider',
							columnInputContent: '',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							addonsContent: []
						},
						{
							idSuffix: 'labelAdjustLayoutNodeGapSlider',
							columnLabelTextContent: 'Node Gap',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto',
							columnInputType: 'slider',
							columnInputContent: '',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							addonsContent: []
						},
						{
							idSuffix: 'labelAdjustLayoutAlignmentVertical',
							columnLabelTextContent: 'Vertical Alignment Layout',
							columnLabelClass: 'column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-weight-semibold px-auto',
							columnInputType: '',
							columnInputContent: '',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							addonsContent: []
						},
						{
							idSuffix: 'labelAdjustLayoutAlignmentVerticalNodeGap',
							columnLabelTextContent: 'Node Gap',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-6 p-1 pl-3',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '5',
							columnInputPlaceholder: 'node spacing',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelAdjustLayoutAlignmentVerticalGroupGap',
							columnLabelTextContent: 'Group Gap',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-6 p-1 pl-3',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '50',
							columnInputPlaceholder: 'group spacing',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelAdjustLayoutAlignmentVerticalApply',
							columnLabelTextContent: '',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: '',
							columnInputType: 'button',
							columnInputClass: 'column is-6 p-1 pl-3 is-flex is-justify-content-right',
							columnInputElementClass: 'button is-size-7 is-smallest-element is-link',
							columnInputContent: 'Apply',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							columnInputCallOutFuntionName: 'verticallAllignLayout',
							addonsContent: []				
						},
						{
							idSuffix: 'labelAdjustLayoutAlignmentHorizontal',
							columnLabelTextContent: 'Horizontal Alignment Layout',
							columnLabelClass: 'column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-weight-semibold px-auto',
							columnInputType: '',
							columnInputContent: '',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							addonsContent: []
						},
						{
							idSuffix: 'labelAdjustLayoutAlignmentHorizontalNodeGap',
							columnLabelTextContent: 'Node Gap',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-6 p-1 pl-3',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '5',
							columnInputPlaceholder: 'node spacing',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelAdjustLayoutAlignmentHorizontalGroupGap',
							columnLabelTextContent: 'Group Gap',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-6 p-1 pl-3',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '50',
							columnInputPlaceholder: 'group spacing',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelAdjustLayoutAlignmentHorizontalApply',
							columnLabelTextContent: '',
							columnLabelClass: 'column is-6 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: '',
							columnInputType: 'button',
							columnInputClass: 'column is-6 p-1 pl-3 is-flex is-justify-content-right',
							columnInputElementClass: 'button is-size-7 is-smallest-element is-link',
							columnInputContent: 'Apply',
							columnInputPlaceholder: '',
							columnInputAttribute: 'enabled',
							columnInputCallOutFuntionName: 'horizontalAllignLayout',
							addonsContent: []				
						},
						]
					},
					{
						name: 'togleEndpointLabel',
						iconClass: 'fas fa-tag',
						hoverMessage: 'Toggle endpoint label',
						hrefFunction: 'eventHandlerLink',
						hrefLink: '',
						callOutFuntionName: 'toggleLinkEndpoint',
					},
					{
						name: 'togleContainerStatus',
						iconClass: 'fab fa-docker',
						hoverMessage: 'Toggle container status',
						hrefFunction: 'eventHandlerLink',
						hrefLink: '',
						callOutFuntionName: 'toggleContainerStatusVisibility',
					},
					{
						name: 'captureViewport',
						idSuffix: 'modalSaveViewport',
						iconClass: 'fas fa-camera',
						hoverMessage: 'Capture Viewport',
						hrefFunction: 'eventHandlerLink',
						hrefLink: '',
						callOutFuntionName: 'showModalCaptureViewport',
						callOutFuntionArgsString: 'modalSaveViewport',
						callOutFuntionArgsObject: '',

					},
					];

					const controlId = 'viewportButtons';

					configContent.forEach((config) => {
						const control = document.createElement('p');

						control.id = `${controlId}-button${config.name}`;
						control.className = 'control p-0';

						const button = document.createElement('a');
						button.id = `${controlId}-button${config.name}`;
{{rawJSComment "						// button.className = `button is-light is-large is-outlined py-4 is-${addon.name === 'blue' ? 'link' : 'success'}`;"}}
						button.className = `button is-light px-4 py-4 is-smallest-element`;
						button.style.outline = 'none';

						if (config.hrefFunction == 'eventHandlerLink') {
							button.addEventListener('click', function(cy) {
								if (config.callOutFuntionArgsString != '') {
									eval(config.callOutFuntionName + `('${config.callOutFuntionArgsString}')`); 
								}else if (config.callOutFuntionArgsObject != '') {
									eval(config.callOutFuntionName + `(${config.callOutFuntionArgsObject})`);  
								}
								else{
{{rawJSComment "								// Use eval() to call the function by name"}}
								eval(config.callOutFuntionName + `(cy)`); 
								}
							});
						}

						if (config.hrefFunction == 'drawer') {
{{rawJSComment "							// button.addEventListener('click', () => {"}}
{{rawJSComment "							// Create an drawerBox element"}}
							const drawerBox = document.createElement('div');
							drawerBox.className = 'box drawerBox ViewPortDrawer p-1 is-1';
							drawerBox.style.display = 'none';

							window.addEventListener('load', (event) => {
{{rawJSComment "								// Access the height of buttonContainer here"}}
								const rect = boxContainer.getBoundingClientRect();
								const calculatedHeight = rect.height;
{{rawJSComment "								// drawerBox.style.height = `${calculatedHeight}px`;"}}
								drawerBox.style.height = 'auto';

								drawerBox.style.display = 'block';

								const contentHeight = drawerBox.getBoundingClientRect().height;

								if (contentHeight > calculatedHeight) {
									drawerBox.style.height = 'auto';
								}else{
									drawerBox.style.height = `${calculatedHeight}px`;
								}
								drawerBox.style.display = 'none';
							});

{{rawJSComment "							//// The drawerBox element is created using createPanelBlockContainer() and createPanelBlockForm() functions"}}
{{rawJSComment "							// Panel Block 01"}}
							panelBlockContainer = createPanelBlockContainer(`${button.id}`)
							panelBlock01 = panelBlockContainer.panelBlock
							divPanelBlock01 = panelBlockContainer.divPanelBlock

							createPanelBlockForm(config.drawerConfig, panelBlock01, divPanelBlock01, cy) 
{{rawJSComment "							// Per panelBlock divPanelBlock01 --> panelBlock01"}}
							panelBlock01.appendChild(divPanelBlock01)
							drawerBox.appendChild(panelBlock01)

{{rawJSComment "							// Add click event listener to the button"}}
							button.addEventListener('click', () => {
{{rawJSComment "								// Toggle the display of the corresponding drawerBox"}}
								if (drawerBox.style.display === 'none' || drawerBox.style.display === '') {

{{rawJSComment "									// Hide all other drawerBoxes"}}
									const allAnimatedBoxes = document.querySelectorAll('.ViewPortDrawer');
									allAnimatedBoxes.forEach((box) => {
										if (box !== drawerBox) {
											box.style.display = 'none';
										}
									});
{{rawJSComment "									// Show the corresponding drawerBox"}}
									drawerBox.style.display = 'block';

								} else {
{{rawJSComment "									// Hide the corresponding drawerBox when clicked again"}}
									drawerBox.style.display = 'none';
								}
							});

{{rawJSComment "							// Append the container to the document body"}}
							document.body.appendChild(drawerBox);
						}

{{rawJSComment "						// Create a icon element"}}
						const icon = document.createElement('span');
						icon.className = 'icon is-small';
						const iconElement = document.createElement('i');
						iconElement.className = config.iconClass;
						icon.appendChild(iconElement);

						button.appendChild(icon);
						control.appendChild(button)

{{rawJSComment "						// Create a hover text paragraph element"}}
						const hoverText = document.querySelector('.hover-text');

{{rawJSComment "						// Add event listeners for hover behavior"}}
						button.addEventListener('mouseover', () => {
{{rawJSComment "							// Calculate the position for the hover text"}}
							const rect = button.getBoundingClientRect();
							const top = rect.top - hoverText.offsetHeight + 20;
							const left = rect.left + 35;
{{rawJSComment "							// Set the position and show the hover text"}}
							hoverText.style.top = `${top}px`;
							hoverText.style.left = `${left}px`;
							hoverText.classList.remove('is-hidden');
							hoverText.textContent = config.hoverMessage;

						});

						button.addEventListener('mouseout', () => {
{{rawJSComment "							// Hide the hover text"}}
							hoverText.classList.add('is-hidden');
						});

{{rawJSComment "						// Append the button to the container"}}
						buttonContainer.appendChild(control);
						boxContainer.appendChild(buttonContainer);
					});


{{rawJSComment "					// Append the container to the document body"}}
					document.body.appendChild(boxContainer);
				}
				
{{rawJSComment "				// Initiate Layout SLider "}}
				setupLayoutSliders(cy);
				
				function setupLayoutSliders(cy) {
					const updateLayout = (edgeLengthValue, nodeGapValue) => {
						console.log ("edgeLengthValue", edgeLengthValue)
						console.log ("nodeGapValue", nodeGapValue)

						cy.layout({
							fit: true,
							name: "cola",
							animate: true,
							randomize: false,
							maxSimulationTime: 400,
{{rawJSComment "							//edgeLength: '50',"}}
{{rawJSComment "							// nodeGap: function(node){"}}
{{rawJSComment "							// 	 return 10; "}}
{{rawJSComment "							// 	},"}}
							edgeLength: function(e) {
								return edgeLengthValue / e.data('weight');
							},
							nodeGap: function(e) {
								return nodeGapValue / e.data('weight');
							},
						}).run();
					};
				
					const edgeLengthSlider = document.getElementById("panelBlock-viewportButtons-buttonadjustLayout-divPanelBlock-columnContainerlabelAdjustLayoutLinksLenghtSlider-panelContentlabelAdjustLayoutLinksLenghtSlider-columnsPanelContentlabelAdjustLayoutLinksLenghtSlider-labelColumnlabelAdjustLayoutLinksLenghtSlider-inputColumnlabelAdjustLayoutLinksLenghtSlider-labellabelAdjustLayoutLinksLenghtSlider");
					const nodeGapSlider = document.getElementById("panelBlock-viewportButtons-buttonadjustLayout-divPanelBlock-columnContainerlabelAdjustLayoutNodeGapSlider-panelContentlabelAdjustLayoutNodeGapSlider-columnsPanelContentlabelAdjustLayoutNodeGapSlider-labelColumnlabelAdjustLayoutNodeGapSlider-inputColumnlabelAdjustLayoutNodeGapSlider-labellabelAdjustLayoutNodeGapSlider");
				
					const sliderEventHandler = () => {

						console.log("edgeLengthSlider.value", edgeLengthSlider.value)
						console.log("nodeGapSlider.value", nodeGapSlider.value)

						const edgeLengthValue = parseFloat(edgeLengthSlider.value);
						const nodeGapValue = parseFloat(nodeGapSlider.value);
						updateLayout(edgeLengthValue, nodeGapValue);
					};
				
					edgeLengthSlider.addEventListener("input", sliderEventHandler);
					nodeGapSlider.addEventListener("input", sliderEventHandler);
				}	

{{rawJSComment "				// ######################################################"}}
{{rawJSComment "				// Start of JS Functions HTML Element Creation section"}}
{{rawJSComment "				// Start of JS Functions HTML Element Creation section"}}
{{rawJSComment "				// ######################################################"}}

{{rawJSComment "				// Function to create the Panel-01-nodeDetail content"}}
				function createContentPanelAction() {
					const panel = document.createElement('div');
					panel.className = 'panel';
					panel.id = 'Panel-03';
					panel.style.display = 'block';
{{rawJSComment "					// Create the panel heading"}}
					const panelHeading = document.createElement('p');
					panelHeading.className = 'panel-heading is-size-7';
					panelHeading.textContent = 'Node Detail';
{{rawJSComment "					// Create the panel tabs"}}
					const panelTabs = document.createElement('p');
					panelTabs.className = 'panel-tabs';
{{rawJSComment "					// Array of tab names"}}
					const tabNames = ['Network Explorer', 'Network Builder', 'Tab-03', 'Tab-04', 'Tab-05'];
{{rawJSComment "					// Create tabs dynamically"}}
					for (const name of tabNames) {
						const tab = document.createElement('a');
						tab.className = 'toggle-Panel01-tab is-smallest';
						tab.setAttribute('data-target', `Panel-01-nodeDetail--Tab-${name}-Container`);
						tab.id = `Panel-01-nodeDetail--Tab-${name}-Button`;
						tab.textContent = name;
						panelTabs.appendChild(tab);
					}
{{rawJSComment "					// Append the panel heading and tabs to the panel"}}
					panel.appendChild(panelHeading);
					panel.appendChild(panelTabs);

{{rawJSComment "					// Append the panel to the document body or another container of your choice"}}
					document.body.appendChild(panel);
				}

				function createNetworkExplorerTab() {
{{rawJSComment "					// Create a div container for Tab-01 content"}}
					const tab01Container = document.createElement('div');

{{rawJSComment "					// Create the first block of content"}}
					const block1 = document.createElement('div');
					block1.className = 'panel-block';

{{rawJSComment "					// Create the 'Network Maker' section"}}
					const nodeGenerate = document.createElement('div');
					nodeGenerate.id = 'nodeGenerate';
					nodeGenerate.className = 'column my-auto';

					const networkMakerLabel = document.createElement('label');
					networkMakerLabel.className = 'label is-smallest';
					networkMakerLabel.setAttribute('for', 'generateNodesInput');
					networkMakerLabel.textContent = 'Network Maker:';

					const generateNodesInput = document.createElement('input');
					generateNodesInput.className = 'input is-smallest-element';
					generateNodesInput.type = 'text';
					generateNodesInput.id = 'generateNodesInput';
					generateNodesInput.placeholder = 'Wiro Sableng';
					generateNodesInput.value = '212';

					const generateNodesButton = document.createElement('button');
					generateNodesButton.className = 'button is-smallest-element';
					generateNodesButton.id = 'generateNodesButton';
					generateNodesButton.textContent = 'Generate';

					nodeGenerate.appendChild(networkMakerLabel);
					nodeGenerate.appendChild(generateNodesInput);
					nodeGenerate.appendChild(generateNodesButton);

{{rawJSComment "					// block1.appendChild(nodeAttributes);"}}
					block1.appendChild(nodeGenerate);

{{rawJSComment "					// Create the second block of content"}}
					const block2 = document.createElement('div');
					block2.className = 'panel-block';



{{rawJSComment "					// Create the fifth block of content"}}
					const block5 = document.createElement('div');
					block5.className = 'panel-block';

{{rawJSComment "					// Create the 'Close' button"}}
					const closePanel01Button = document.createElement('button');
					closePanel01Button.className = 'button is-smallest-element';
					closePanel01Button.id = 'closeForm';
					closePanel01Button.textContent = 'Close';

					block5.appendChild(closePanel01Button);

{{rawJSComment "					// Append all blocks to the Tab-01 container"}}
					tab01Container.appendChild(block1);
					tab01Container.appendChild(block2);
					tab01Container.appendChild(block5);

{{rawJSComment "					// call event handler function"}}
					generateNodesButton.addEventListener('click', generateNodesEvent)
					closePanel01Button.addEventListener('click', closePanel01Event)

					return tab01Container;
				}

				function createNetworkBuilderTab() {
{{rawJSComment "					// const content = document.createElement('div');"}}
{{rawJSComment "					// content.textContent = `Contentaaa for 2 `;"}}
{{rawJSComment "					// return content;"}}

{{rawJSComment "					// Create a div container for Tab-01 content"}}
					const tab02Container = document.createElement('div');

{{rawJSComment "					// Create the first block of content"}}
					const block1 = document.createElement('div');
					block1.className = 'panel-block';

{{rawJSComment "					// Create the 'Node Spawner' section"}}
					const nodeAttributes = document.createElement('div');
					nodeAttributes.id = 'nodeAttributes';
					nodeAttributes.className = 'column my-auto';

					const nodeNameLabel = document.createElement('label');
					nodeNameLabel.className = 'label is-smallest';
					nodeNameLabel.setAttribute('for', 'nodeName');
					nodeNameLabel.textContent = 'Node Spawner:';

					const nodeNameInput = document.createElement('input');
					nodeNameInput.className = 'input is-smallest-element';
					nodeNameInput.type = 'text';
					nodeNameInput.id = 'nodeName';
					nodeNameInput.placeholder = 'Node Name';

					const nodeNameInput1 = document.createElement('input');
					nodeNameInput1.className = 'input is-invisible is-smallest-element';
					nodeNameInput1.type = 'text';

					const spawnNodeButton = document.createElement('button');
					spawnNodeButton.className = 'button is-smallest-element';
					spawnNodeButton.id = 'spawnNodeButton';
					spawnNodeButton.textContent = 'Spawn Node';

					nodeAttributes.appendChild(nodeNameLabel);
					nodeAttributes.appendChild(nodeNameInput);
					nodeAttributes.appendChild(nodeNameInput1);
					nodeAttributes.appendChild(spawnNodeButton);

					block1.appendChild(nodeAttributes);

{{rawJSComment "					// Create the 'Network Builder' section"}}
					const networkBuilderkDiv = document.createElement('div');
					networkBuilderkDiv.id = 'networkBuilder';
					networkBuilderkDiv.className = 'column my-auto';

					const networkBuilderkLabel = document.createElement('label');
					networkBuilderkLabel.className = 'label is-smallest';
					networkBuilderkLabel.textContent = 'Link Spawner :';

					const createLinkSourceNodeInput = document.createElement('input');
					createLinkSourceNodeInput.className = 'input is-smallest-element';
					createLinkSourceNodeInput.type = 'text';
					createLinkSourceNodeInput.id = 'createLinkSourceNodeInput';
					createLinkSourceNodeInput.placeholder = 'Source Node Name';

					const createLinkTargetNodeInput = document.createElement('input');
					createLinkTargetNodeInput.className = 'input is-smallest-element';
					createLinkTargetNodeInput.type = 'text';
					createLinkTargetNodeInput.id = 'createLinkTargetNodeInput';
					createLinkTargetNodeInput.placeholder = 'Target Node Name';

					const connectNodesButton = document.createElement('button');
					connectNodesButton.className = 'button is-smallest-element';
					connectNodesButton.id = 'connectNodesAction';
					connectNodesButton.textContent = 'Spawn Link';

					networkBuilderkDiv.appendChild(networkBuilderkLabel);
					networkBuilderkDiv.appendChild(createLinkSourceNodeInput);
					networkBuilderkDiv.appendChild(createLinkTargetNodeInput);
					networkBuilderkDiv.appendChild(connectNodesButton);

					block1.appendChild(networkBuilderkDiv);

{{rawJSComment "					// Create the fifth block of content"}}
					const block5 = document.createElement('div');
					block5.className = 'panel-block';

{{rawJSComment "					// Create the 'Close' button"}}
					const closePanel01Button = document.createElement('button');
					closePanel01Button.className = 'button is-smallest-element';
					closePanel01Button.id = 'closeForm';
					closePanel01Button.textContent = 'Close';

					block5.appendChild(closePanel01Button);

{{rawJSComment "					// Append all blocks to the Tab-01 container"}}
					tab02Container.appendChild(block1);
					tab02Container.appendChild(block5);

{{rawJSComment "					// call event handler function"}}
					spawnNodeButton.addEventListener('click', spawnNodeEvent)
					closePanel01Button.addEventListener('click', closePanel01Event)


					return tab02Container;
				}

				function createNodeDetailTab(node, panelHeadingText) {
					const modifiedHeaderText = panelHeadingText.replace(/\s+/g, '');
{{rawJSComment "					// Create the tab-container "}}
					const tabContainer = document.createElement('div');
					tabContainer.id = `tabContainer-${modifiedHeaderText}`
					tabContainer.className = 'panel-tabContainer';

{{rawJSComment "					// Panel Block 01"}}
					panelBlockContainer = createPanelBlockContainer(tabContainer.id)
					panelBlock01 = panelBlockContainer.panelBlock
					divPanelBlock01 = panelBlockContainer.divPanelBlock

					const shellUrl = '/cloudshell/';

					const Panel01ColumnsConfig = [
						{
							idSuffix: 'labelNodeName',
							columnLabelTextContent: 'Node Name',
							columnLabelClass: 'column is-4 p-1',
							columnInputType: 'field',
							columnInputContent: node.data('name'),
							addonsContent: [
							{
								name: 'blue',
								iconClass: 'fas fa-terminal',
								hoverMessage: 'Click to open a web-based SSH console',
								hrefFunction: 'link',
								hrefLink: `${shellUrl}?RouterID=${node.data('extraData').mgmtIpv4Addresss}?RouterName=${node.data('extraData').id}`
							},
							{
								name: 'blue',
								iconClass: 'far fa-clone',
								hoverMessage: 'Click to copy the SSH command to your clipboard.',
								hrefFunction: 'copy',
								hrefLink: `ssh -t ${node.data("extraData").clabServerUsername}@${location.hostname} "ssh admin@${node.data('extraData').longname}"`
							}]
						},
						{ idSuffix: 'labelStatus', columnLabelTextContent: 'Status', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('containerDockerExtraAttribute').status },
						{ idSuffix: 'labelKind', columnLabelTextContent: 'Kind', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').kind },
						{ idSuffix: 'labelImage', columnLabelTextContent: 'Image', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').image },
						{ idSuffix: 'labelManagementIPv4', columnLabelTextContent: 'Management IPv4', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').mgmtIpv4Addresss },
						{ idSuffix: 'labelManagement IPv6', columnLabelTextContent: 'Management IPv6', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').mgmtIpv6Addresss },
						{ idSuffix: 'labelFqdn', columnLabelTextContent: 'FQDN', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').fqdn },
						{ idSuffix: 'labelGroup', columnLabelTextContent: 'Group', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').group },
						{ idSuffix: 'labeltopoViewerRole', columnLabelTextContent: 'TopoViewer Role', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('topoViewerRole') },
					];

					createPanelBlockForm(Panel01ColumnsConfig, panelBlock01, divPanelBlock01)

{{rawJSComment "					// Per panelBlock divPanelBlock01 --> panelBlock01"}}
					panelBlock01.appendChild(divPanelBlock01)

{{rawJSComment "					// --> tabContainer"}}
					tabContainer.appendChild(panelBlock01)

					return tabContainer
				}

				function createEdgeDetailTab(edge, panelHeadingText) {
					const modifiedHeaderText = panelHeadingText.replace(/\s+/g, '');

{{rawJSComment "					// Create the tab-container "}}
					const tabContainer = document.createElement('div');
					tabContainer.id = `tabContainer-${modifiedHeaderText}`
					tabContainer.className = 'panel-tabContainer';

{{rawJSComment "					// Panel Block 01"}}
					panelBlockContainer = createPanelBlockContainer(tabContainer.id)
					panelBlock01 = panelBlockContainer.panelBlock
					divPanelBlock01 = panelBlockContainer.divPanelBlock

					const Panel01ColumnsConfig = [
						{ idSuffix: 'LinkName', columnLabelTextContent: 'Link Name', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: edge.data('source') + "---" + edge.data('target') },
					];

					createPanelBlockForm(Panel01ColumnsConfig, panelBlock01, divPanelBlock01)

{{rawJSComment "					// append divPanelBlock02 --> panelBlock02 --> tabContainer"}}
					panelBlock01.append(divPanelBlock01)
					tabContainer.appendChild(panelBlock01)

{{rawJSComment "					// Panel Block 02"}}
					panelBlockContainer = createPanelBlockContainer(tabContainer.id)
					panelBlock02 = panelBlockContainer.panelBlock
					divPanelBlock02 = panelBlockContainer.divPanelBlock

					const Panel02ColumnsConfig = [
					{ idSuffix: 'Source', columnLabelTextContent: 'Endpoint', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: edge.data('source') + "::" + edge.data('sourceEndpoint') },
					{ idSuffix: 'SourceMac', columnLabelTextContent: 'MAC address', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: edge.data('extraData').clabSourceMacAddress},

					{
						idSuffix: 'labelSourceImpairment',
						columnLabelTextContent: 'Impairment',
						columnLabelClass: 'column is-4 p-1',
						columnInputType: 'buttonGroup',
						columnInputContent: edge.data('source') + "::" + edge.data('sourceEndpoint'),
						columntInputAttribute: 'disabled',
						addonsContent: []
					},

					{
						idSuffix: 'labelSourceImpairmentDelay',
						columnLabelTextContent: 'Delay (ms)',
						columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
						columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
						columnInputType: 'input',
						columnInputClass: 'column is-3 p-1 pl-0',
						columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
						columnInputContent: '0',
						columnInputPlaceholder: 'node spacing',
						columnInputAttribute: 'enabled',
						addonsContent: []				
					},
					{
						idSuffix: 'labelSourceImpairmentJitter',
						columnLabelTextContent: 'Jitter (ms)',
						columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
						columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
						columnInputType: 'input',
						columnInputClass: 'column is-3 p-1 pl-0',
						columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
						columnInputContent: '0',
						columnInputPlaceholder: 'node spacing',
						columnInputAttribute: 'enabled',
						addonsContent: []				
					},
					{
						idSuffix: 'labelSourceImpairmentRate',
						columnLabelTextContent: 'Rate (kpbs)',
						columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
						columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
						columnInputType: 'input',
						columnInputClass: 'column is-3 p-1 pl-0',
						columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
						columnInputContent: '0',
						columnInputPlaceholder: 'node spacing',
						columnInputAttribute: 'enabled',
						addonsContent: []				
					},
					{
						idSuffix: 'labelSourceImpairmentLoss',
						columnLabelTextContent: 'Loss (%)',
						columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
						columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
						columnInputType: 'input',
						columnInputClass: 'column is-3 p-1 pl-0',
						columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
						columnInputContent: '0',
						columnInputPlaceholder: 'node spacing',
						columnInputAttribute: 'enabled',
						addonsContent: []				
					},
					{
						idSuffix: 'labelSourceImpairmentApply',
						columnLabelTextContent: 'Apply',
						columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
						columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
						columnInputType: 'buttonGroup',
						columnInputClass: 'column is-3 p-1 pl-0',
						columnInputContent: '0',
						columnInputAttribute: 'enabled',


						addonsContent: [
						{
							name: 'blue',
							iconClass: 'fas fa-play',
							hoverMessage: 'Click to START the link impairment.',
							hrefFunction: 'linkImpairmentManagerExec',
							hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabSourceLongName} -i ${edge.data("sourceEndpoint")}`,
							hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabSourceLongName} -i ${edge.data("sourceEndpoint")}`,
							hrefFunctionArg: 'start-source',
						},
						{
							name: 'green',
							iconClass: 'far fa-clone',
							hoverMessage: 'Click to copy the START impairment command to your clipboard',
							hrefFunction: 'linkImpairmentCopy',
							hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabSourceLongName} -i ${edge.data("sourceEndpoint")}`,
							hrefFunctionArg: 'start-source',

						},	
						{
							name: 'blue',
							iconClass: 'fas fa-stop',
							hoverMessage: 'Click to STOP the link impairment.',
							hrefFunction: 'linkImpairmentManagerExec',
							hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabSourceLongName} -i ${edge.data("sourceEndpoint")}`,
							hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabSourceLongName} -i ${edge.data("sourceEndpoint")}`,
							hrefFunctionArg: 'stop-source'
						},						
						{
							name: 'green',
							iconClass: 'far fa-clone',
							hoverMessage: 'Click to copy the STOP impairment command to your clipboard',
							hrefFunction: 'linkImpairmentCopy',
							hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabSourceLongName} -i ${edge.data("sourceEndpoint")}`,
							hrefFunctionArg: 'stop-source',
						}]					
					},

						{
							idSuffix: 'labelSourceWireshark',
							columnLabelTextContent: 'Wireshark',
							columnLabelClass: 'column is-4 p-1',
							columnInputType: 'buttonGroup',
							columnInputContent: edge.data('source') + "::" + edge.data('sourceEndpoint'),
							columntInputAttribute: 'disabled',
							addonsContent: []
						},
						{
							idSuffix: 'labelSourceWiresharkCapture',
							columnLabelTextContent: 'Capture',
							columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'buttonGroup',
							columnInputClass: 'column is-3 p-1 pl-0',
							columnInputContent: '0',
							columnInputAttribute: 'enabled',
	
	
							addonsContent: [
							{
								name: 'blue',
								iconClass: 'fas fa-ethernet',
								hoverMessage: 'Click to cross-launch Wireshark app',
								hrefFunction: 'link',
								hrefLink: 'clab-capture://' + edge.data("extraData").clabServerUsername + '@' + location.host + '?' + edge.data('extraData').clabSourceLongName + '?' + edge.data('sourceEndpoint')
							},
							{
								name: 'green',
								iconClass: 'far fa-clone',
								hoverMessage: 'Click to copy the SSH command to your clipboard.',
								hrefFunction: 'copy',
								hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} "sudo -S /sbin/ip netns exec ${edge.data('extraData').clabSourceLongName} tcpdump -U -nni ${edge.data("sourceEndpoint")} -w -" | wireshark -k -i -`
	
							}]
					},

					];


					createPanelBlockForm(Panel02ColumnsConfig, panelBlock02, divPanelBlock02)

{{rawJSComment "					// append divPanelBlock02 --> panelBlock02 --> tabContainer"}}
					panelBlock02.append(divPanelBlock02)
					tabContainer.appendChild(panelBlock02)

{{rawJSComment "					// Panel Block 03"}}
					panelBlockContainer = createPanelBlockContainer(tabContainer.id)
					panelBlock03 = panelBlockContainer.panelBlock
					divPanelBlock03 = panelBlockContainer.divPanelBlock

					const Panel03ColumnsConfig = [
						{ idSuffix: 'Target', columnLabelTextContent: 'Endpoint', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: edge.data('target') + "::" + edge.data('targetEndpoint') },
						{ idSuffix: 'TargetMac', columnLabelTextContent: 'MAC address', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: edge.data('extraData').clabTargetMacAddress},
						{
							idSuffix: 'labelTargetImpairment',
							columnLabelTextContent: 'Impairment',
							columnLabelClass: 'column is-4 p-1',
							columnInputType: 'buttonGroup',
							columnInputContent: edge.data('target') + "::" + edge.data('targetEndpoint'),
							columntInputAttribute: 'disabled',
							addonsContent: []
						},
	
						{
							idSuffix: 'labelTargetImpairmentDelay',
							columnLabelTextContent: 'Delay (ms)',
							columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-3 p-1 pl-0',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '0',
							columnInputPlaceholder: 'node spacing',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelTargetImpairmentJitter',
							columnLabelTextContent: 'Jitter (ms)',
							columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-3 p-1 pl-0',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '0',
							columnInputPlaceholder: 'node spacing',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelTargetImpairmentRate',
							columnLabelTextContent: 'Rate (kpbs)',
							columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-3 p-1 pl-0',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '0',
							columnInputPlaceholder: 'node spacing',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelTargetImpairmentLoss',
							columnLabelTextContent: 'Loss (%)',
							columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'input',
							columnInputClass: 'column is-3 p-1 pl-0',
							columnInputElementClass: 'input is-size-7 has-text-left has-text-weight-normal is-smallest-element',
							columnInputContent: '0',
							columnInputPlaceholder: 'node spacing',
							columnInputAttribute: 'enabled',
							addonsContent: []				
						},
						{
							idSuffix: 'labelTargetImpairmentApply',
							columnLabelTextContent: 'Apply',
							columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
							columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
							columnInputType: 'buttonGroup',
							columnInputClass: 'column is-3 p-1 pl-0',
							columnInputContent: '0',
							columnInputAttribute: 'enabled',
	
	
							addonsContent: [
							{
								name: 'blue',
								iconClass: 'fas fa-play',
								hoverMessage: 'Click to START the link impairment.',
								hrefFunction: 'linkImpairmentManagerExec',
								hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabTargetLongName} -i ${edge.data("targetEndpoint")}`,
								hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabTargetLongName} -i ${edge.data("targetEndpoint")}`,
								hrefFunctionArg: 'start-target',
							},
							{
								name: 'green',
								iconClass: 'far fa-clone',
								hoverMessage: 'Click to copy the START impairment command to your clipboard',
								hrefFunction: 'linkImpairmentCopy',
								hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabTargetLongName} -i ${edge.data("targetEndpoint")}`,
								hrefFunctionArg: 'start-target',
	
							},	
							{
								name: 'blue',
								iconClass: 'fas fa-stop',
								hoverMessage: 'Click to STOP the link impairment.',
								hrefFunction: 'linkImpairmentManagerExec',
								hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabTargetLongName} -i ${edge.data("targetEndpoint")}`,
								hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabTargetLongName} -i ${edge.data("targetEndpoint")}`,
								hrefFunctionArg: 'stop-target'
							},						
							{
								name: 'green',
								iconClass: 'far fa-clone',
								hoverMessage: 'Click to copy the STOP impairment command to your clipboard',
								hrefFunction: 'linkImpairmentCopy',
								hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data('extraData').clabTargetLongName} -i ${edge.data("targetEndpoint")}`,
								hrefFunctionArg: 'stop-target',
							}]					
						},
	
							{
								idSuffix: 'labelTargetWireshark',
								columnLabelTextContent: 'Wireshark',
								columnLabelClass: 'column is-4 p-1',
								columnInputType: 'buttonGroup',
								columnInputContent: edge.data('target') + "::" + edge.data('targetEndpoint'),
								columntInputAttribute: 'disabled',
								addonsContent: []
							},
							{
								idSuffix: 'labelTargetWiresharkCapture',
								columnLabelTextContent: 'Capture',
								columnLabelClass: 'column is-7 pt-0 pr-1 LinksLenghtSlider is-light',
								columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
								columnInputType: 'buttonGroup',
								columnInputClass: 'column is-3 p-1 pl-0',
								columnInputContent: '0',
								columnInputAttribute: 'enabled',
		
		
								addonsContent: [
								{
									name: 'blue',
									iconClass: 'fas fa-ethernet',
									hoverMessage: 'Click to cross-launch Wireshark app',
									hrefFunction: 'link',
									hrefLink: 'clab-capture://' + edge.data("extraData").clabServerUsername + '@' + location.host + '?' + edge.data('extraData').clabTargetLongName + '?' + edge.data('targetEndpoint')
								},
								{
									name: 'green',
									iconClass: 'far fa-clone',
									hoverMessage: 'Click to copy the SSH command to your clipboard.',
									hrefFunction: 'copy',
									hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} "sudo -S /sbin/ip netns exec ${edge.data('extraData').clabTargetLongName} tcpdump -U -nni ${edge.data("targetEndpoint")} -w -" | wireshark -k -i -`
		
								}]
						},
					];

					createPanelBlockForm(Panel03ColumnsConfig, panelBlock03, divPanelBlock03)

{{rawJSComment "					// append divPanelBlock03 --> panelBlock03 --> tabContainer"}}
					panelBlock03.appendChild(divPanelBlock03)
					tabContainer.appendChild(panelBlock03)


					return tabContainer;
				}

				
{{rawJSComment "				// ######################################################"}}
{{rawJSComment "				// END of JS Functions HTML Element Creation section"}}
{{rawJSComment "				// END of JS Functions HTML Element Creation section"}}
{{rawJSComment "				// ######################################################"}}


{{rawJSComment "				// ######################################################"}}
{{rawJSComment "				// START of JS Functions Event Handling section"}}
{{rawJSComment "				// START of JS Functions Event Handling section"}}
{{rawJSComment "				// ######################################################"}}

				function generateNodesEvent(event) {
{{rawJSComment "					// Your event handling logic here"}}
{{rawJSComment "					//- Add a click event listener to the 'Generate' button"}}
{{rawJSComment "					//- Get the number of node from the input field  "}}
					console.log('generateNodesButton clicked')
					const numNodes = document.getElementById('generateNodesInput').value;
					console.log(numNodes)
{{rawJSComment "					//- Check if the number of node is empty  "}}
					if (numNodes === null) {
{{rawJSComment "						//- if node number empty do nothing "}}
						return;
					}
					const numNodesToGenerate = parseInt(numNodes, 10);
{{rawJSComment "					//- Check if the number of node is positive "}}
					if (isNaN(numNodesToGenerate) || numNodesToGenerate <= 0) {
{{rawJSComment "						//- Invalid input"}}
						appendMessage("Error:" + "Bro, you gotta enter a valid positive number, come on!");
						return;
					}
{{rawJSComment "					//- Generate nodes with random positions"}}
					for (let i = 0; i < numNodesToGenerate; i++) {
						const nodeName = `node-${i + 1}`;
						const newNode = {
							group: 'nodes',
							data: {
								id: nodeName,
								name: nodeName,
							},
							position: {
								x: Math.random() * 400,
								y: Math.random() * 400
							}
						};
{{rawJSComment "						//-cy.add(newNode);"}}
						try {
							cy.add(newNode);
{{rawJSComment "							//- throw new Error('This is an example exception');"}}
						} catch (error) {
{{rawJSComment "							//- Log the exception to the console"}}
							console.error("An exception occurred:", error);
{{rawJSComment "							//- Log the exception to notification message to the textarea "}}
							appendMessage("An exception occurred:" + error);
						}
					}
{{rawJSComment "					//- Generate random edges between nodes"}}
					for (let i = 0; i < numNodesToGenerate; i++) {
						const sourceNode = `node-${i + 1}`;
						const targetNode = `node-${Math.floor(Math.random() * numNodesToGenerate) + 1}`;
						if (sourceNode !== targetNode) {
							const newEdge = {
								group: 'edges',
								data: {
									id: "from-" + sourceNode + "-to-" + targetNode,
									name: "from-" + sourceNode + "-to-" + targetNode,
									source: sourceNode,
									target: targetNode
								}
							};
=======
=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
						socket.onopen = () => {
							console.log(`Successfully connected WebSocket to ${url}`);
							if (socket.readyState === WebSocket.OPEN) {
								socket.send(`Hi From the WebSocketClient-${url}`);
							}
						};
				
						socket.onclose = (event) => {
							console.log(`Socket to ${url} closed: `, event);
							socket.send("Client Closed!");
						};
				
						socket.onerror = (error) => {
							console.log(`Socket to ${url} error: `, error);
						};
				
						socket.onmessage = onMessageCallback;
				
						return socket;
					}
				
					// WebSocket for uptime
					// WebSocket for uptime
					const socketUptime = initializeWebSocket("/uptime", (msgUptime) => {
						const string01 = "Containerlab Topology: " + labName;
						const string02 = " ::: Uptime: " + msgUptime.data;
				
						const ClabSubtitle = document.getElementById("ClabSubtitle");
						const messageBody = string01 + string02;
				
						ClabSubtitle.innerText = messageBody;
						console.log(ClabSubtitle.innerText);
					});
				
					// WebSocket for ContainerNodeStatus
					// WebSocket for ContainerNodeStatus
					const socketContainerNodeStatusInitial = initializeWebSocket(
						"/containerNodeStatus",
						(msgContainerNodeStatus) => {
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
							try {
								const { Names, Status, State } = JSON.parse(msgContainerNodeStatus.data);
								setNodeContainerStatus(Names, Status);
								console.log(JSON.parse(msgContainerNodeStatus.data));
				
								setNodeDataWithContainerAttribute(Names, Status, State);
							} catch (error) {
								console.error("Error parsing JSON:", error);
							}
						},
					);
				
					// WebSocket for clabServerAddress
					// WebSocket for clabServerAddress
					const socketclabServerAddress = initializeWebSocket(
						"/clabServerAddress",
						(msgclabServerAddress) => {
							console.log(msgclabServerAddress.data);
							document.title = "TopoViewer ::: " + msgclabServerAddress.data;
						},
					);
				
					//- Instantiate Cytoscape.js
					//- Instantiate Cytoscape.js
					const cy = cytoscape({
						container: document.getElementById("cy"),
						elements: [],
						style: [
							{
								selector: "node",
								style: {
									"background-color": "#3498db",
									label: "data(label)",
								},
							},
						],
					});
					
				
					loadCytoStyle();
					function loadCytoStyle() {
						//- Load and apply Cytoscape styles from cy-style.json using fetch
						//- Load and apply Cytoscape styles from cy-style.json using fetch
						fetch("cy-style.json")
							.then((response) => response.json())
							.then((styles) => {
								//- Apply styles loaded from cy-style.json
								//- Apply styles loaded from cy-style.json
								cy.style().fromJson(styles).update();
							})
							.catch((error) => {
								console.error(
									"Oops, we hit a snag! Couldnt load the cyto styles, bro.",
									error,
								);
								appendMessage(
									`Oops, we hit a snag! Couldnt load the cyto styles, bro.: ${error}`,
								);
							});
					}

					cy.style.background = "white"


					// Enable grid guide extension
					cy.gridGuide({
						// On/Off Modules
							 
							snapToGridOnRelease: true, 
							snapToGridDuringDrag: false, 
							snapToAlignmentLocationOnRelease: true, 
							snapToAlignmentLocationDuringDrag: false, 
							distributionGuidelines: false, 
							geometricGuideline: false, 
							initPosAlignment: false, 
							centerToEdgeAlignment: false, 
							resize: false, 
							parentPadding: false, 
							drawGrid: false, 
					
							// General
							gridSpacing: 10, 
							snapToGridCenter: true, 
					
							// Draw Grid
							zoomDash: true, 
							panGrid: true, 
							gridStackOrder: -1, 
							gridColor: '#dedede', 
							lineWidth: 1.0, 
					
							// Guidelines
							guidelinesStackOrder: 4, 
							guidelinesTolerance: 2.00, 
							guidelinesStyle: { 
								strokeStyle: "#8b7d6b", 
								geometricGuidelineRange: 400, 
								range: 100, 
								minDistRange: 10, 
								distGuidelineOffset: 10, 
								horizontalDistColor: "#ff0000", 
								verticalDistColor: "#00ff00", 
								initPosAlignmentColor: "#0000ff", 
								lineDash: [0, 0], 
								horizontalDistLine: [0, 0], 
								verticalDistLine: [0, 0], 
								initPosAlignmentLine: [0, 0], 
							},
					
							// Parent Padding
							parentSpacing: -1 
						});
						
					// Fetch and load element data from a JSON file
					fetch("dataCytoMarshall-" + labName + ".json")
						.then((response) => response.json())
						.then((elements) => {
							// Add the elements to the Cytoscape instance
							// Add the elements to the Cytoscape instance
							cy.add(elements);
							//- run layout
							//- run layout
							const layout = cy.layout({
								name: "cola",
								nodeGap: 5,
								edgeLength: 100,
								animate: true,
								randomize: false,
								maxSimulationTime: 1500,
							});
							layout.run();
				
							// remove node topoviewer
							// remove node topoviewer
							topoViewerNode = cy.filter('node[name = "topoviewer"]');
							topoViewerNode.remove();
						})
						.catch((error) => {
							console.error("Error loading graph data:", error);
						});
				
					// Instantiate hover text element
					// Instantiate hover text element
					const hoverText = document.createElement("box");
					hoverText.classList.add(
						"hover-text",
						"is-hidden",
						"box",
						"has-text-weight-normal",
						"is-warning",
						"is-smallest",
					);
					hoverText.textContent = "Launch CloudShell.";
					document.body.appendChild(hoverText);
				
					//- Toggle the Panel(s) when clicking on the cy container
					//- Toggle the Panel(s) when clicking on the cy container
					document.getElementById("cy").addEventListener("click", function (event) {
						//- This code will be executed when you click anywhere in the Cytoscape container
						//- You can add logic specific to the container here
						//- This code will be executed when you click anywhere in the Cytoscape container
						//- You can add logic specific to the container here
				
						loadCytoStyle();
				
						if (!nodeClicked && !edgeClicked) {
							if (!isPanel01Cy) {
								document.getElementById("panel-node").style.display = "none";

								removeElementById("Panel-01");
								removeElementById("Panel-03");
								
								// display none each ViewPortDrawer Element, the ViewPortDrawer is created during DOM loading and styled as display node initially
								// display none each ViewPortDrawer Element, the ViewPortDrawer is created during DOM loading and styled as display node initially
								var ViewPortDrawerElements =
									document.getElementsByClassName("ViewPortDrawer");
								var ViewPortDrawerArray = Array.from(ViewPortDrawerElements);
								ViewPortDrawerArray.forEach(function (element) {
									element.style.display = "none";
								});
				
								// Define tabContentFns with custom content generation functions
								// createNetworkExplorerTab is has corresponding function with similar name.
								// Define tabContentFns with custom content generation functions
								// createNetworkExplorerTab is has corresponding function with similar name.
				
								// Hide Actions panel, future use
								// const tabContentFns = [createNetworkExplorerTab, createNetworkBuilderTab];
								// const tabContentFnsArg = ['createNetworkExplorerTab', 'createNetworkBuilderTab'];
								// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg, 'Actions');
								// Hide Actions panel, future use
								// const tabContentFns = [createNetworkExplorerTab, createNetworkBuilderTab];
								// const tabContentFnsArg = ['createNetworkExplorerTab', 'createNetworkBuilderTab'];
								// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg, 'Actions');
							} else {
								removeElementById("Panel-01");
								appendMessage(`"try to remove panel01-Cy"`);
							}
						}
						nodeClicked = false;
						edgeClicked = false;
				
						appendMessage(`"isPanel01Cy-cy: " ${isPanel01Cy}`);
						appendMessage(`"nodeClicked: " ${nodeClicked}`);
					});
				
					// Click event listener for nodes
					// Click event listener for nodes
					cy.on("click", "node", function (event) {
						// This code will be executed when you click on a node
						// This code will be executed when you click on a node
						const node = event.target;
						nodeClicked = true;
				
						if (!node.isParent()) {
							// You can add logic specific to nodes here
							// You can add logic specific to nodes here

							console.log (node)
							console.log (node.data("containerDockerExtraAttribute").status)
							console.log (node.data("extraData"))

							document.getElementById("panel-node").style.display = "none";
						
							if (document.getElementById("panel-node").style.display === "none") {
								document.getElementById("panel-node").style.display = "block";
							  } else {
								document.getElementById("panel-node").style.display = "none";
							  }

							document.getElementById("panel-node-name").textContent = node.data("extraData").longname
							document.getElementById("panel-node-status").textContent = node.data("containerDockerExtraAttribute").status
							document.getElementById("panel-node-kind").textContent = node.data("extraData").kind
							document.getElementById("panel-node-image").textContent = node.data("extraData").image
							document.getElementById("panel-node-mgmtipv4").textContent = node.data("extraData").mgmtIpv4Addresss
							document.getElementById("panel-node-mgmtipv6").textContent = node.data("extraData").mgmtIpv6Addresss
							document.getElementById("panel-node-fqdn").textContent = node.data("extraData").fqdn
							document.getElementById("panel-node-group").textContent = node.data("extraData").group
							document.getElementById("panel-node-topoviewerrole").textContent = node.data("topoViewerRole")

							// set selected node-long-name to global variable
							globalSelectedNode = node.data("extraData").longname
							console.log("internal: ", globalSelectedNode)

							appendMessage(`"isPanel01Cy-cy: " ${isPanel01Cy}`);
							appendMessage(`"nodeClicked: " ${nodeClicked}`);
						}
					});
				
					// Click event listener for edges
					// Click event listener for edges
					cy.on("click", "edge", function (event) {
						// This code will be executed when you click on a node
						// You can add logic specific to nodes here
						const clickedEdge = event.target;
						const defaultEdgeColor = "#B1BCC8";
						edgeClicked = true;
				
						console.log(defaultEdgeColor);
				
						// Change the color of the clicked edge (for example, to red)
						clickedEdge.style("line-color", "#0043BF");
				
						// Revert the color of other edges that were not clicked (e.g., back to their default color)
						cy.edges().forEach(function (edge) {
							if (edge !== clickedEdge) {
								edge.style("line-color", defaultEdgeColor);
							}
						});
				
						// You can add logic specific to nodes here
						removeElementById("Panel-01");
						const tabContentFns = [createEdgeDetailTab];
						tabContentFnsArg = [clickedEdge];
				
						createContentPanel(
							"Panel-01",
							tabContentFns,
							tabContentFnsArg[0],
							"Link Properties",
						);
				
						appendMessage(`"isPanel01Cy-cy: " ${isPanel01Cy}`);
						appendMessage(`"nodeClicked: " ${nodeClicked}`);
					});
				
					// Instantiate viewport buttons
					// Instantiate viewport buttons
					createViewportButtons(cy);
				
					function createViewportButtons(cy) {
						// Create a buttons container
						// Create a buttons container
						const boxContainer = document.createElement("div");
						boxContainer.className = "box p-2";
						boxContainer.id = "ViewPortButtons";
						// Set a new box shadow using the style property
						// boxContainer.style.boxShadow = '5px 10px 10px rgba(0, 0, 0, 0.3)';
						// Set a new box shadow using the style property
						// boxContainer.style.boxShadow = '5px 10px 10px rgba(0, 0, 0, 0.3)';
				
						// Create a button container
						// Create a button container
						const buttonContainer = document.createElement("div");
						buttonContainer.className =
							"is-flex is-flex-direction-column is-justify-content-space-evenly";
				
						const configContent = [
							{
								name: "fitToScreen",
								iconClass: "fas fa-expand",
								hoverMessage: "Fit to screen",
								hrefFunction: "eventHandlerLink",
								hrefLink: "",
								callOutFuntionName: "zoomToFitDrawer",
							},
							{
								name: "findNode",
								iconClass: "fas fa-crosshairs",
								hoverMessage: "Find node",
								hrefFunction: "drawer",
								hrefLink: ``,
								drawerConfig: [
									{
										idSuffix: "labelFindNode",
										columnLabelTextContent: "Node Finder",
										columnLabelClass:
											"column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-weight-semibold px-auto",
										columnInputType: "",
										columnInputContent: "",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelFindNodeNodeName",
										columnLabelTextContent: "Node Name",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto pt-1",
										columnInputType: "input",
										columnInputClass: "column is-6 p-1 pl-3",
										columnInputElementClass:
											"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
										columnInputContent: "",
										columnInputPlaceholder: "node name",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelFindNodeApply",
										columnLabelTextContent: "",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass: "",
										columnInputType: "button",
										columnInputClass: "column is-6 p-1 pl-3 is-flex is-justify-content-right",
										columnInputElementClass: "button is-size-7 is-smallest-element is-link",
										columnInputContent: "Find",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										columnInputCallOutFuntionName: "nodeFindDrawer",
										addonsContent: [],
									},
								],
							},
							{
								name: "findRoute",
								iconClass: "fas fa-route",
								hoverMessage: "Route Finder",
								hrefFunction: "drawer",
								hrefLink: ``,
								drawerConfig: [
									{
										idSuffix: "labelFindRoute",
										columnLabelTextContent: "Route Finder",
										columnLabelClass:
											"column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-weight-semibold px-auto",
										columnInputType: "",
										columnInputContent: "",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelFindRouteSource",
										columnLabelTextContent: "Source Node",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto pt-1",
										columnInputType: "input",
										columnInputClass: "column is-6 p-1 pl-3",
										columnInputElementClass:
											"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
										columnInputContent: "",
										columnInputPlaceholder: "node name",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelFindRouteTarget",
										columnLabelTextContent: "Target Node",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto pt-1",
										columnInputType: "input",
										columnInputClass: "column is-6 p-1 pl-3",
										columnInputElementClass:
											"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
										columnInputContent: "",
										columnInputPlaceholder: "node name",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelFindRouteTargetFind",
										columnLabelTextContent: "",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass: "",
										columnInputType: "button",
										columnInputClass: "column is-6 p-1 pl-3 is-flex is-justify-content-right",
										columnInputElementClass: "button is-size-7 is-smallest-element is-link",
										columnInputContent: "Find",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										columnInputCallOutFuntionName: "pathFinderDijkstraDrawer",
										addonsContent: [],
									},
								],
							},
							{
								name: "adjustLayout",
								iconClass: "fas fa-solid fa-circle-nodes",
								hoverMessage: "Adjust Layout",
								hrefFunction: "drawer",
								hrefLink: ``,
								drawerConfig: [
									{
										idSuffix: "labelAdjustLayoutForceDirected",
										columnLabelTextContent: "Force-Directed Layout",
										columnLabelClass:
											"column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-weight-semibold px-auto",
										columnInputType: "",
										columnInputContent: "",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutLinksLenghtSlider",
										columnLabelTextContent: "Link Length",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto",
										columnInputType: "slider",
										columnInputContent: "",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutNodeGapSlider",
										columnLabelTextContent: "Node Gap",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto",
										columnInputType: "slider",
										columnInputContent: "",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutAlignmentVertical",
										columnLabelTextContent: "Vertical Alignment Layout",
										columnLabelClass:
											"column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-weight-semibold px-auto",
										columnInputType: "",
										columnInputContent: "",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutAlignmentVerticalNodeGap",
										columnLabelTextContent: "Node Gap",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto pt-1",
										columnInputType: "input",
										columnInputClass: "column is-6 p-1 pl-3",
										columnInputElementClass:
											"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
										columnInputContent: "5",
										columnInputPlaceholder: "node spacing",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutAlignmentVerticalGroupGap",
										columnLabelTextContent: "Group Gap",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto pt-1",
										columnInputType: "input",
										columnInputClass: "column is-6 p-1 pl-3",
										columnInputElementClass:
											"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
										columnInputContent: "50",
										columnInputPlaceholder: "group spacing",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutAlignmentVerticalApply",
										columnLabelTextContent: "",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass: "",
										columnInputType: "button",
										columnInputClass: "column is-6 p-1 pl-3 is-flex is-justify-content-right",
										columnInputElementClass: "button is-size-7 is-smallest-element is-link",
										columnInputContent: "Apply",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										columnInputCallOutFuntionName: "verticallAllignLayout",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutAlignmentHorizontal",
										columnLabelTextContent: "Horizontal Alignment Layout",
										columnLabelClass:
											"column is-12 pt-2 pb-2 pr-2 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-weight-semibold px-auto",
										columnInputType: "",
										columnInputContent: "",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutAlignmentHorizontalNodeGap",
										columnLabelTextContent: "Node Gap",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto pt-1",
										columnInputType: "input",
										columnInputClass: "column is-6 p-1 pl-3",
										columnInputElementClass:
											"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
										columnInputContent: "5",
										columnInputPlaceholder: "node spacing",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutAlignmentHorizontalGroupGap",
										columnLabelTextContent: "Group Gap",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass:
											"label is-size-7 has-text-right has-text-weight-normal px-auto pt-1",
										columnInputType: "input",
										columnInputClass: "column is-6 p-1 pl-3",
										columnInputElementClass:
											"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
										columnInputContent: "50",
										columnInputPlaceholder: "group spacing",
										columnInputAttribute: "enabled",
										addonsContent: [],
									},
									{
										idSuffix: "labelAdjustLayoutAlignmentHorizontalApply",
										columnLabelTextContent: "",
										columnLabelClass: "column is-6 pt-0 pr-1 LinksLenghtSlider",
										columnLabelElementClass: "",
										columnInputType: "button",
										columnInputClass: "column is-6 p-1 pl-3 is-flex is-justify-content-right",
										columnInputElementClass: "button is-size-7 is-smallest-element is-link",
										columnInputContent: "Apply",
										columnInputPlaceholder: "",
										columnInputAttribute: "enabled",
										columnInputCallOutFuntionName: "horizontalAllignLayout",
										addonsContent: [],
									},
								],
							},
							{
								name: "togleEndpointLabel",
								iconClass: "fas fa-tag",
								hoverMessage: "Toggle endpoint label",
								hrefFunction: "eventHandlerLink",
								hrefLink: "",
								callOutFuntionName: "toggleLinkEndpoint",
							},
							{
								name: "togleContainerStatus",
								iconClass: "fab fa-docker",
								hoverMessage: "Toggle container status",
								hrefFunction: "eventHandlerLink",
								hrefLink: "",
								callOutFuntionName: "toggleContainerStatusVisibility",
							},
							{
								name: "captureViewport",
								idSuffix: "modalSaveViewport",
								iconClass: "fas fa-camera",
								hoverMessage: "Capture Viewport",
								hrefFunction: "eventHandlerLink",
								hrefLink: "",
								callOutFuntionName: "showModalCaptureViewport",
								callOutFuntionArgsString: "modalSaveViewport",
								callOutFuntionArgsObject: "",
							},
						];
				
						const controlId = "viewportButtons";
				
						configContent.forEach((config) => {
							const control = document.createElement("p");
				
							control.id = `${controlId}-button${config.name}`;
							control.className = "control p-0";
				
							const button = document.createElement("a");
							button.id = `${controlId}-button${config.name}`;
							// button.className = `button is-large is-outlined py-4 is-${addon.name === 'blue' ? 'link' : 'success'}`;
							// button.className = `button is-large is-outlined py-4 is-${addon.name === 'blue' ? 'link' : 'success'}`;
							button.className = `button px-4 py-4 is-smallest-element`;
							button.style.outline = "none";
				
							if (config.hrefFunction == "eventHandlerLink") {
								button.addEventListener("click", function (cy) {
									if (config.callOutFuntionArgsString != "") {
										eval(
											config.callOutFuntionName + `('${config.callOutFuntionArgsString}')`,
										);
									} else if (config.callOutFuntionArgsObject != "") {
										eval(config.callOutFuntionName + `(${config.callOutFuntionArgsObject})`);
									} else {
										// Use eval() to call the function by name
										// Use eval() to call the function by name
										eval(config.callOutFuntionName + `(cy)`);
									}
								});
							}
				
							if (config.hrefFunction == "drawer") {
								// button.addEventListener('click', () => {
								// Create an drawerBox element
								// button.addEventListener('click', () => {
								// Create an drawerBox element
								const drawerBox = document.createElement("div");
								drawerBox.className = "box drawerBox ViewPortDrawer p-1 is-1";
								drawerBox.style.display = "none";
				
								window.addEventListener("load", (event) => {
									// Access the height of buttonContainer here
									// Access the height of buttonContainer here
									const rect = boxContainer.getBoundingClientRect();
									const calculatedHeight = rect.height;
									// drawerBox.style.height = `${calculatedHeight}px`;
									// drawerBox.style.height = `${calculatedHeight}px`;
									drawerBox.style.height = "auto";
				
									drawerBox.style.display = "block";
				
									const contentHeight = drawerBox.getBoundingClientRect().height;
				
									if (contentHeight > calculatedHeight) {
										drawerBox.style.height = "auto";
									} else {
										drawerBox.style.height = `${calculatedHeight}px`;
									}
									drawerBox.style.display = "none";
								});
				
								//// The drawerBox element is created using createPanelBlockContainer() and createPanelBlockForm() functions
								// Panel Block 01
								//// The drawerBox element is created using createPanelBlockContainer() and createPanelBlockForm() functions
								// Panel Block 01
								panelBlockContainer = createPanelBlockContainer(`${button.id}`);
								panelBlock01 = panelBlockContainer.panelBlock;
								divPanelBlock01 = panelBlockContainer.divPanelBlock;
				
								createPanelBlockForm(
									config.drawerConfig,
									panelBlock01,
									divPanelBlock01,
									cy,
								);
								// Per panelBlock divPanelBlock01 --> panelBlock01
								// Per panelBlock divPanelBlock01 --> panelBlock01
								panelBlock01.appendChild(divPanelBlock01);
								drawerBox.appendChild(panelBlock01);
				
								// Add click event listener to the button
								// Add click event listener to the button
								button.addEventListener("click", () => {
									// Toggle the display of the corresponding drawerBox
									// Toggle the display of the corresponding drawerBox
									if (drawerBox.style.display === "none" || drawerBox.style.display === "") {
										// Hide all other drawerBoxes
										// Hide all other drawerBoxes
										const allAnimatedBoxes = document.querySelectorAll(".ViewPortDrawer");
										allAnimatedBoxes.forEach((box) => {
											if (box !== drawerBox) {
												box.style.display = "none";
											}
										});
										// Show the corresponding drawerBox
										// Show the corresponding drawerBox
										drawerBox.style.display = "block";
									} else {
										// Hide the corresponding drawerBox when clicked again
										// Hide the corresponding drawerBox when clicked again
										drawerBox.style.display = "none";
									}
								});
				
								// Append the container to the document body
								// Append the container to the document body
								document.body.appendChild(drawerBox);
							}
				
							// Create a icon element
							// Create a icon element
							const icon = document.createElement("span");
							icon.className = "icon is-small";
							const iconElement = document.createElement("i");
							iconElement.className = config.iconClass;
							icon.appendChild(iconElement);
				
							button.appendChild(icon);
							control.appendChild(button);
				
							// Create a hover text paragraph element
							// Create a hover text paragraph element
							const hoverText = document.querySelector(".hover-text");
				
							// Add event listeners for hover behavior
							// Add event listeners for hover behavior
							button.addEventListener("mouseover", () => {
								// Calculate the position for the hover text
								// Calculate the position for the hover text
								const rect = button.getBoundingClientRect();
								const top = rect.top - hoverText.offsetHeight + 20;
								const left = rect.left + 35;
								// Set the position and show the hover text
								// Set the position and show the hover text
								hoverText.style.top = `${top}px`;
								hoverText.style.left = `${left}px`;
								hoverText.classList.remove("is-hidden");
								hoverText.textContent = config.hoverMessage;
							});
				
							button.addEventListener("mouseout", () => {
								// Hide the hover text
								// Hide the hover text
								hoverText.classList.add("is-hidden");
							});
				
							// Append the button to the container
							// Append the button to the container
							buttonContainer.appendChild(control);
							boxContainer.appendChild(buttonContainer);
						});
				
						// Append the container to the document body
						// Append the container to the document body
						document.body.appendChild(boxContainer);
					}
				
					// Initiate Layout SLider
					// Initiate Layout SLider
					setupLayoutSliders(cy);
				
					function setupLayoutSliders(cy) {
						const updateLayout = (edgeLengthValue, nodeGapValue) => {
							console.log("edgeLengthValue", edgeLengthValue);
							console.log("nodeGapValue", nodeGapValue);
				
							cy
								.layout({
									fit: true,
									name: "cola",
									animate: true,
									randomize: false,
									maxSimulationTime: 400,
									//edgeLength: '50',
									// nodeGap: function(node){
									// 	 return 10;
									// 	},
									//edgeLength: '50',
									// nodeGap: function(node){
									// 	 return 10;
									// 	},
									edgeLength: function (e) {
										return edgeLengthValue / e.data("weight");
									},
									nodeGap: function (e) {
										return nodeGapValue / e.data("weight");
									},
								})
								.run();
						};
				
						const edgeLengthSlider = document.getElementById(
							"panelBlock-viewportButtons-buttonadjustLayout-divPanelBlock-columnContainerlabelAdjustLayoutLinksLenghtSlider-panelContentlabelAdjustLayoutLinksLenghtSlider-columnsPanelContentlabelAdjustLayoutLinksLenghtSlider-labelColumnlabelAdjustLayoutLinksLenghtSlider-inputColumnlabelAdjustLayoutLinksLenghtSlider-labellabelAdjustLayoutLinksLenghtSlider",
						);
						const nodeGapSlider = document.getElementById(
							"panelBlock-viewportButtons-buttonadjustLayout-divPanelBlock-columnContainerlabelAdjustLayoutNodeGapSlider-panelContentlabelAdjustLayoutNodeGapSlider-columnsPanelContentlabelAdjustLayoutNodeGapSlider-labelColumnlabelAdjustLayoutNodeGapSlider-inputColumnlabelAdjustLayoutNodeGapSlider-labellabelAdjustLayoutNodeGapSlider",
						);
				
						const sliderEventHandler = () => {
							console.log("edgeLengthSlider.value", edgeLengthSlider.value);
							console.log("nodeGapSlider.value", nodeGapSlider.value);
				
							const edgeLengthValue = parseFloat(edgeLengthSlider.value);
							const nodeGapValue = parseFloat(nodeGapSlider.value);
							updateLayout(edgeLengthValue, nodeGapValue);
						};
				
						edgeLengthSlider.addEventListener("input", sliderEventHandler);
						nodeGapSlider.addEventListener("input", sliderEventHandler);
					}
				
					// 
					// Start of JS Functions HTML Element Creation section
					// Start of JS Functions HTML Element Creation section
					// 
					// 
					// Start of JS Functions HTML Element Creation section
					// Start of JS Functions HTML Element Creation section
					// 
				
					// Function to create the Panel-01-nodeDetail content
					// Function to create the Panel-01-nodeDetail content
					function createContentPanelAction() {
						const panel = document.createElement("div");
						panel.className = "panel";
						panel.id = "Panel-03";
						panel.style.display = "block";
						// Create the panel heading
						// Create the panel heading
						const panelHeading = document.createElement("p");
						panelHeading.className = "panel-heading is-size-7";
						panelHeading.textContent = "Node Detail";
						// Create the panel tabs
						// Create the panel tabs
						const panelTabs = document.createElement("p");
						panelTabs.className = "panel-tabs";
						// Array of tab names
						// Array of tab names
						const tabNames = [
							"Network Explorer",
							"Network Builder",
							"Tab-03",
							"Tab-04",
							"Tab-05",
						];
						// Create tabs dynamically
						// Create tabs dynamically
						for (const name of tabNames) {
							const tab = document.createElement("a");
							tab.className = "toggle-Panel01-tab is-smallest";
							tab.setAttribute(
								"data-target",
								`Panel-01-nodeDetail--Tab-${name}-Container`,
							);
							tab.id = `Panel-01-nodeDetail--Tab-${name}-Button`;
							tab.textContent = name;
							panelTabs.appendChild(tab);
						}
						// Append the panel heading and tabs to the panel
						// Append the panel heading and tabs to the panel
						panel.appendChild(panelHeading);
						panel.appendChild(panelTabs);
				
						// Append the panel to the document body or another container of your choice
						// Append the panel to the document body or another container of your choice
						document.body.appendChild(panel);
					}
				
					function createNetworkExplorerTab() {
						// Create a div container for Tab-01 content
						// Create a div container for Tab-01 content
						const tab01Container = document.createElement("div");
				
						// Create the first block of content
						// Create the first block of content
						const block1 = document.createElement("div");
						block1.className = "panel-block";
				
						// Create the 'Network Maker' section
						// Create the 'Network Maker' section
						const nodeGenerate = document.createElement("div");
						nodeGenerate.id = "nodeGenerate";
						nodeGenerate.className = "column my-auto";
				
						const networkMakerLabel = document.createElement("label");
						networkMakerLabel.className = "label is-smallest";
						networkMakerLabel.setAttribute("for", "generateNodesInput");
						networkMakerLabel.textContent = "Network Maker:";
				
						const generateNodesInput = document.createElement("input");
						generateNodesInput.className = "input is-smallest-element";
						generateNodesInput.type = "text";
						generateNodesInput.id = "generateNodesInput";
						generateNodesInput.placeholder = "Wiro Sableng";
						generateNodesInput.value = "212";
				
						const generateNodesButton = document.createElement("button");
						generateNodesButton.className = "button is-smallest-element";
						generateNodesButton.id = "generateNodesButton";
						generateNodesButton.textContent = "Generate";
				
						nodeGenerate.appendChild(networkMakerLabel);
						nodeGenerate.appendChild(generateNodesInput);
						nodeGenerate.appendChild(generateNodesButton);
				
						// block1.appendChild(nodeAttributes);
						// block1.appendChild(nodeAttributes);
						block1.appendChild(nodeGenerate);
				
						// Create the second block of content
						// Create the second block of content
						const block2 = document.createElement("div");
						block2.className = "panel-block";
				
						// Create the fifth block of content
						// Create the fifth block of content
						const block5 = document.createElement("div");
						block5.className = "panel-block";
				
						// Create the 'Close' button
						// Create the 'Close' button
						const closePanel01Button = document.createElement("button");
						closePanel01Button.className = "button is-smallest-element";
						closePanel01Button.id = "closeForm";
						closePanel01Button.textContent = "Close";
				
						block5.appendChild(closePanel01Button);
				
						// Append all blocks to the Tab-01 container
						// Append all blocks to the Tab-01 container
						tab01Container.appendChild(block1);
						tab01Container.appendChild(block2);
						tab01Container.appendChild(block5);
				
						// call event handler function
						// call event handler function
						generateNodesButton.addEventListener("click", generateNodesEvent);
						closePanel01Button.addEventListener("click", closePanel01Event);
				
						return tab01Container;
					}
				
					function createNetworkBuilderTab() {
						// const content = document.createElement('div');
						// content.textContent = `Contentaaa for 2 `;
						// return content;
						// const content = document.createElement('div');
						// content.textContent = `Contentaaa for 2 `;
						// return content;
				
						// Create a div container for Tab-01 content
						// Create a div container for Tab-01 content
						const tab02Container = document.createElement("div");
				
						// Create the first block of content
						// Create the first block of content
						const block1 = document.createElement("div");
						block1.className = "panel-block";
				
						// Create the 'Node Spawner' section
						// Create the 'Node Spawner' section
						const nodeAttributes = document.createElement("div");
						nodeAttributes.id = "nodeAttributes";
						nodeAttributes.className = "column my-auto";
				
						const nodeNameLabel = document.createElement("label");
						nodeNameLabel.className = "label is-smallest";
						nodeNameLabel.setAttribute("for", "nodeName");
						nodeNameLabel.textContent = "Node Spawner:";
				
						const nodeNameInput = document.createElement("input");
						nodeNameInput.className = "input is-smallest-element";
						nodeNameInput.type = "text";
						nodeNameInput.id = "nodeName";
						nodeNameInput.placeholder = "Node Name";
				
						const nodeNameInput1 = document.createElement("input");
						nodeNameInput1.className = "input is-invisible is-smallest-element";
						nodeNameInput1.type = "text";
				
						const spawnNodeButton = document.createElement("button");
						spawnNodeButton.className = "button is-smallest-element";
						spawnNodeButton.id = "spawnNodeButton";
						spawnNodeButton.textContent = "Spawn Node";
				
						nodeAttributes.appendChild(nodeNameLabel);
						nodeAttributes.appendChild(nodeNameInput);
						nodeAttributes.appendChild(nodeNameInput1);
						nodeAttributes.appendChild(spawnNodeButton);
				
						block1.appendChild(nodeAttributes);
				
						// Create the 'Network Builder' section
						// Create the 'Network Builder' section
						const networkBuilderkDiv = document.createElement("div");
						networkBuilderkDiv.id = "networkBuilder";
						networkBuilderkDiv.className = "column my-auto";
				
						const networkBuilderkLabel = document.createElement("label");
						networkBuilderkLabel.className = "label is-smallest";
						networkBuilderkLabel.textContent = "Link Spawner :";
				
						const createLinkSourceNodeInput = document.createElement("input");
						createLinkSourceNodeInput.className = "input is-smallest-element";
						createLinkSourceNodeInput.type = "text";
						createLinkSourceNodeInput.id = "createLinkSourceNodeInput";
						createLinkSourceNodeInput.placeholder = "Source Node Name";
				
						const createLinkTargetNodeInput = document.createElement("input");
						createLinkTargetNodeInput.className = "input is-smallest-element";
						createLinkTargetNodeInput.type = "text";
						createLinkTargetNodeInput.id = "createLinkTargetNodeInput";
						createLinkTargetNodeInput.placeholder = "Target Node Name";
				
						const connectNodesButton = document.createElement("button");
						connectNodesButton.className = "button is-smallest-element";
						connectNodesButton.id = "connectNodesAction";
						connectNodesButton.textContent = "Spawn Link";
				
						networkBuilderkDiv.appendChild(networkBuilderkLabel);
						networkBuilderkDiv.appendChild(createLinkSourceNodeInput);
						networkBuilderkDiv.appendChild(createLinkTargetNodeInput);
						networkBuilderkDiv.appendChild(connectNodesButton);
				
						block1.appendChild(networkBuilderkDiv);
				
						// Create the fifth block of content
						// Create the fifth block of content
						const block5 = document.createElement("div");
						block5.className = "panel-block";
				
						// Create the 'Close' button
						// Create the 'Close' button
						const closePanel01Button = document.createElement("button");
						closePanel01Button.className = "button is-smallest-element";
						closePanel01Button.id = "closeForm";
						closePanel01Button.textContent = "Close";
				
						block5.appendChild(closePanel01Button);
				
						// Append all blocks to the Tab-01 container
						// Append all blocks to the Tab-01 container
						tab02Container.appendChild(block1);
						tab02Container.appendChild(block5);
				
						// call event handler function
						// call event handler function
						spawnNodeButton.addEventListener("click", spawnNodeEvent);
						closePanel01Button.addEventListener("click", closePanel01Event);
				
						return tab02Container;
					}
				
					function createNodeDetailTab(node, panelHeadingText) {
						const modifiedHeaderText = panelHeadingText.replace(/\s+/g, "");
						// Create the tab-container
						// Create the tab-container
						const tabContainer = document.createElement("div");
						tabContainer.id = `tabContainer-${modifiedHeaderText}`;
						tabContainer.className = "panel-tabContainer";
				
						// Panel Block 01
						// Panel Block 01
						panelBlockContainer = createPanelBlockContainer(tabContainer.id);
						panelBlock01 = panelBlockContainer.panelBlock;
						divPanelBlock01 = panelBlockContainer.divPanelBlock;
				
						const shellUrl = "/cloudshell/";
				
						const Panel01ColumnsConfig = [
							{
								idSuffix: "labelNodeName",
								columnLabelTextContent: "Node Name",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "field",
								columnInputContent: node.data("name"),
								addonsContent: [
									{
										name: "blue",
										iconClass: "fas fa-terminal",
										hoverMessage: "Click to open a web-based SSH console",
										hrefFunction: "link",
										hrefLink: `${shellUrl}?RouterID=${node.data("extraData").mgmtIpv4Addresss}?RouterName=${node.data("extraData").longname}`,
									},
									{
										name: "blue",
										iconClass: "far fa-clone",
										hoverMessage: "Click to copy the SSH command to your clipboard.",
										hrefFunction: "copy",
										hrefLink: `ssh -t ${node.data("extraData").clabServerUsername}@${location.hostname} "ssh admin@${node.data("extraData").longname}"`,
									},
								],
							},
							{
								idSuffix: "labelActions",
								columnLabelTextContent: "action",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "select",
								columnInputContent: "action-backup-restore",
								addonsContent: [
									{
										name: "blue",
										iconClass: "fas fa-terminal",
										hoverMessage: "Click to open a web-based SSH console",
										hrefFunction: "link",
										hrefLink: `${shellUrl}?RouterID=${node.data("extraData").mgmtIpv4Addresss}?RouterName=${node.data("extraData").longname}`,
									},
									{
										name: "blue",
										iconClass: "far fa-clone",
										hoverMessage: "Click to copy the SSH command to your clipboard.",
										hrefFunction: "copy",
										hrefLink: `ssh -t ${node.data("extraData").clabServerUsername}@${location.hostname} "ssh admin@${node.data("extraData").longname}"`,
									},
								],
							},
							{
								idSuffix: "labelStatus",
								columnLabelTextContent: "Status",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: node.data("containerDockerExtraAttribute").status,
							},
							{
								idSuffix: "labelKind",
								columnLabelTextContent: "Kind",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: node.data("extraData").kind,
							},
							{
								idSuffix: "labelImage",
								columnLabelTextContent: "Image",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: node.data("extraData").image,
							},
							{
								idSuffix: "labelManagementIPv4",
								columnLabelTextContent: "Management IPv4",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: node.data("extraData").mgmtIpv4Addresss,
							},
							{
								idSuffix: "labelManagement IPv6",
								columnLabelTextContent: "Management IPv6",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: node.data("extraData").mgmtIpv6Addresss,
							},
							{
								idSuffix: "labelFqdn",
								columnLabelTextContent: "FQDN",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: node.data("extraData").fqdn,
							},
							{
								idSuffix: "labelGroup",
								columnLabelTextContent: "Group",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: node.data("extraData").group,
							},
							{
								idSuffix: "labeltopoViewerRole",
								columnLabelTextContent: "TopoViewer Role",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: node.data("topoViewerRole"),
							},
						];
				
						createPanelBlockForm(Panel01ColumnsConfig, panelBlock01, divPanelBlock01);
				
						// Per panelBlock divPanelBlock01 --> panelBlock01
						// Per panelBlock divPanelBlock01 --> panelBlock01
						panelBlock01.appendChild(divPanelBlock01);
				
						// --> tabContainer
						// --> tabContainer
						tabContainer.appendChild(panelBlock01);
				
						return tabContainer;
					}
				
					function createEdgeDetailTab(edge, panelHeadingText) {
						const modifiedHeaderText = panelHeadingText.replace(/\s+/g, "");
				
						// Create the tab-container
						// Create the tab-container
						const tabContainer = document.createElement("div");
						tabContainer.id = `tabContainer-${modifiedHeaderText}`;
						tabContainer.className = "panel-tabContainer";
				
						// Panel Block 01
						// Panel Block 01
						panelBlockContainer = createPanelBlockContainer(tabContainer.id);
						panelBlock01 = panelBlockContainer.panelBlock;
						divPanelBlock01 = panelBlockContainer.divPanelBlock;
				
						const Panel01ColumnsConfig = [
							{
								idSuffix: "LinkName",
								columnLabelTextContent: "Link Name",
								columnLabelClass: "column is-4 p-1",
								columnInputType: "label",
								columnInputContent: edge.data("source") + "---" + edge.data("target"),
							},
						];
				
						createPanelBlockForm(Panel01ColumnsConfig, panelBlock01, divPanelBlock01);
				
						// append divPanelBlock02 --> panelBlock02 --> tabContainer
						// append divPanelBlock02 --> panelBlock02 --> tabContainer
						panelBlock01.append(divPanelBlock01);
						tabContainer.appendChild(panelBlock01);
				
						// Panel Block 02
						// Panel Block 02
						panelBlockContainer = createPanelBlockContainer(tabContainer.id);
						panelBlock02 = panelBlockContainer.panelBlock;
						divPanelBlock02 = panelBlockContainer.divPanelBlock;
				
						var Panel02ColumnsConfig;
				
						if (deploymentType == "colocated") {
							Panel02ColumnsConfig = [
								{
									idSuffix: "Source",
									columnLabelTextContent: "Endpoint",
									columnLabelClass: "column is-4 p-1",
									columnInputType: "label",
									columnInputContent:
										edge.data("source") + "::" + edge.data("sourceEndpoint"),
								},
								{
									idSuffix: "SourceMac",
									columnLabelTextContent: "MAC address",
									columnLabelClass: "column is-4 p-1",
									columnInputType: "label",
									columnInputContent: edge.data("extraData").clabSourceMacAddress,
								},
				
								{
									idSuffix: "labelSourceImpairmentDelay",
									columnLabelTextContent: "Delay (ms)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelSourceImpairmentJitter",
									columnLabelTextContent: "Jitter (ms)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelSourceImpairmentRate",
									columnLabelTextContent: "Rate (kpbs)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelSourceImpairmentLoss",
									columnLabelTextContent: "Loss (%)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelSourceOperations",
									columnLabelTextContent: "Operations",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "buttonGroup",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputContent: "0",
									columnInputAttribute: "enabled",
				
									addonsContent: [
										{
											name: "blue",
											iconClass: "fas fa-play",
											hoverMessage: "Click to START the link impairment.",
											hrefFunction: "linkImpairmentManagerExec",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefFunctionArg: "start-source",
										},
										{
											name: "blue",
											iconClass: "fas fa-stop",
											hoverMessage: "Click to STOP the link impairment.",
											hrefFunction: "linkImpairmentManagerExec",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefFunctionArg: "stop-source",
										},
										{
											name: "green",
											iconClass: "fas fa-ethernet",
											hoverMessage: "Click to cross-launch Wireshark app",
											hrefFunction: "link",
											hrefLink:
												"clab-capture://" +
												edge.data("extraData").clabServerUsername +
												"@" +
												location.host +
												"?" +
												edge.data("extraData").clabSourceLongName +
												"?" +
												edge.data("sourceEndpoint"),
										},
										{
											name: "green",
											iconClass: "far fa-clone",
											hoverMessage: "Click to copy the SSH command to your clipboard.",
											hrefFunction: "copy",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} "sudo -S /sbin/ip netns exec ${edge.data("extraData").clabSourceLongName} tcpdump -U -nni ${edge.data("extraData").clabSourcePort} -w -" | wireshark -k -i -`,
										},
									],
								},
							];
						} else {
							Panel02ColumnsConfig = [
								{
									idSuffix: "Source",
									columnLabelTextContent: "Endpoint",
									columnLabelClass: "column is-4 p-1",
									columnInputType: "label",
									columnInputContent:
										edge.data("source") + "::" + edge.data("sourceEndpoint"),
								},
								{
									idSuffix: "SourceMac",
									columnLabelTextContent: "MAC address",
									columnLabelClass: "column is-4 p-1",
									columnInputType: "label",
									columnInputContent: edge.data("extraData").clabSourceMacAddress,
								},
				
								{
									idSuffix: "labelSourceImpairmentDelay",
									columnLabelTextContent: "Delay (ms)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelSourceImpairmentJitter",
									columnLabelTextContent: "Jitter (ms)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelSourceImpairmentRate",
									columnLabelTextContent: "Rate (kpbs)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelSourceImpairmentLoss",
									columnLabelTextContent: "Loss (%)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelSourceOperations",
									columnLabelTextContent: "Operations",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "buttonGroup",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputContent: "0",
									columnInputAttribute: "enabled",
				
									addonsContent: [
										{
											name: "blue",
											iconClass: "fas fa-play",
											hoverMessage: "Click to START the link impairment.",
											hrefFunction: "linkImpairmentManagerExec",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefFunctionArg: "start-source",
										},
										{
											name: "green",
											iconClass: "far fa-clone",
											hoverMessage:
												"Click to copy the START impairment command to your clipboard",
											hrefFunction: "linkImpairmentCopy",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefFunctionArg: "start-source",
										},
										{
											name: "blue",
											iconClass: "fas fa-stop",
											hoverMessage: "Click to STOP the link impairment.",
											hrefFunction: "linkImpairmentManagerExec",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefFunctionArg: "stop-source",
										},
										{
											name: "green",
											iconClass: "far fa-clone",
											hoverMessage:
												"Click to copy the STOP impairment command to your clipboard",
											hrefFunction: "linkImpairmentCopy",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabSourceLongName} -i ${edge.data("extraData").clabSourcePort}`,
											hrefFunctionArg: "stop-source",
										},
										{
											name: "green",
											iconClass: "fas fa-ethernet",
											hoverMessage: "Click to cross-launch Wireshark app",
											hrefFunction: "link",
											hrefLink:
												"clab-capture://" +
												edge.data("extraData").clabServerUsername +
												"@" +
												location.host +
												"?" +
												edge.data("extraData").clabSourceLongName +
												"?" +
												edge.data("sourceEndpoint"),
										},
										{
											name: "green",
											iconClass: "far fa-clone",
											hoverMessage: "Click to copy the SSH command to your clipboard.",
											hrefFunction: "copy",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} "sudo -S /sbin/ip netns exec ${edge.data("extraData").clabSourceLongName} tcpdump -U -nni ${edge.data("extraData").clabSourcePort} -w -" | wireshark -k -i -`,
										},
									],
								},
							];
						}
				
						createPanelBlockForm(Panel02ColumnsConfig, panelBlock02, divPanelBlock02);
				
						// append divPanelBlock02 --> panelBlock02 --> tabContainer
						// append divPanelBlock02 --> panelBlock02 --> tabContainer
						panelBlock02.append(divPanelBlock02);
						tabContainer.appendChild(panelBlock02);
				
						// Panel Block 03
						// Panel Block 03
						panelBlockContainer = createPanelBlockContainer(tabContainer.id);
						panelBlock03 = panelBlockContainer.panelBlock;
						divPanelBlock03 = panelBlockContainer.divPanelBlock;
				
						var Panel03ColumnsConfig;
				
						if (deploymentType == "colocated") {
							Panel03ColumnsConfig = [
								{
									idSuffix: "Target",
									columnLabelTextContent: "Endpoint",
									columnLabelClass: "column is-4 p-1",
									columnInputType: "label",
									columnInputContent:
										edge.data("target") + "::" + edge.data("targetEndpoint"),
								},
								{
									idSuffix: "TargetMac",
									columnLabelTextContent: "MAC address",
									columnLabelClass: "column is-4 p-1",
									columnInputType: "label",
									columnInputContent: edge.data("extraData").clabTargetMacAddress,
								},
				
								{
									idSuffix: "labelTargetImpairmentDelay",
									columnLabelTextContent: "Delay (ms)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelTargetImpairmentJitter",
									columnLabelTextContent: "Jitter (ms)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelTargetImpairmentRate",
									columnLabelTextContent: "Rate (kpbs)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelTargetImpairmentLoss",
									columnLabelTextContent: "Loss (%)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelTargetOperations",
									columnLabelTextContent: "Operations",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "buttonGroup",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputContent: "0",
									columnInputAttribute: "enabled",
				
									addonsContent: [
										{
											name: "blue",
											iconClass: "fas fa-play",
											hoverMessage: "Click to START the link impairment.",
											hrefFunction: "linkImpairmentManagerExec",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}`,
											hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}`,
											hrefFunctionArg: "start-target",
										},
										{
											name: "blue",
											iconClass: "fas fa-stop",
											hoverMessage: "Click to STOP the link impairment.",
											hrefFunction: "linkImpairmentManagerExec",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}`,
											hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}`,
											hrefFunctionArg: "stop-target",
										},
										{
											name: "green",
											iconClass: "fas fa-ethernet",
											hoverMessage: "Click to cross-launch Wireshark app",
											hrefFunction: "link",
											hrefLink:
												"clab-capture://" +
												edge.data("extraData").clabServerUsername +
												"@" +
												location.host +
												"?" +
												edge.data("extraData").clabTargetLongName +
												"?" +
												edge.data("targetEndpoint"),
										},
										{
											name: "green",
											iconClass: "far fa-clone",
											hoverMessage: "Click to copy the SSH command to your clipboard.",
											hrefFunction: "copy",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} "sudo -S /sbin/ip netns exec ${edge.data("extraData").clabTargetLongName} tcpdump -U -nni ${edge.data("extraData").clabTargetPort} -w -" | wireshark -k -i -`,
										},
									],
								},
							];
						} else {
							Panel03ColumnsConfig = [
								{
									idSuffix: "Target",
									columnLabelTextContent: "Endpoint",
									columnLabelClass: "column is-4 p-1",
									columnInputType: "label",
									columnInputContent:
										edge.data("target") + "::" + edge.data("targetEndpoint"),
								},
								{
									idSuffix: "TargetMac",
									columnLabelTextContent: "MAC address",
									columnLabelClass: "column is-4 p-1",
									columnInputType: "label",
									columnInputContent: edge.data("extraData").clabTargetMacAddress,
								},
				
								{
									idSuffix: "labelTargetImpairmentDelay",
									columnLabelTextContent: "Delay (ms)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelTargetImpairmentJitter",
									columnLabelTextContent: "Jitter (ms)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelTargetImpairmentRate",
									columnLabelTextContent: "Rate (kpbs)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelTargetImpairmentLoss",
									columnLabelTextContent: "Loss (%)",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "input",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputElementClass:
										"input is-size-7 has-text-left has-text-weight-normal is-smallest-element",
									columnInputContent: "0",
									columnInputPlaceholder: "node spacing",
									columnInputAttribute: "enabled",
									addonsContent: [],
								},
								{
									idSuffix: "labelTargetOperations",
									columnLabelTextContent: "Operations",
									columnLabelClass: "column is-4 p-1",
									// columnLabelElementClass: 'label is-size-7 has-text-right has-text-weight-normal px-auto pt-1',
									columnInputType: "buttonGroup",
									columnInputClass: "column is-3 p-1 pl-3",
									columnInputContent: "0",
									columnInputAttribute: "enabled",
				
									addonsContent: [
										{
											name: "blue",
											iconClass: "fas fa-play",
											hoverMessage: "Click to START the link impairment.",
											hrefFunction: "linkImpairmentManagerExec",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}}`,
											hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}}`,
											hrefFunctionArg: "start-target",
										},
										{
											name: "green",
											iconClass: "far fa-clone",
											hoverMessage:
												"Click to copy the START impairment command to your clipboard",
											hrefFunction: "linkImpairmentCopy",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}}`,
											hrefFunctionArg: "start-target",
										},
										{
											name: "blue",
											iconClass: "fas fa-stop",
											hoverMessage: "Click to STOP the link impairment.",
											hrefFunction: "linkImpairmentManagerExec",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}`,
											hrefLink02: `/usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}}`,
											hrefFunctionArg: "stop-target",
										},
										{
											name: "green",
											iconClass: "far fa-clone",
											hoverMessage:
												"Click to copy the STOP impairment command to your clipboard",
											hrefFunction: "linkImpairmentCopy",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} sudo /usr/bin/containerlab tools netem set -n ${edge.data("extraData").clabTargetLongName} -i ${edge.data("extraData").clabTargetPort}`,
											hrefFunctionArg: "stop-target",
										},
										{
											name: "blue",
											iconClass: "fas fa-ethernet",
											hoverMessage: "Click to cross-launch Wireshark app",
											hrefFunction: "link",
											hrefLink:
												"clab-capture://" +
												edge.data("extraData").clabServerUsername +
												"@" +
												location.host +
												"?" +
												edge.data("extraData").clabTargetLongName +
												"?" +
												edge.data("targetEndpoint"),
										},
										{
											name: "green",
											iconClass: "far fa-clone",
											hoverMessage: "Click to copy the SSH command to your clipboard.",
											hrefFunction: "copy",
											hrefLink: `ssh ${edge.data("extraData").clabServerUsername}@${location.hostname} "sudo -S /sbin/ip netns exec ${edge.data("extraData").clabTargetLongName} tcpdump -U -nni ${edge.data("extraData").clabTargetPort} -w -" | wireshark -k -i -`,
										},
									],
								},
							];
						}
				
						createPanelBlockForm(Panel03ColumnsConfig, panelBlock03, divPanelBlock03);
				
						// append divPanelBlock03 --> panelBlock03 --> tabContainer
						// append divPanelBlock03 --> panelBlock03 --> tabContainer
						panelBlock03.appendChild(divPanelBlock03);
						tabContainer.appendChild(panelBlock03);
				
						return tabContainer;
					}
				
					// 
					// END of JS Functions HTML Element Creation section
					// END of JS Functions HTML Element Creation section
					// 
					// 
					// END of JS Functions HTML Element Creation section
					// END of JS Functions HTML Element Creation section
					// 
				
					// 
					// START of JS Functions Event Handling section
					// START of JS Functions Event Handling section
					// 
					// 
					// START of JS Functions Event Handling section
					// START of JS Functions Event Handling section
					// 
				
					function generateNodesEvent(event) {
						// Your event handling logic here
						//- Add a click event listener to the 'Generate' button
						//- Get the number of node from the input field
						// Your event handling logic here
						//- Add a click event listener to the 'Generate' button
						//- Get the number of node from the input field
						console.log("generateNodesButton clicked");
						const numNodes = document.getElementById("generateNodesInput").value;
						console.log(numNodes);
						//- Check if the number of node is empty
						//- Check if the number of node is empty
						if (numNodes === null) {
							//- if node number empty do nothing
							//- if node number empty do nothing
							return;
						}
						const numNodesToGenerate = parseInt(numNodes, 10);
						//- Check if the number of node is positive
						//- Check if the number of node is positive
						if (isNaN(numNodesToGenerate) || numNodesToGenerate <= 0) {
							//- Invalid input
							//- Invalid input
							appendMessage(
								"Error:" + "Bro, you gotta enter a valid positive number, come on!",
							);
							return;
						}
						//- Generate nodes with random positions
						//- Generate nodes with random positions
						for (let i = 0; i < numNodesToGenerate; i++) {
							const nodeName = `node-${i + 1}`;
							const newNode = {
								group: "nodes",
								data: {
									id: nodeName,
									name: nodeName,
								},
								position: {
									x: Math.random() * 400,
									y: Math.random() * 400,
								},
							};
							//-cy.add(newNode);
							//-cy.add(newNode);
							try {
								cy.add(newNode);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "								//- throw new Error('This is an example exception');"}}
							} catch (error) {
{{rawJSComment "								//- Log the exception to the console"}}
								console.error("An exception occurred:", error);
<<<<<<< HEAD
{{rawJSComment "								//- Log the exception to notification message to the textarea "}}
								appendMessage("An exception occurred::" + error);
							}
						}
					}
{{rawJSComment "					//- run layout"}}
					const layout = cy.layout({
						name: 'cola',
						nodeGap: 5,
						edgeLengthVal: 45,
						animate: true,
						randomize: false,
						maxSimulationTime: 1500
					});
					layout.run();
{{rawJSComment "					//-//- Append a notification message to the textarea"}}
					console.log("Info: " + `Boom! Just generated ${numNodesToGenerate} nodes with some random edges. That's how we roll!`);
					appendMessage("Info: " + `Boom! Just generated ${numNodesToGenerate} nodes with some random edges. That's how we roll!`);
				}

				function spawnNodeEvent(event) {
{{rawJSComment "					//- Add a click event listener to the 'Submit' button in the hidden form"}}
{{rawJSComment "					//- Get the node name from the input field "}}
					const nodeName = document.getElementById('nodeName').value;
					console.log(nodeName)
{{rawJSComment "					//- Check if a node name is empty "}}
					if (nodeName == "") {
{{rawJSComment "						//- append message in textArea "}}
						appendMessage('Error: Enter node name.');
						return;
					}
{{rawJSComment "					//- Check if a node with the same name already exists "}}
					if (cy.$(`node[id = "${nodeName}"]`).length > 0) {
{{rawJSComment "						//- append message in textArea "}}
						appendMessage('Error: Node with this name already exists.');
						return;
					}
{{rawJSComment "					//- Create a new node element "}}
					const newNode = {
						group: 'nodes',
						data: {
							id: nodeName,
							name: nodeName,
							label: nodeName
						}
					};
{{rawJSComment "					//- Add the new node to Cytoscape.js "}}
					cy.add(newNode);
{{rawJSComment "					//- Randomize the positions and center the graph "}}
					const layout = cy.layout({
						name: 'cola',
						nodeGap: 5,
						edgeLengthVal: 45,
						animate: true,
						randomize: false,
						maxSimulationTime: 1500
					});
					layout.run();
{{rawJSComment "					//- Append a notification message to the textarea "}}
					console.log("Info: " + `Nice! Node "${nodeName}" added successfully.`);
					appendMessage("Info: " + `Nice! Node "${nodeName}" added successfully.`);
=======
{{rawJSComment "								//- Log the exception to notification message to the textarea"}}
{{rawJSComment "								//- Log the exception to notification message to the textarea"}}
=======
{{rawJSComment "####								//- throw new Error('This is an example exception');"}}
{{rawJSComment "####								//- throw new Error('This is an example exception');"}}
=======
{{rawJSComment "								//- throw new Error('This is an example exception');"}}
{{rawJSComment "								//- throw new Error('This is an example exception');"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
								//- throw new Error('This is an example exception');
								//- throw new Error('This is an example exception');
>>>>>>> 4b6d4438 (refactore - panels)
							} catch (error) {
								//- Log the exception to the console
								//- Log the exception to the console
								console.error("An exception occurred:", error);
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "####								//- Log the exception to notification message to the textarea"}}
{{rawJSComment "####								//- Log the exception to notification message to the textarea"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "								//- Log the exception to notification message to the textarea"}}
{{rawJSComment "								//- Log the exception to notification message to the textarea"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
								//- Log the exception to notification message to the textarea
								//- Log the exception to notification message to the textarea
>>>>>>> 4b6d4438 (refactore - panels)
								appendMessage("An exception occurred:" + error);
							}
						}
						//- Generate random edges between nodes
						//- Generate random edges between nodes
						for (let i = 0; i < numNodesToGenerate; i++) {
							const sourceNode = `node-${i + 1}`;
							const targetNode = `node-${Math.floor(Math.random() * numNodesToGenerate) + 1}`;
							if (sourceNode !== targetNode) {
								const newEdge = {
									group: "edges",
									data: {
										id: "from-" + sourceNode + "-to-" + targetNode,
										name: "from-" + sourceNode + "-to-" + targetNode,
										source: sourceNode,
										target: targetNode,
									},
								};
								try {
									cy.add(newEdge);
									//- throw new Error('This is an example exception');
									//- throw new Error('This is an example exception');
								} catch (error) {
									//- Log the exception to the console
									//- Log the exception to the console
									console.error("An exception occurred:", error);
									//- Log the exception to notification message to the textarea
									//- Log the exception to notification message to the textarea
									appendMessage("An exception occurred::" + error);
								}
							}
						}
						//- run layout
						//- run layout
						const layout = cy.layout({
							name: "cola",
							nodeGap: 5,
							edgeLengthVal: 45,
							animate: true,
							randomize: false,
							maxSimulationTime: 1500,
						});
						layout.run();
						//-//- Append a notification message to the textarea
						//-//- Append a notification message to the textarea
						console.log(
							"Info: " +
								`Boom! Just generated ${numNodesToGenerate} nodes with some random edges. That's how we roll!`,
						);
						appendMessage(
							"Info: " +
								`Boom! Just generated ${numNodesToGenerate} nodes with some random edges. That's how we roll!`,
						);
					}
				
					function spawnNodeEvent(event) {
						//- Add a click event listener to the 'Submit' button in the hidden form
						//- Get the node name from the input field
						//- Add a click event listener to the 'Submit' button in the hidden form
						//- Get the node name from the input field
						const nodeName = document.getElementById("nodeName").value;
						console.log(nodeName);
						//- Check if a node name is empty
						//- Check if a node name is empty
						if (nodeName == "") {
							//- append message in textArea
							//- append message in textArea
							appendMessage("Error: Enter node name.");
							return;
						}
						//- Check if a node with the same name already exists
						//- Check if a node with the same name already exists
						if (cy.$(`node[id = "${nodeName}"]`).length > 0) {
							//- append message in textArea
							//- append message in textArea
							appendMessage("Error: Node with this name already exists.");
							return;
						}
						//- Create a new node element
						//- Create a new node element
						const newNode = {
							group: "nodes",
							data: {
								id: nodeName,
								name: nodeName,
								label: nodeName,
							},
						};
						//- Add the new node to Cytoscape.js
						//- Add the new node to Cytoscape.js
						cy.add(newNode);
						//- Randomize the positions and center the graph
						//- Randomize the positions and center the graph
						const layout = cy.layout({
							name: "cola",
							nodeGap: 5,
							edgeLengthVal: 45,
							animate: true,
							randomize: false,
							maxSimulationTime: 1500,
						});
						layout.run();
						//- Append a notification message to the textarea
						//- Append a notification message to the textarea
						console.log("Info: " + `Nice! Node "${nodeName}" added successfully.`);
						appendMessage("Info: " + `Nice! Node "${nodeName}" added successfully.`);
					}
				
					function nodeFindEvent(event) {
						//- Get a reference to your Cytoscape instance (assuming it's named 'cy')
						//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance
						//- Find the node with the specified name
						//- Get a reference to your Cytoscape instance (assuming it's named 'cy')
						//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance
						//- Find the node with the specified name
						const nodeName = document.getElementById("nodeFindInput").value;
						const node = cy.$(`node[name = "${nodeName}"]`);
						//- Check if the node exists
						//- Check if the node exists
						if (node.length > 0) {
							// console
							// console
							console.log("Info: " + 'Sweet! Node "' + nodeName + '" is in the house.');
							appendMessage("Info: " + 'Sweet! Node "' + nodeName + '" is in the house.');
							//- Apply a highlight style to the node
							//- Apply a highlight style to the node
							node.style({
								"border-color": "red",
								"border-width": "2px",
								"background-color": "yellow",
							});
							//- Zoom out on the node
							//- Zoom out on the node
							cy.fit();
							//- Zoom in on the node
							//- Zoom in on the node
							cy.animate({
								zoom: {
									level: 5,
									position: {
										x: node.position("x"),
										y: node.position("y"),
									},
									renderedPosition: {
										x: node.renderedPosition("x"),
										y: node.renderedPosition("y"),
									},
								},
								duration: 1500,
							});
						} else {
							console.error(
								`Bro, I couldn't find a node named "${nodeName}". Try another one.`,
							);
							appendMessage(
								`Bro, I couldn't find a node named "${nodeName}". Try another one.`,
							);
						}
					}
				
					function zoomToFitDrawer() {
						const initialZoom = cy.zoom();
						appendMessage(`Bro, initial zoom level is "${initialZoom}".`);
						//- Fit all nodes possible with padding
						//- Fit all nodes possible with padding
						cy.fit();
						const currentZoom = cy.zoom();
						appendMessage(`And now the zoom level is "${currentZoom}".`);
					}
				
					function pathFinderDijkstraEvent(event) {
						// Usage example:
						// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs
						//- Function to get the default node style from cy-style.json
						//- weight: (edge) => 1, // You can adjust the weight function if needed
						//- weight: (edge) => edge.data('distance')
						// Usage example:
						// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs
						//- Function to get the default node style from cy-style.json
						//- weight: (edge) => 1, // You can adjust the weight function if needed
						//- weight: (edge) => edge.data('distance')
				
						console.log("im triggered");
				
						// Remove existing highlight from all edges
						// Remove existing highlight from all edges
						cy.edges().forEach((edge) => {
							edge.removeClass("spf");
						});
				
						// Get the node sourceNodeId from pathFinderSourceNodeInput and targetNodeId from pathFinderTargetNodeInput
						// Get the node sourceNodeId from pathFinderSourceNodeInput and targetNodeId from pathFinderTargetNodeInput
						const sourceNodeId = document.getElementById(
							"pathFinderSourceNodeInput",
						).value;
						const targetNodeId = document.getElementById(
							"pathFinderTargetNodeInput",
						).value;
				
						// Assuming you have 'cy' as your Cytoscape instance
						// Assuming you have 'cy' as your Cytoscape instance
						const sourceNode = cy.$(`node[id="${sourceNodeId}"]`);
						const targetNode = cy.$(`node[id="${targetNodeId}"]`);
				
						console.log(
							"Info: " +
								"Let's find the path from-" +
								sourceNodeId +
								"-to-" +
								targetNodeId +
								"!",
						);
						appendMessage(
							"Info: " +
								"Let's find the path from-" +
								sourceNodeId +
								"-to-" +
								targetNodeId +
								"!",
						);
				
						// Check if both nodes exist
						// Check if both nodes exist
						if (sourceNode.length === 0 || targetNode.length === 0) {
							console.error(
								`Bro, couldn't find the source or target node you specified. Double-check the node names.`,
							);
							appendMessage(
								`Bro, couldn't find the source or target node you specified. Double-check the node names.`,
							);
							return;
						}
				
						// Get the Dijkstra result with the shortest path
						// Get the Dijkstra result with the shortest path
						const dijkstraResult = cy.elements().dijkstra({
							root: sourceNode,
							weight: (edge) => 1,
							// Use the custom weight attribute
							// weight: edge => edge.data('customWeight'),
							// Use the custom weight attribute
							// weight: edge => edge.data('customWeight'),
						});
						// Get the shortest path from Dijkstra result
						// Get the shortest path from Dijkstra result
						const shortestPathEdges = dijkstraResult.pathTo(targetNode);
						console.log(shortestPathEdges);
				
						// Check if there is a valid path (shortestPathEdges is not empty)
						// Check if there is a valid path (shortestPathEdges is not empty)
						if (shortestPathEdges.length > 1) {
							//// Apply a style to highlight the shortest path edges
							// shortestPathEdges.style({
							//	'line-color': 'red',
							//	'line-style': 'solid',
							// });
							//// Apply a style to highlight the shortest path edges
							// shortestPathEdges.style({
							//	'line-color': 'red',
							//	'line-style': 'solid',
							// });
				
							// Highlight the shortest path
							// Highlight the shortest path
							shortestPathEdges.forEach((edge) => {
								edge.addClass("spf");
							});
				
							//- Zoom out on the node
							//- Zoom out on the node
							cy.fit();
				
							//- Zoom in on the node
							//- Zoom in on the node
							cy.animate({
								zoom: {
									level: 5,
									position: {
										x: sourceNode.position("x"),
										y: sourceNode.position("y"),
									},
									renderedPosition: {
										x: sourceNode.renderedPosition("x"),
										y: sourceNode.renderedPosition("y"),
									},
								},
								duration: 1500,
							});
							// throw log
							// throw log
							console.log(
								"Info: " +
									"Yo, check it out! Shorthest Path from-" +
									sourceNodeId +
									"-to-" +
									targetNodeId +
									" has been found.",
							);
							appendMessage(
								"Info: " +
									"Yo, check it out! Shorthest Path from-" +
									sourceNodeId +
									"-to-" +
									targetNodeId +
									" has been found, below is the path trace..",
							);
							console.log(shortestPathEdges);
				
							shortestPathEdges.forEach((edge) => {
								console.log("Edge ID:", edge.id());
								console.log("Source Node ID:", edge.source().id());
								console.log("Target Node ID:", edge.target().id());
				
								edgeId = edge.id();
								sourceNodeId = edge.source().id();
								targetNodeId = edge.target().id();
								// You can access other properties of the edge, e.g., source, target, data, etc.
								// You can access other properties of the edge, e.g., source, target, data, etc.
				
								appendMessage("Info: " + "Edge ID: " + edgeId);
								appendMessage("Info: " + "Source Node ID: " + sourceNodeId);
								appendMessage("Info: " + "Target Node ID: " + targetNodeId);
							});
						} else {
							console.error(
								`Bro, there is no path from "${sourceNodeId}" to "${targetNodeId}".`,
							);
							appendMessage(
								`Bro, there is no path from "${sourceNodeId}" to "${targetNodeId}".`,
							);
							return;
						}
					}
				
					function closePanel01Event(event) {
						var panel = document.getElementById("Panel-01");
						if (panel.style.display === "none" || panel.style.display === "") {
							//- Show the panel
							//- Show the panel
							panel.style.display = "block";
							panel.classList.toggle("active");
						} else {
							//- Hide the panel
							//- Hide the panel
							panel.style.display = "none";
						}
						isPanel01Added = false;
						console.log(
							"Panel-01.style: " + document.getElementById("Panel-01").style.display,
						);
					}
				
					var linkEndpointVisibility = true;
				
					function toggleLinkEndpoint() {
						if (linkEndpointVisibility) {
							cy.edges().forEach(function (edge) {
								edge.style("source-label", ".");
								edge.style("target-label", ".");
								linkEndpointVisibility = false;
							});
						} else {
							cy.edges().forEach(function (edge) {
								edge.style("source-label", edge.data("sourceEndpoint"));
								edge.style("target-label", edge.data("targetEndpoint"));
								linkEndpointVisibility = true;
							});
						}
					}
				
					var nodeContainerStatusVisibility = false;
				
					function toggleContainerStatusVisibility() {
						if (nodeContainerStatusVisibility) {
							nodeContainerStatusVisibility = false;
							console.log(
								"nodeContainerStatusVisibility: " + nodeContainerStatusVisibility,
							);
							appendMessage(
								"nodeContainerStatusVisibility: " + nodeContainerStatusVisibility,
							);
							bulmaToast.toast({
								message: `Alright, mission control, we're standing down. 🛑🔍 Container status probing aborted. Stay chill, folks. 😎👨‍💻`,
								type: "is-warning is-size-6 p-3",
								duration: 4000,
								position: "top-center",
								closeOnClick: true,
							});
						} else {
							nodeContainerStatusVisibility = true;
							console.log(
								"nodeContainerStatusVisibility: " + nodeContainerStatusVisibility,
							);
							appendMessage(
								"nodeContainerStatusVisibility: " + nodeContainerStatusVisibility,
							);
							bulmaToast.toast({
								message: `🕵️‍♂️ Bro, we're currently on a mission to probe that container status! Stay tuned for the results. 🔍🚀👨‍💻`,
								type: "is-warning is-size-6 p-3",
								duration: 4000,
								position: "top-center",
								closeOnClick: true,
							});
						}
					}
				
					function setNodeContainerStatus(containerNodeName, containerNodeStatus) {
						cy.nodes().forEach(function (node) {
							var nodeId = node.data("id");
				
							// Find the corresponding status nodes based on node ID
							// Find the corresponding status nodes based on node ID
							var statusGreenNode = cy.$(`node[name="${nodeId}-statusGreen"]`);
							var statusOrangeNode = cy.$(`node[name="${nodeId}-statusOrange"]`);
							var statusRedNode = cy.$(`node[name="${nodeId}-statusRed"]`);
				
							if (statusGreenNode.length === 0 || statusRedNode.length === 0) {
								// If status nodes are not found, skip this node
								// If status nodes are not found, skip this node
								return;
							}
				
							// Update positions of status nodes relative to the node
							// Update positions of status nodes relative to the node
							var nodePosition = node.position();
							var offset = { x: -4, y: -10 };
							var statusGreenNodePosition = {
								x: nodePosition.x + offset.x,
								y: nodePosition.y + offset.y,
							};
							var statusRedNodePosition = {
								x: nodePosition.x + offset.x,
								y: nodePosition.y + offset.y,
							};
				
							// Check if the nodeContainerStatusVisibility is true
							// Check if the nodeContainerStatusVisibility is true
							if (nodeContainerStatusVisibility) {
								// Check if the containerNodeName includes nodeId and containerNodeStatus includes 'healthy'
								// Check if the containerNodeName includes nodeId and containerNodeStatus includes 'healthy'
								if (
									containerNodeName.includes(nodeId) &&
									(containerNodeStatus.includes("Up") ||
										containerNodeStatus.includes("healthy"))
								) {
									statusGreenNode.show();
									statusRedNode.hide();
									console.log(
										"nodeContainerStatusVisibility: " + nodeContainerStatusVisibility,
									);
								} else if (
									containerNodeName.includes(nodeId) &&
									containerNodeStatus.includes("(health: starting)")
								) {
									statusGreenNode.hide();
									statusOrangeNode.show();
								} else if (
									containerNodeName.includes(nodeId) &&
									containerNodeStatus.includes("Exited")
								) {
									statusGreenNode.hide();
									statusRedNode.show();
								}
							} else {
								statusGreenNode.hide();
								statusRedNode.hide();
							}
				
							statusGreenNode.position(statusGreenNodePosition);
							statusRedNode.position(statusRedNodePosition);
						});
					}
				
					function setNodeDataWithContainerAttribute(containerNodeName, status, state) {
						cy.nodes().forEach(function (node) {
							var nodeId = node.data("id");
							if (containerNodeName.includes(nodeId)) {
								var containerDockerExtraAttributeData = {
									state: state,
									status: status,
								};
				
								node.data(
									"containerDockerExtraAttribute",
									containerDockerExtraAttributeData,
								);
							}
						});
					}
				
					// 
					// End of JS Functions Event Handling section
					// End of JS Functions Event Handling section
					// 
				
					// 
					// Start of JS Generic Functions
					// Start of JS Generic Functions
					// 
					// 
					// Start of JS Generic Functions
					// Start of JS Generic Functions
					// 
				
					//- Helper Function for managed Panel-01 tabs
					//- Helper Function for managed Panel-01 tabs
					function showPanel01Tab(tabId) {
						hideAllTabs();
						document.getElementById(tabId).style.display = "block";
					}
				
					//- Function to get the default node style from cy-style.json
					//- Function to get the default node style from cy-style.json
					async function getDefaultNodeStyle(node) {
						try {
							//- Fetch the cy-style.json file
							//- Fetch the cy-style.json file
							const response = await fetch("cy-style.json");
							//- Check if the response is successful (status code 200)
							//- Check if the response is successful (status code 200)
							if (!response.ok) {
								throw new Error(
									`Failed to fetch cy-style.json (${response.status} ${response.statusText})`,
								);
							}
							//- Parse the JSON response
							//- Parse the JSON response
							const styleData = await response.json();
							//- Extract the default node style from the loaded JSON
							//- Adjust this based on your JSON structure
							//- Extract the default node style from the loaded JSON
							//- Adjust this based on your JSON structure
							const defaultNodeStyle = styleData[0].style;
							return defaultNodeStyle;
						} catch (error) {
							console.error("Error loading cy-style.json:", error);
							appendMessage(`Error loading cy-style.json: ${error}`);
							//- Return a default style in case of an error
							//- Return a default style in case of an error
							return {
								"background-color": "blue",
								"border-color": "gray",
								"border-width": "1px",
							};
						}
					}
				
					///-logMessagesPanel Function to add a click event listener to the copy button
					///-logMessagesPanel Function to add a click event listener to the copy button
					const copyButton = document.getElementById("copyToClipboardButton");
					copyButton.className = "button is-smallest-element";
					copyButton.addEventListener("click", copyToClipboard);
				
					/// logMessagesPanel Function to copy textarea content to clipboard
					/// logMessagesPanel Function to copy textarea content to clipboard
					function copyToClipboard() {
						const textarea = document.getElementById("notificationTextarea");
						textarea.select();
						document.execCommand("copy");
					}
				
					///-logMessagesPanel Function to add a click event listener to the close button
					///-logMessagesPanel Function to add a click event listener to the close button
					const panel02CloseButton = document.getElementById("panel02CloseButton");
					panel02CloseButton.className = "button is-smallest-element";
				
					panel02CloseButton.addEventListener("click", () => {
						panelId = document.getElementById("Panel-02");
						closePanelEvent(event, panelId);
					});
				
					function closePanelEvent(event, panel) {
						panel.style.display = "block";
						console.log(panel.style.display);
						panel.style.display = "none";
					}
				
					function createModal(modalId, modalContent) {
						// Create the modal
						// Create the modal
						const htmlContent = `
															<div id="${modalId}" class="modal">
																<div id="${modalId}-modalBackgroundId" class="modal-background"></div>
																	${modalContent}
															</div>
															`;
				
						const modalDiv = document.createElement("div");
						modalDiv.innerHTML = htmlContent;
						modalDiv.id = "modalDivExportViewport";
				
						document.body.appendChild(modalDiv);
						const modalBackground = document.getElementById(
							`${modalId}-modalBackgroundId`,
						);
				
						modalBackground.addEventListener("click", function () {
							const modal = modalBackground.parentNode;
							modal.classList.remove("is-active");
						});
					}
				
					function showModalCaptureViewport(modalId) {
						const modalContentSaveViewport = ` 	
																	<div class="modal-content" style="max-width:300px;">
																		<div class="box px-1 pb-1">
																			<div class="column is-flex is-justify-content-center ">
																					<i class="icon fas fa-camera  is-large"></i>
																			</div>
																			<div class="column">
																				<div class="content py-0 px-5">
																					<p class="has-text-centered is-size-6 has-text-weight-bold py-0 mb-2">Select file type</p>
																					<p class="has-text-centered is-size-7 has-text-weight-normal">Choose one or multiple types you want to export</p>
																				</div>
																			</div>
																			<div class="column px-5">
																				<div class="control is-flex is-flex-direction-column">
																					<div class="column py-2">
																						<label class="checkbox is-size-7">
																						<input type="checkbox"  name="checkboxSaveViewPort" value="option01">
																						PNG
																						</label>
																					</div>
																					<div class="column py-2">
																						<label class="checkbox is-size-7">
																						<input type="checkbox" name="checkboxSaveViewPort" value="option02">
																						Draw.IO
																						</label>
																					</div>
																				</div>
																			</div>
																			<div class="column p-0 pb-3 is-flex is-flex-direction-column is-flex-grow-3" >
																				<div class="column" style="background-color: white">
																					<button id="performActionButton" class="button button-modal is-small is-link is-fullwidth">Continue</button>
																				</div>
																			</div>
																		</div>
																	</div>
																	`;
				
						// Instantiate modal
						// Instantiate modal
						createModal("modalSaveViewport", modalContentSaveViewport);
				
						// create event listener
						// create event listener
						const performActionButton = document.getElementById("performActionButton");
						performActionButton.addEventListener("click", function () {
							const checkboxName = "checkboxSaveViewPort";
							const checkboxes = document.querySelectorAll(
								`input[type="checkbox"][name="${checkboxName}"]`,
							);
							const selectedOptions = [];
				
							checkboxes.forEach(function (checkbox) {
								if (checkbox.checked) {
									selectedOptions.push(checkbox.value);
								}
							});
				
							if (selectedOptions.length === 0) {
								bulmaToast.toast({
									message: `Hey there, please pick at least one option.😊👌`,
									type: "is-warning is-size-6 p-3",
									duration: 4000,
									position: "top-center",
									closeOnClick: true,
								});
							} else {
								// Perform your action based on the selected options
								// Perform your action based on the selected options
								if (selectedOptions.join(", ") == "option01") {
									captureAndSaveViewportAsPng(cy);
									modal.classList.remove("is-active");
								} else if (selectedOptions.join(", ") == "option02") {
									captureAndSaveViewportAsDrawIo(cy);
									modal.classList.remove("is-active");
								} else if (selectedOptions.join(", ") == "option01, option02") {
									captureAndSaveViewportAsPng(cy);
									sleep(5000);
									captureAndSaveViewportAsDrawIo(cy);
									modal.classList.remove("is-active");
								}
							}
						});
				
						// show modal
						// show modal
						modal = document.getElementById(modalId);
						modal.classList.add("is-active");
					}
				
					// 
					// End of JS Generic Functions section
					// End of JS Generic Functions section
					// 
					// 
					// End of JS Generic Functions section
					// End of JS Generic Functions section
					// 
				});
				
				// aarafat-tag:
				//// reworked the Log Message panel to be dynamicaly created
				//// create about panel
				//// create clab client download panel
				// aarafat-tag:
				//// reworked the Log Message panel to be dynamicaly created
				//// create about panel
				//// create clab client download panel

				async function sshWebBased(event) {
					console.log ("sshWebBased: ", globalSelectedNode)

					var routerName = globalSelectedNode

					try {
						environments = await getEnvironments(event);
						console.log("sshWebBased - environments: ", environments)
			
						cytoTopologyJson = environments["EnvCyTopoJsonBytes"]
						routerData = findCytoElementByLongname(cytoTopologyJson, routerName)
			
						console.log ("sshWebBased: ", `${globalShellUrl}?RouterID=${routerData["data"]["extraData"]["mgmtIpv4Addresss"]}?RouterName=${routerName}`)

						window.open(`${globalShellUrl}?RouterID=${routerData["data"]["extraData"]["mgmtIpv4Addresss"]}?RouterName=${routerName}`);

					} catch (error) {
						console.error('Error executing restore configuration:', error);
					}
				}


				async function sshCliCommandCopy(event) {
					console.log ("sshWebBased: ", globalSelectedNode)

					var routerName = globalSelectedNode

					try {
						environments = await getEnvironments(event);
						console.log("sshWebBased - environments: ", environments)
			
						cytoTopologyJson = environments["EnvCyTopoJsonBytes"]
						routerData = findCytoElementByLongname(cytoTopologyJson, routerName)
			
						console.log ("sshWebBased: ", `${globalShellUrl}?RouterID=${routerData["data"]["extraData"]["mgmtIpv4Addresss"]}?RouterName=${routerName}`)
						console.log ("sshWebBased: ", ` ssh -t ${routerData["data"]["extraData"]["clabServerUsername"]}@${routerData["data"]["extraData"]["mgmtIpv4Addresss"]} "ssh admin@${routerName}"`)


						// "ssh -t aarafat@149.204.21.68 "ssh admin@clab-nokia-ServiceProvider-R09-PE-ASBR"

					} catch (error) {
						console.error('Error executing restore configuration:', error);
					}
				}

				function logMessages(event) {
					removeElementById("Panel-03");
					panel = document.getElementById("Panel-02");
					showPanelEvent(event, panel);
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
				}
				
				function getAllNodeEndpoint(event) {
					console.log ("getAllNodeEndpoint Function called")
					arg01 = "arg01"
					arg02 = "arg02"
					arg03 = "arg03"
				
					getAllNodeEndpointDetailExec(arg01, arg02, arg03)
					
				}
				
				function showPanelEvent(event, panel) {
					panel.style.display = "none";
					console.log(panel.style.display);
					panel.style.display = "block";
				}
				
				// Function to remove an element by its id
				// Function to remove an element by its id
				function removeElementById(id) {
					const elementToRemove = document.getElementById(id);
					console.log(elementToRemove);
					if (elementToRemove) {
						elementToRemove.remove();
					}
				}
				
				// Call createContentPanel with the panel ID and an array of tab content functions
				// The Tab name will be auto generate by the tabFunction names, ie: funtion name: createNetworkExplorerTab --> tab name: NetworkExplorer
				// Call createContentPanel with the panel ID and an array of tab content functions
				// The Tab name will be auto generate by the tabFunction names, ie: funtion name: createNetworkExplorerTab --> tab name: NetworkExplorer
				function createContentPanel(
					panelId,
					tabContentFns,
					tabContentFnsArg,
					panelHeadingText,
				) {
					appendMessage(`"createContentPanel reach:`);
				
					const tabNames = tabContentFns.map((fn) => fn.name);
				
					const panel = document.createElement("div");
					panel.className = "panel is-link";
					panel.id = panelId;
					panel.style.display = "block";
				
					const panelHeading = document.createElement("p");
					panelHeading.className = "panel-heading is-size-7";
					panelHeading.textContent = panelHeadingText;
				
					const panelTabs = document.createElement("p");
					panelTabs.className = "panel-tabs";
				
					const tabContainers = [];
				
					// Check if the tabContentFns have more than 1 element
					// Check if the tabContentFns have more than 1 element
					if (tabContentFns.length != 1) {
						for (let i = 0; i < tabNames.length; i++) {
							const name = tabNames[i];
							const tab = document.createElement("a");
							tab.className = "toggle-Panel01-tab is-smallish has-text-weight-medium";
							tab.setAttribute("data-target", `${panelId}-Tab-${name}-Container`);
							tab.id = `${panelId}-Tab-${name}-Button`;
							tab.textContent = name.replace(/^create|Tab$/g, "");
				
							panelTabs.appendChild(tab);
				
							const tabContainer = document.createElement("div");
							tabContainer.className = "panel-tabContainer";
							tabContainer.id = `${panelId}-Tab-${name}-Container`;
				
							tabContainers.push(tabContainer);
				
							// Generate tab content using the provided function from tabContentFns
							// Generate tab content using the provided function from tabContentFns
							if (tabContentFns[i] && typeof tabContentFns[i] === "function") {
								const tabContent = tabContentFns[i]();
								tabContainer.appendChild(tabContent);
							}
							panel.appendChild(panelHeading);
							panel.appendChild(panelTabs);
						}
					} else {
						const tabContainer = document.createElement("div");
						tabContainer.className = "panel-tabContainer";
						tabContainer.id = `${panelId}-Tab-${name}-Container`;
						tabContainers.push(tabContainer);
				
						// Generate tab content using the provided function from tabContentFns
						// Generate tab content using the provided function from tabContentFns
						if (tabContentFns[0] && typeof tabContentFns[0] === "function") {
							const tabContent = tabContentFns[0](tabContentFnsArg, panelHeadingText);
							console.log("tabContentFnsArg");
				
							console.log(tabContentFnsArg);
							panel.appendChild(panelHeading);
							panel.appendChild(tabContent);
						}
					}
				
					// Check if the tabContentFns have more than 1 element
					// Check if the tabContentFns have more than 1 element
					if (tabContentFns.length != 1) {
						// initial hide all tab and only opent the first tab
						// initial hide all tab and only opent the first tab
						for (const tabContainer of tabContainers) {
							tabContainer.style.display = "none";
							panel.appendChild(tabContainer);
						}
						tabContainers[0].style.display = "block";
					}
				
					document.body.appendChild(panel);
				
					const toggleButtons = document.querySelectorAll(".toggle-Panel01-tab");
				
					toggleButtons.forEach((tab) => {
						tab.addEventListener("click", () => {
							const targetTabId = tab.getAttribute("data-target");
							const selectedTabContainer = document.getElementById(targetTabId);
				
							// Hide all tab containers
							// Hide all tab containers
							tabContainers.forEach((container) => {
								container.style.display = "none";
							});
				
							// Show the selected tab container
							// Show the selected tab container
							selectedTabContainer.style.display = "block";
				
							console.log(`Panel-${targetTabId} is displayed.`);
							appendMessage(`Panel-${targetTabId} is displayed.`);
						});
					});
				}
				
				// logMessagesPanel manager
				///-logMessagesPanel Function to append message function
				// logMessagesPanel manager
				///-logMessagesPanel Function to append message function
				function appendMessage(message) {
					// const textarea = document.getElementById('notificationTextarea');
					// const textarea = document.getElementById('notificationTextarea');
					const textarea = document.getElementById("notificationTextarea");
				
					// Get the current date and time
					// Get the current date and time
					const timestamp = new Date().toLocaleString();
				
					textarea.value += `[${timestamp}] ${message}\n`;
					textarea.scrollTop = textarea.scrollHeight;
				}
				
				function createPanelBlockContainer(tabContainerId) {
					// this is helper function to create PanelBlock-Container
					// this is helper function to create PanelBlock-Container
					const panelBlock = document.createElement("div");
					panelBlock.id = `panelBlock-${tabContainerId}`;
					panelBlock.className = "panel-block py-2";
				
					const divPanelBlock = document.createElement("div");
					divPanelBlock.id = `${panelBlock.id}-divPanelBlock`;
					divPanelBlock.className = "column p-0";
				
					return {
						panelBlock: panelBlock,
						divPanelBlock: divPanelBlock,
					};
				}
				
				function createPanelBlockForm(
					PanelColumnsConfig,
					panelBlock,
					divPanelBlock,
					cy,
				) {
					// This is helper function to create PanelBlock-Form-Content
					// Usage:
					// // Panel Block 01
					// // Start of mandatory panelContent containercontainer
					// const panelBlock01 = document.createElement('div');
					// panelBlock01.id = `panelBlock01-${modifiedHeaderText}`
					// panelBlock01.className = 'panel-block p-0';
					// This is helper function to create PanelBlock-Form-Content
					// Usage:
					// // Panel Block 01
					// // Start of mandatory panelContent containercontainer
					// const panelBlock01 = document.createElement('div');
					// panelBlock01.id = `panelBlock01-${modifiedHeaderText}`
					// panelBlock01.className = 'panel-block p-0';
				
					// const divPanelBlock01 = document.createElement('div');
					// divPanelBlock01.id = `${panelBlock01.id}-divPanelBlock01-`
					// divPanelBlock01.className = 'column ';
					// // End of mandatory panelContent containercontainer
					// const divPanelBlock01 = document.createElement('div');
					// divPanelBlock01.id = `${panelBlock01.id}-divPanelBlock01-`
					// divPanelBlock01.className = 'column ';
					// // End of mandatory panelContent containercontainer
				
					// const Panel01ColumnsConfig = [
					// 	{ idSuffix: 'labelNodeName', columnLabelTextContent: 'Node Name', columnLabelClass: 'column is-4 p-1', columnInputType: 'field', columnInputContent: node.data('name'),
					// 		addonsContent: [
					// 		{
					// 			name: 'blue',
					// 			iconClass: 'fas fa-terminal'
					// 		},
					// 		{
					// 			name: 'green',
					// 			iconClass: 'fas fa-copy'
					// 		}]},
					// 	{ idSuffix: 'labelKind', columnLabelTextContent: 'Kind', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').kind },
					// 	{ idSuffix: 'labelImage', columnLabelTextContent: 'Image', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').image },
					// 	{ idSuffix: 'labelManagementIPv4', columnLabelTextContent: 'Management IPv4', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').mgmtIpv4Addresss },
					// 	{ idSuffix: 'labelManagement IPv6', columnLabelTextContent: 'Management IPv6', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').mgmtIpv6Addresss },
					// 	{ idSuffix: 'labelFqdn', columnLabelTextContent: 'FQDN', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').fqdn },
					// 	{ idSuffix: 'labelGroup', columnLabelTextContent: 'Group', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').group },
					// 	{ idSuffix: 'labeltopoViewerRole', columnLabelTextContent: 'Topoviewer Role', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('topoViewerRole') },
					//  { idSuffix: 'labelFindRouteSource', columnLabelTextContent: '', columnLabelClass: 'column is-0 p-0', columnInputType: 'field', columnInputContent: '', columnInputPlaceholder: 'name', columnInputAttribute: 'enabled', columnInputIsInvisible: 'yes',
					//  	addonsContent: []
					//  }
					//  { idSuffix: 'labellinkImpairmentManagerExec', columnLabelTextContent: 'Link Impairment', columnLabelClass: 'column is-4 p-1', columnInputType: 'field', columnInputContent: 'Apply', columntInputAttribute: 'enabled', // columntInputAttribute default is disabled
					//  addonsContent: [
					//  	{
					//  		name: 'blue',
					//  		iconClass: 'fas fa-terminal'
					//  	},
					//  	{
					//  		name: 'green',
					//  		iconClass: 'fas fa-copy'
					//  	}]},
					//  ];
					// ];
				
					PanelColumnsConfig.forEach((config) => {
						// Create columnContainer
						// Create columnContainer
						const columnContainer = document.createElement("div");
						columnContainer.id = `${divPanelBlock.id}-columnContainer${config.idSuffix}`;
						columnContainer.className = "column my-auto is-11 pr-1";
				
						// Create panelContent
						// Create panelContent
						const panelContent = document.createElement("div");
						panelContent.id = `${columnContainer.id}-panelContent${config.idSuffix}`;
						panelContent.className = "panel-content";
				
						// Create columnsPanelContent container
						// Create columnsPanelContent container
						const columnsPanelContent = document.createElement("div");
						columnsPanelContent.className = "columns py-auto";
						columnsPanelContent.id = `${panelContent.id}-columnsPanelContent${config.idSuffix}`;
				
						// Create labelColumn column
						// Create labelColumn column
						const labelColumn = document.createElement("div");
						labelColumn.id = `${columnsPanelContent.id}-labelColumn${config.idSuffix}`;
						labelColumn.className = `${config.columnLabelClass}`;
				
						const labelElement = document.createElement("label");
						if (
							typeof config.columnLabelElementClass !== "undefined" &&
							config.columnLabelElementClass !== null &&
							config.columnLabelElementClass !== ""
						) {
							labelElement.className = config.columnLabelElementClass;
						} else {
							labelElement.className =
								"label is-size-7 has-text-right has-text-weight-medium px-auto";
						}
				
						labelElement.textContent = config.columnLabelTextContent;
						labelElement.id = `${labelColumn.id}-labelElement${config.idSuffix}`;
				
						labelColumn.appendChild(labelElement);
						columnsPanelContent.appendChild(labelColumn);
				
						// Create inputColumn column
						// Create inputColumn column
						if (config.columnInputType == "label") {
							const inputColumn = document.createElement("div");
							inputColumn.className = `column is-8 p-1 pl-3`;
							inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`;
				
							const inputElement = document.createElement("label");
							inputElement.className = `label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content`;
							inputElement.id = `${inputColumn.id}-label${config.idSuffix}`;
							inputElement.textContent = config.columnInputContent;
				
							inputColumn.appendChild(inputElement);
							columnsPanelContent.appendChild(inputColumn);
						} 
						else if (config.columnInputType == "button") {
							const inputColumn = document.createElement("div");
							if (
								typeof config.columnInputClass !== "undefined" &&
								config.columnInputClass !== null &&
								config.columnInputClass !== ""
							) {
								inputColumn.className = config.columnInputClass;
							} else {
								inputColumn.className = `column is-8 p-1 pl-3`;
							}
							inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`;
				
							const inputElement = document.createElement("button");
							if (
								typeof config.columnInputElementClass !== "undefined" &&
								config.columnInputElementClass !== null &&
								config.columnInputElementClass !== ""
							) {
								inputElement.className = config.columnInputElementClass;
							} else {
								inputElement.className = `button is-size-7 is-smallest-element is-justify-content-flex-end`;
							}
				
							inputElement.id = `${inputColumn.id}-inputElement${config.idSuffix}`;
							inputElement.textContent = config.columnInputContent;
							inputElement.style.width = "50";
				
							inputElementIconSpan = document.createElement("span");
							inputElementIconSpan.id = `${inputElement.id}-inputElementIconSpan${config.idSuffix}`;
							inputElementIconSpan.className = config.columnInputContentIconSpanClass;
				
							inputElementIconInlineElement = document.createElement("i");
							inputElementIconInlineElement.id = `${inputElementIconSpan.id}-inputElementIconInlineElement${config.idSuffix}`;
							inputElementIconInlineElement.className =
								config.columnInputContentIconInlineElementClass;
				
							inputElementIconSpanButtonLabel = document.createElement("span");
							inputElementIconSpanButtonLabel.id = `${inputElement.id}-inputElementIconSpanButtonLabel${config.idSuffix}`;
				
							inputElementIconSpan.appendChild(inputElementIconInlineElement);
							inputElement.appendChild(inputElementIconSpanButtonLabel);
							inputElement.appendChild(inputElementIconSpan);
				
							inputElement.addEventListener("click", function () {
								console.log(
									"config.columnInputCallOutFuntionName: ",
									config.columnInputCallOutFuntionName,
								);
								eval(config.columnInputCallOutFuntionName + `(cy)`);
							});
				
							inputColumn.appendChild(inputElement);
							columnsPanelContent.appendChild(inputColumn);
						} 
						else if (config.columnInputType == "slider") {
							const inputColumn = document.createElement("div");
							inputColumn.className = `column is-5 p-1 pl-2`;
							inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`;
				
							const inputElement = document.createElement("input");
							inputElement.className = `slider custom-slider`;
							inputElement.style.width = `100px`;
				
							inputElement.step = "1";
							inputElement.min = "1";
							inputElement.max = "1000";
							inputElement.value = "50";
							inputElement.type = "range";
				
							inputElement.id = `${inputColumn.id}-label${config.idSuffix}`;
							inputElement.textContent = config.columnInputContent;
				
							inputColumn.appendChild(inputElement);
							columnsPanelContent.appendChild(inputColumn);
						} 
						else if (config.columnInputType == "input") {
							const inputColumn = document.createElement("div");
							if (
								typeof config.columnInputClass !== "undefined" &&
								config.columnInputClass !== null &&
								config.columnInputClass !== ""
							) {
								inputColumn.className = config.columnInputClass;
							} else {
								inputColumn.className = `column is-8 p-1 pl-3`;
							}
							// inputColumn.className = `column is-8 p-1 pl-3`;
							// inputColumn.className = `column is-8 p-1 pl-3`;
							inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`;
							const inputElement = document.createElement("input");
							if (
								typeof config.columnInputElementClass !== "undefined" &&
								config.columnInputElementClass !== null &&
								config.columnInputElementClass !== ""
							) {
								inputElement.className = config.columnInputElementClass;
							} else {
								inputElement.className = `input is-size-7 has-text-left link-impairment-widht has-text-weight-normal is-smallest-element`;
							}
							// inputElement.className = `input is-size-7 has-text-left link-impairment-widht has-text-weight-normal is-smallest-element`;
							// inputElement.className = `input is-size-7 has-text-left link-impairment-widht has-text-weight-normal is-smallest-element`;
							inputElement.id = `${inputColumn.id}-label${config.idSuffix}`;
							inputElement.type = "text";
							inputElement.value = config.columnInputContent;
							inputElement.placeholder = config.columnInputPlaceholder;
				
							inputColumn.appendChild(inputElement);
							columnsPanelContent.appendChild(inputColumn);
						} 
						else if (config.columnInputType == "field") {
							const inputColumn = document.createElement("div");
							inputColumn.className = `column is-8 p-1 pl-3`;
							inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`;
				
							const inputElement = document.createElement("div");
							inputElement.className = `field has-addons`;
							inputElement.id = `${inputColumn.id}-label${config.idSuffix}`;
							if (config.columnInputIsInvisible == "yes") {
								inputElement.classList.add("is-invisible");
							}
				
							// create addon input
							// create addon input
							const controlId = `${inputElement.id}-control`;
							const control = document.createElement("p");
							control.className = "control";
							control.id = controlId;
							const input = document.createElement("input");
							input.id = `${controlId}-input`;
				
							if (config.columnInputAttribute == "enabled") {
								input.setAttribute("enabled", "");
							} else {
								input.setAttribute("disabled", "");
							}
				
							input.className = `label is-size-7 has-text-left has-text-weight-normal is-flex-wrap-wrap is-smallest-element`;
							input.value = config.columnInputContent;
							input.placeholder = config.columnInputPlaceholder;
				
							control.appendChild(input);
							inputElement.appendChild(control);
				
							// create addon button
							// create addon button
							addons = config.addonsContent;
				
							for (let i = 0; i < addons.length; i++) {
								const addon = addons[i];
								const controlId = `${inputElement.id}-control${addon.name}`;
								const control = document.createElement("p");
								control.className = "control";
								control.id = controlId;
				
								// Create a button element
								// Create a button element
								const button = document.createElement("a");
								button.id = `${controlId}-button${addon.name}`;
								button.className = `button is-outlined px-3 is-smallest-element is-${addon.name === "blue" ? "link" : "success"}`;
				
								if (addon.hrefFunction == "link") {
									button.href = addon.hrefLink;
									button.target = "_blank";
								} else if (addon.hrefFunction == "eventHandlerLink") {
									button.addEventListener("click", function () {
										console.log("addon.callOutFuntionName", addon.callOutFuntionName);
										eval(addon.callOutFuntionName + `(cy)`);
									});
								} else if (addon.hrefFunction == "copy") {
									button.href = addon.hrefLink;
									button.target = "_blank";
									button.addEventListener("click", function (event) {
										// Prevent the default behavior of the anchor element (opening a new tab)
										// Prevent the default behavior of the anchor element (opening a new tab)
										urlToCopy = addon.hrefLink;
										event.preventDefault();
				
										// Create a temporary input element to copy the URL to the clipboard
										// Create a temporary input element to copy the URL to the clipboard
										const tempInput = document.createElement("input");
										tempInput.value = urlToCopy;
										document.body.appendChild(tempInput);
										tempInput.select();
										document.execCommand("copy");
										document.body.removeChild(tempInput);
				
										// Provide user feedback (e.g., alert or toast) that the URL has been copied
										// Provide user feedback (e.g., alert or toast) that the URL has been copied
										bulmaToast.toast({
											message: `SSH command is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`,
											type: "is-warning is-size-6 p-3",
											duration: 4000,
											position: "top-center",
											closeOnClick: true,
										});
										appendMessage(
											`SSH command is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`,
										);
									});
								}
				
								// Create a icon element
								// Create a icon element
								const icon = document.createElement("span");
								icon.className = "icon is-small";
								const iconElement = document.createElement("i");
								iconElement.className = addon.iconClass;
								icon.appendChild(iconElement);
								button.appendChild(icon);
				
								// Create a hover text paragraph element
								// Create a hover text paragraph element
								const hoverText = document.querySelector(".hover-text");
				
								// Add event listeners for hover behavior
								// Add event listeners for hover behavior
								button.addEventListener("mouseover", () => {
									// Calculate the position for the hover text
									// Calculate the position for the hover text
									const rect = button.getBoundingClientRect();
									const top = rect.top - hoverText.offsetHeight + 25;
									const left = rect.left + (button.offsetWidth - hoverText.offsetWidth) / 2;
				
									// Set the position and show the hover text
									// Set the position and show the hover text
									hoverText.style.top = `${top}px`;
									hoverText.style.left = `${left}px`;
									hoverText.classList.remove("is-hidden");
									hoverText.textContent = addon.hoverMessage;
								});
								button.addEventListener("mouseout", () => {
									// Hide the hover text
									// Hide the hover text
									hoverText.classList.add("is-hidden");
								});
								control.appendChild(button);
								inputElement.appendChild(control);
							}
							inputColumn.appendChild(inputElement);
							columnsPanelContent.appendChild(inputColumn);
						}  
						// columnInputType buttonGroupHandle
						// columnInputType buttonGroupHandle
						else if (config.columnInputType == "selectGroup") {
							const inputColumn = document.createElement("div");
							if (
								typeof config.columnInputClass !== "undefined" &&
								config.columnInputClass !== null &&
								config.columnInputClass !== ""
							) {
								inputColumn.className = config.columnInputClass;
							} else {
								inputColumn.className = `column is-8 p-1 pl-3`;
							}
							inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`;
				
							const inputElement = document.createElement("div");
							inputElement.className = `field has-addons`;
							inputElement.id = `${inputColumn.id}-label${config.idSuffix}`;
							if (config.columnInputIsInvisible == "yes") {
								inputElement.classList.add("is-invisible");
							}
				
							// create addon select
							// create addon select
							addons = config.addonsContent;
				
							for (let i = 0; i < addons.length; i++) {
								const addon = addons[i];
								const controlId = `${inputElement.id}-control${addon.name}`;
								const control = document.createElement("p");
								control.className = "control";
								control.id = controlId;
				
								// Create a select element
								// Create a select element
								const select = document.createElement("a");
								select.id = `${controlId}-select${addon.name}`;
								select.className = `select is-outlined px-3 is-smallest-element is-${addon.name === "blue" ? "link" : "success"}`;
				
								if (addon.hrefFunction == "link") {
									select.href = addon.hrefLink;
									select.target = "_blank";
								} else if (addon.hrefFunction == "eventHandlerLink") {
									select.addEventListener("click", function () {
										console.log("addon.callOutFuntionName", addon.callOutFuntionName);
										eval(addon.callOutFuntionName + `(cy)`);
									});
								}
				
								// Create a icon element
								// Create a icon element
								const icon = document.createElement("span");
								icon.className = "icon is-small";
								const iconElement = document.createElement("i");
								iconElement.className = addon.iconClass;
								icon.appendChild(iconElement);
								select.appendChild(icon);
				
								// Create a hover text paragraph element
								// Create a hover text paragraph element
								const hoverText = document.querySelector(".hover-text");
				
								// Add event listeners for hover behavior
								// Add event listeners for hover behavior
								select.addEventListener("mouseover", () => {
									// Calculate the position for the hover text
									// Calculate the position for the hover text
									const rect = select.getBoundingClientRect();
									const top = rect.top - hoverText.offsetHeight + 25;
									const left = rect.left + (select.offsetWidth - hoverText.offsetWidth) / 2;
				
									// Set the position and show the hover text
									// Set the position and show the hover text
									hoverText.style.top = `${top}px`;
									hoverText.style.left = `${left}px`;
									hoverText.classList.remove("is-hidden");
									hoverText.textContent = addon.hoverMessage;
								});
								select.addEventListener("mouseout", () => {
									// Hide the hover text
									// Hide the hover text
									hoverText.classList.add("is-hidden");
								});
								control.appendChild(select);
								inputElement.appendChild(control);
							}
							inputColumn.appendChild(inputElement);
							columnsPanelContent.appendChild(inputColumn);
						}
				
						panelContent.appendChild(columnsPanelContent);
						columnContainer.appendChild(panelContent);
						divPanelBlock.appendChild(columnContainer);
					}
					
					);
					

					
				}
				
				function showPanelWelcome() {
					tabContentFns = [createWelcomeTab];
					tabContentFnsArg = [];
					createContentPanel(
						"Panel-03",
						tabContentFns,
						tabContentFnsArg,
						"Introduction",
					);
				
					// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');
					// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');
				}
				
				function createWelcomeTab(panelHeadingText) {
					const modifiedHeaderText = panelHeadingText;
				
					// Create the tab-container
					// Create the tab-container
					const tabContainer = document.createElement("div");
					tabContainer.id = `tabContainer-${modifiedHeaderText}`;
					tabContainer.className = "panel-tabContainer";
				
					// Panel Block 01
					// Panel Block 01
					panelBlockContainer = createPanelBlockContainer(tabContainer.id);
					panelBlock01 = panelBlockContainer.panelBlock;
					divPanelBlock01 = panelBlockContainer.divPanelBlock;
				
					// Define the HTML content as a string
					// Define the HTML content as a string
					var topoViewerVersion = "nightly";
					const htmlContent = `
												<div class="content is-small pb-2">
													<h6>Welcome to TopoViewer!</h6>
													
													<p>
														TopoViewer is a powerful network topology visualization tool designed to help you easily manage and monitor your network infrastructure. Whether you're a network administrator, engineer, or simply curious about your network, TopoViewer has you covered.<br>
													</p>
				
													<p>
														Designed and developed by <strong><a href="https://www.linkedin.com/in/asadarafat/">Asad Arafat</a></strong> <br>
														GUI Framework by <strong><a href="https://www.linkedin.com/in/siva19susi//">Siva Sivakumar</a></strong> <br>
													</p>
				
													<p>Key Features: </p>
													<ul>
														<li>Visualize your network topology with ease.</li>
														<li>View detailed attributes of nodes and links by clicking on them.</li>
														<li>Analyze network traffic using Wireshark integration.</li>
														<li>Apply network impairments to simulate real-world conditions.</li>
													</ul>
				
													<p>
														Getting Started: 
													</p>
													<ul>
														<li>Click on nodes and links to explore your network.</li>
														<li>Use the settings menu to show/hide link endpoint labels.</li>
														<li>Analyze network traffic using Wireshark integration.</li>
														<li>For advanced network analysis, download our client package.</li>
														<li>Visit our GitHub repository for more details <a href="https/github.com/asadarafat/topoViewer">https/github.com/asadarafat/topoViewer</a>.</li>
													</ul>
				
													<p>
														We hope you find TopoViewer a valuable tool for your network management needs. If you have any questions or feedback, please don't hesitate to reach out to us.
													</p>
				
												</div>
												`;
				
					// Create a div element and set its innerHTML to the defined HTML content
					// Create a div element and set its innerHTML to the defined HTML content
					const contentDiv = document.createElement("div");
					contentDiv.className = "px-2";
					contentDiv.innerHTML = htmlContent;
					contentDiv.style.maxHeight = "280px";
					contentDiv.style.overflowY = "auto";
				
					divPanelBlock01.appendChild(contentDiv);
					// append divPanelBlock01 --> panelBlock01 --> tabContainer
					// append divPanelBlock01 --> panelBlock01 --> tabContainer
					panelBlock01.append(divPanelBlock01);
				
					tabContainer.appendChild(panelBlock01);
				
					return tabContainer;
				}
				
				async function showPanelAbout() {
					const versionUrl = `${location.protocol}//${location.host}/version`;
					try {
						const response = await fetch(versionUrl);
				
						if (!response.ok) {
							throw new Error("Network response was not OK");
						}
				
						const versionParsedText = await response.text();
						console.log("Fetched text:", versionParsedText);
				
						removeElementById("Panel-03");
						tabContentFns = [createAboutTab];
						tabContentFnsArg = [versionParsedText];
						createContentPanel("Panel-03", tabContentFns, tabContentFnsArg[0], "About");
					} catch (error) {
						console.error("Fetch error:", error);
						throw error;
					}
				}
				
				function createAboutTab(versionParsedText, panelHeadingText) {
					const modifiedHeaderText = panelHeadingText;
				
					// Create the tab-container
					// Create the tab-container
					const tabContainer = document.createElement("div");
					tabContainer.id = `tabContainer-${modifiedHeaderText}`;
					tabContainer.className = "panel-tabContainer";
				
					// Panel Block 01
					// Panel Block 01
					panelBlockContainer = createPanelBlockContainer(tabContainer.id);
					panelBlock01 = panelBlockContainer.panelBlock;
					divPanelBlock01 = panelBlockContainer.divPanelBlock;
				
					// Define the HTML content as a string
					// Define the HTML content as a string
					var topoViewerVersion = versionParsedText;
					const htmlContent = `
												<div class="content is-small pb-2">
													<h6>Version: ${topoViewerVersion}</h6>
													
													<p>
													Designed and developed by <strong><a href="https://www.linkedin.com/in/asadarafat/">Asad Arafat</a></strong> <br>
													GUI Framework by <strong><a href="https://www.linkedin.com/in/siva19susi//">Siva Sivakumar</a></strong> <br>
													</p>
				
													<p>Instruction: </p>
													<ul>
													<li>To view the attributes of a node or link, click on it.</li>
													<li>To show/hide link endpoint label, click on setting menu.</li>
													<li>To tap link with wireshark or to add impairment to link, please download client package.</li>
													<li>To see further details, please visit <a href="https/github.com/asadarafat/topoViewer">https/github.com/asadarafat/topoViewer</a>.</li>
													</ul>
													
												</div>
												`;
				
					// Create a div element and set its innerHTML to the defined HTML content
					// Create a div element and set its innerHTML to the defined HTML content
					const contentDiv = document.createElement("div");
					contentDiv.className = "px-2";
					contentDiv.innerHTML = htmlContent;
					contentDiv.style.maxHeight = "280px";
					contentDiv.style.overflowY = "auto";
				
					divPanelBlock01.appendChild(contentDiv);
					// append divPanelBlock01 --> panelBlock01 --> tabContainer
					// append divPanelBlock01 --> panelBlock01 --> tabContainer
					panelBlock01.append(divPanelBlock01);
					tabContainer.appendChild(panelBlock01);
				
					return tabContainer;
				}
				
				function showPanelTopoViewerClient() {
					removeElementById("Panel-03");
					tabContentFns = [createTopoViewerClientTab];
					tabContentFnsArg = [];
					createContentPanel(
						"Panel-03",
						tabContentFns,
						tabContentFnsArg,
						"TopoViewer Helper App",
					);
				
					// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');
					// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');
				}
				
				function createTopoViewerClientTab(panelHeadingText) {
					const modifiedHeaderText = panelHeadingText;
				
					// Create the tab-container
					// Create the tab-container
					const tabContainer = document.createElement("div");
					tabContainer.id = `tabContainer-${modifiedHeaderText}`;
					tabContainer.className = "panel-tabContainer";
				
					// Panel Block 01
					// Panel Block 01
					panelBlockContainer = createPanelBlockContainer(tabContainer.id);
					panelBlock01 = panelBlockContainer.panelBlock;
					divPanelBlock01 = panelBlockContainer.divPanelBlock;
				
					// Define the HTML content as a string
					// Define the HTML content as a string
				
					url = location.host;
					const hreWindows = `http://${url}/clab-client/clab-client-windows/ClabCapture.app.zip`;
					const hrefMac = `http://${url}/clab-client/clab-client-mac/ClabCapture.app.zip`;
					const htmlContent = `
											<div class="content is-small pb-2">
												<h6>Wireshark Capture</h6>
												<p>
													Please download the following helper app:
												</p>
												<ul>
													<li><a href="${hreWindows}">Windows version</a> </li>
													<li><a href="${hrefMac}">MAC version</a> </li>
												</ul>
												<p>
													TopoViewer offers a remote capture feature for intercepting ContainerLab node endpoints. 
													For the best experience, it's recommended to have both TopoViewer and its helper app installed on client-side. 
													With the TopoViewer helper app, you can effortlessly automate the launch of Wireshark's GUI. 
												</p>
												<p>
													Alternatively, if you don't have the helper app, you can simply copy and paste an SSH command to initiate Wireshark manually. 
													This setup provides flexibility in how you utilize this feature. <br>
												</p>
											</div>
											`;
				
					// Create a div element and set its innerHTML to the defined HTML content
					// Create a div element and set its innerHTML to the defined HTML content
					const contentDiv = document.createElement("div");
					contentDiv.className = "px-2";
					contentDiv.innerHTML = htmlContent;
					contentDiv.style.maxHeight = "280px";
					contentDiv.style.overflowY = "auto";
				
					divPanelBlock01.appendChild(contentDiv);
					// append divPanelBlock01 --> panelBlock01 --> tabContainer
					// append divPanelBlock01 --> panelBlock01 --> tabContainer
					panelBlock01.append(divPanelBlock01);
					tabContainer.appendChild(panelBlock01);
				
					return tabContainer;
				}
				
				function showPanelDrawerLayout() {
					removeElementById("Panel-03");
					tabContentFns = [createDrawerLayoutTab];
					tabContentFnsArg = [];
					createContentPanel(
						"Panel-03",
						tabContentFns,
						tabContentFnsArg,
						"TopoViewer Helper App",
					);
				
					// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');
					// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');
				}
				
				function createDrawerLayoutTab(panelHeadingText) {
					const modifiedHeaderText = panelHeadingText;
				
					// Create the tab-container
					// Create the tab-container
					const tabContainer = document.createElement("div");
					tabContainer.id = `tabContainer-${modifiedHeaderText}`;
					tabContainer.className = "panel-tabContainer";
				
					// Panel Block 01
					// Panel Block 01
					panelBlockContainer = createPanelBlockContainer(tabContainer.id);
					panelBlock01 = panelBlockContainer.panelBlock;
					divPanelBlock01 = panelBlockContainer.divPanelBlock;
				
					// Define the HTML content as a string
					// Define the HTML content as a string
				
					url = location.host;
					const hreWindows = `http://${url}/clab-client/clab-client-windows/ClabCapture.app.zip`;
					const hrefMac = `http://${url}/clab-client/clab-client-mac/ClabCapture.app.zip`;
					const htmlContent = `
												<div class="tabs is-boxed px-">
													<ul>
														<li class="is-active">
															<a>
																<span class="icon is-small"><i class="fas fa-image" aria-hidden="true"></i></span>
																<span></span>
															</a>
														</li>
														<li>
															<a>
																<span class="icon is-small px-0"><i class="fas fa-music" aria-hidden="true"></i></span>
																<span></span>
															</a>
														</li>
														<li>
															<a>
																<span class="icon is-small"><i class="fas fa-film" aria-hidden="true"></i></span>
																<span></span>
															</a>
														</li>
														<li>
															<a>
																<span class="icon is-small"><i class="far fa-file-alt" aria-hidden="true"></i></span>
																<span></span>
															</a>
														</li>
													</ul>
												</div>
												`;
				
					// Create a div element and set its innerHTML to the defined HTML content
					// Create a div element and set its innerHTML to the defined HTML content
					const contentDiv = document.createElement("div");
					contentDiv.className = "px-2";
					contentDiv.innerHTML = htmlContent;
					contentDiv.style.maxHeight = "280px";
					contentDiv.style.overflowY = "auto";
				
					divPanelBlock01.appendChild(contentDiv);
					// append divPanelBlock01 --> panelBlock01 --> tabContainer
					// append divPanelBlock01 --> panelBlock01 --> tabContainer
					panelBlock01.append(divPanelBlock01);
					tabContainer.appendChild(panelBlock01);
				
					return tabContainer;
				}
				
				// function zoomToFitDrawerl(cy) {
				// 	const initialZoom = cy.zoom();
				// 	appendMessage(`Bro, initial zoom level is '${initialZoom}'.`);
				// 	//- Fit all nodes possible with padding
				// 	cy.fit();
				// 	const currentZoom = cy.zoom();
				// 	appendMessage(`And now the zoom level is '${currentZoom}'.`);
				// }
				// function zoomToFitDrawerl(cy) {
				// 	const initialZoom = cy.zoom();
				// 	appendMessage(`Bro, initial zoom level is '${initialZoom}'.`);
				// 	//- Fit all nodes possible with padding
				// 	cy.fit();
				// 	const currentZoom = cy.zoom();
				// 	appendMessage(`And now the zoom level is '${currentZoom}'.`);
				// }
				
				function nodeFindDrawer(cy) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "					//- Get a reference to your Cytoscape instance (assuming it's named 'cy')"}}
{{rawJSComment "					//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance"}}
{{rawJSComment "					//- Find the node with the specified name"}}
<<<<<<< HEAD
					const nodeName = document.getElementById('nodeFindInput').value;
=======
{{rawJSComment "					//- Get a reference to your Cytoscape instance (assuming it's named 'cy')"}}
{{rawJSComment "					//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance"}}
{{rawJSComment "					//- Find the node with the specified name"}}
=======
{{rawJSComment "####					//- Get a reference to your Cytoscape instance (assuming it's named 'cy')"}}
{{rawJSComment "####					//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance"}}
{{rawJSComment "####					//- Find the node with the specified name"}}
{{rawJSComment "####					//- Get a reference to your Cytoscape instance (assuming it's named 'cy')"}}
{{rawJSComment "####					//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance"}}
{{rawJSComment "####					//- Find the node with the specified name"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "					//- Get a reference to your Cytoscape instance (assuming it's named 'cy')"}}
{{rawJSComment "					//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance"}}
{{rawJSComment "					//- Find the node with the specified name"}}
{{rawJSComment "					//- Get a reference to your Cytoscape instance (assuming it's named 'cy')"}}
{{rawJSComment "					//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance"}}
{{rawJSComment "					//- Find the node with the specified name"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
					//- Get a reference to your Cytoscape instance (assuming it's named 'cy')
					//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance
					//- Find the node with the specified name
					//- Get a reference to your Cytoscape instance (assuming it's named 'cy')
					//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance
					//- Find the node with the specified name
>>>>>>> 4b6d4438 (refactore - panels)
					const nodeName = document.getElementById(
						"panelBlock-viewportButtons-buttonfindNode-divPanelBlock-columnContainerlabelFindNodeNodeName-panelContentlabelFindNodeNodeName-columnsPanelContentlabelFindNodeNodeName-labelColumnlabelFindNodeNodeName-inputColumnlabelFindNodeNodeName-labellabelFindNodeNodeName",
					).value;
<<<<<<< HEAD

>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
					const node = cy.$(`node[name = "${nodeName}"]`);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "					//- Check if the node exists"}}
					if (node.length > 0) {
{{rawJSComment "						// console"}}
<<<<<<< HEAD
						console.log("Info: " + "Sweet! Node \"" + nodeName + "\" is in the house.");
						appendMessage("Info: " + "Sweet! Node \"" + nodeName + "\" is in the house.");
=======
{{rawJSComment "						// console"}}
						console.log("Info: " + 'Sweet! Node "' + nodeName + '" is in the house.');
						appendMessage("Info: " + 'Sweet! Node "' + nodeName + '" is in the house.');
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
{{rawJSComment "						//- Apply a highlight style to the node"}}
=======
{{rawJSComment "####					//- Check if the node exists"}}
{{rawJSComment "####					//- Check if the node exists"}}
=======
{{rawJSComment "					//- Check if the node exists"}}
{{rawJSComment "					//- Check if the node exists"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
					//- Check if the node exists
					//- Check if the node exists
>>>>>>> 4b6d4438 (refactore - panels)
					if (node.length > 0) {
						// console
						// console
						console.log("Info: " + 'Sweet! Node "' + nodeName + '" is in the house.');
						appendMessage("Info: " + 'Sweet! Node "' + nodeName + '" is in the house.');
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "####						//- Apply a highlight style to the node"}}
{{rawJSComment "####						//- Apply a highlight style to the node"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "						//- Apply a highlight style to the node"}}
{{rawJSComment "						//- Apply a highlight style to the node"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
						//- Apply a highlight style to the node
						//- Apply a highlight style to the node
>>>>>>> 4b6d4438 (refactore - panels)
						node.style({
							"border-color": "red",
							"border-width": "2px",
							"background-color": "yellow",
						});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "						//- Zoom out on the node"}}
<<<<<<< HEAD
						cy.fit()
=======
{{rawJSComment "						//- Zoom out on the node"}}
						cy.fit();
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
{{rawJSComment "						//- Zoom in on the node"}}
=======
{{rawJSComment "####						//- Zoom out on the node"}}
{{rawJSComment "####						//- Zoom out on the node"}}
						cy.fit();
{{rawJSComment "####						//- Zoom in on the node"}}
{{rawJSComment "####						//- Zoom in on the node"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "						//- Zoom out on the node"}}
{{rawJSComment "						//- Zoom out on the node"}}
						cy.fit();
{{rawJSComment "						//- Zoom in on the node"}}
{{rawJSComment "						//- Zoom in on the node"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
						//- Zoom out on the node
						//- Zoom out on the node
						cy.fit();
						//- Zoom in on the node
						//- Zoom in on the node
>>>>>>> 4b6d4438 (refactore - panels)
						cy.animate({
							zoom: {
								level: 5,
								position: {
									x: node.position("x"),
									y: node.position("y"),
								},
								renderedPosition: {
									x: node.renderedPosition("x"),
									y: node.renderedPosition("y"),
								},
							},
							duration: 1500,
						});
					} else {
						console.error(
							`Bro, I couldn't find a node named "${nodeName}". Try another one.`,
						);
						appendMessage(
							`Bro, I couldn't find a node named "${nodeName}". Try another one.`,
						);
					}
				}
<<<<<<< HEAD

<<<<<<< HEAD
				function zoomToFitDrawer() {
					const initialZoom = cy.zoom();
					appendMessage(`Bro, initial zoom level is "${initialZoom}".`);
{{rawJSComment "					//- Fit all nodes possible with padding"}}
					cy.fit();
					const currentZoom = cy.zoom();
					appendMessage(`And now the zoom level is "${currentZoom}".`);
				}
								  			  
				function pathFinderDijkstraEvent(event) {
=======
=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
				function pathFinderDijkstraDrawer(cy) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
=======
>>>>>>> ea41549a (adding python actions for config backup restore)
{{rawJSComment "					// Usage example:"}}
{{rawJSComment "					// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs"}}
{{rawJSComment "					//- Function to get the default node style from cy-style.json"}}
{{rawJSComment "					//- weight: (edge) => 1, // You can adjust the weight function if needed"}}
{{rawJSComment "					//- weight: (edge) => edge.data('distance')"}}
<<<<<<< HEAD

					console.log("im triggered");

{{rawJSComment "					// Remove existing highlight from all edges"}}
<<<<<<< HEAD
					cy.edges().forEach(edge => {
						edge.removeClass('spf');
					});

{{rawJSComment "					// Get the node sourceNodeId from pathFinderSourceNodeInput and targetNodeId from pathFinderTargetNodeInput  "}}
					const sourceNodeId = document.getElementById('pathFinderSourceNodeInput').value;
					const targetNodeId = document.getElementById('pathFinderTargetNodeInput').value;
=======
{{rawJSComment "					// Remove existing highlight from all edges"}}
=======
{{rawJSComment "####					// Usage example:"}}
{{rawJSComment "####					// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs"}}
{{rawJSComment "####					//- Function to get the default node style from cy-style.json"}}
{{rawJSComment "####					//- weight: (edge) => 1, // You can adjust the weight function if needed"}}
{{rawJSComment "####					//- weight: (edge) => edge.data('distance')"}}
{{rawJSComment "####					// Usage example:"}}
{{rawJSComment "####					// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs"}}
{{rawJSComment "####					//- Function to get the default node style from cy-style.json"}}
{{rawJSComment "####					//- weight: (edge) => 1, // You can adjust the weight function if needed"}}
{{rawJSComment "####					//- weight: (edge) => edge.data('distance')"}}

					console.log("im triggered");

{{rawJSComment "####					// Remove existing highlight from all edges"}}
{{rawJSComment "####					// Remove existing highlight from all edges"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "					// Usage example:"}}
{{rawJSComment "					// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs"}}
{{rawJSComment "					//- Function to get the default node style from cy-style.json"}}
{{rawJSComment "					//- weight: (edge) => 1, // You can adjust the weight function if needed"}}
{{rawJSComment "					//- weight: (edge) => edge.data('distance')"}}
				
					console.log("im triggered");
				
{{rawJSComment "					// Remove existing highlight from all edges"}}
{{rawJSComment "					// Remove existing highlight from all edges"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
					// Usage example:
					// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs
					//- Function to get the default node style from cy-style.json
					//- weight: (edge) => 1, // You can adjust the weight function if needed
					//- weight: (edge) => edge.data('distance')
					// Usage example:
					// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs
					//- Function to get the default node style from cy-style.json
					//- weight: (edge) => 1, // You can adjust the weight function if needed
					//- weight: (edge) => edge.data('distance')
				
					console.log("im triggered");
				
					// Remove existing highlight from all edges
					// Remove existing highlight from all edges
>>>>>>> 4b6d4438 (refactore - panels)
					cy.edges().forEach((edge) => {
						edge.removeClass("spf");
					});
				
					// Get the node sourceNodeId from pathFinderSourceNodeInput and targetNodeId from pathFinderTargetNodeInput
					// Get the node sourceNodeId from pathFinderSourceNodeInput and targetNodeId from pathFinderTargetNodeInput
					const sourceNodeId = document.getElementById(
						"panelBlock-viewportButtons-buttonfindRoute-divPanelBlock-columnContainerlabelFindRouteSource-panelContentlabelFindRouteSource-columnsPanelContentlabelFindRouteSource-labelColumnlabelFindRouteSource-inputColumnlabelFindRouteSource-labellabelFindRouteSource",
					).value;
					const targetNodeId = document.getElementById(
						"panelBlock-viewportButtons-buttonfindRoute-divPanelBlock-columnContainerlabelFindRouteTarget-panelContentlabelFindRouteTarget-columnsPanelContentlabelFindRouteTarget-labelColumnlabelFindRouteTarget-inputColumnlabelFindRouteTarget-labellabelFindRouteTarget",
					).value;
<<<<<<< HEAD
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)

<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "					// Assuming you have 'cy' as your Cytoscape instance"}}
=======
{{rawJSComment "####					// Assuming you have 'cy' as your Cytoscape instance"}}
{{rawJSComment "####					// Assuming you have 'cy' as your Cytoscape instance"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
=======
				
<<<<<<< HEAD
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
{{rawJSComment "					// Assuming you have 'cy' as your Cytoscape instance"}}
{{rawJSComment "					// Assuming you have 'cy' as your Cytoscape instance"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
					// Assuming you have 'cy' as your Cytoscape instance
					// Assuming you have 'cy' as your Cytoscape instance
>>>>>>> 4b6d4438 (refactore - panels)
					const sourceNode = cy.$(`node[id="${sourceNodeId}"]`);
					const targetNode = cy.$(`node[id="${targetNodeId}"]`);
				
					console.log(
						"Info: " +
							"Let's find the path from-" +
							sourceNodeId +
							"-to-" +
							targetNodeId +
							"!",
					);
					appendMessage(
						"Info: " +
							"Let's find the path from-" +
							sourceNodeId +
							"-to-" +
							targetNodeId +
							"!",
					);
<<<<<<< HEAD

<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "					// Check if both nodes exist"}}
=======
{{rawJSComment "####					// Check if both nodes exist"}}
{{rawJSComment "####					// Check if both nodes exist"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
=======
				
<<<<<<< HEAD
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
{{rawJSComment "					// Check if both nodes exist"}}
{{rawJSComment "					// Check if both nodes exist"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
					// Check if both nodes exist
					// Check if both nodes exist
>>>>>>> 4b6d4438 (refactore - panels)
					if (sourceNode.length === 0 || targetNode.length === 0) {
						console.error(
							`Bro, couldn't find the source or target node you specified. Double-check the node names.`,
						);
						appendMessage(
							`Bro, couldn't find the source or target node you specified. Double-check the node names.`,
						);
						return;
					}
<<<<<<< HEAD

<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "					// Get the Dijkstra result with the shortest path"}}
					const dijkstraResult = cy.elements().dijkstra({
						root: sourceNode,
						weight: (edge) => 1,
{{rawJSComment "						// Use the custom weight attribute"}}
{{rawJSComment "						// weight: edge => edge.data('customWeight'),"}}
<<<<<<< HEAD

=======
{{rawJSComment "						// Use the custom weight attribute"}}
{{rawJSComment "						// weight: edge => edge.data('customWeight'),"}}
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
					});
{{rawJSComment "					// Get the shortest path from Dijkstra result"}}
					const shortestPathEdges = dijkstraResult.pathTo(targetNode);
					console.log(shortestPathEdges);

{{rawJSComment "					// Check if there is a valid path (shortestPathEdges is not empty)"}}
					if (shortestPathEdges.length > 1) {
<<<<<<< HEAD

{{rawJSComment "						//// Apply a style to highlight the shortest path edges"}}
{{rawJSComment "						// shortestPathEdges.style({"}}
{{rawJSComment "						//	'line-color': 'red', "}}
{{rawJSComment "						//	'line-style': 'solid', "}}
{{rawJSComment "						// });"}}

{{rawJSComment "						// Highlight the shortest path"}}
						shortestPathEdges.forEach(edge => {
							edge.addClass('spf');
						});

{{rawJSComment "						//- Zoom out on the node"}}
						cy.fit()
=======
{{rawJSComment "						// Highlight the shortest path"}}
{{rawJSComment "						// Highlight the shortest path"}}
=======
{{rawJSComment "####					// Get the Dijkstra result with the shortest path"}}
{{rawJSComment "####					// Get the Dijkstra result with the shortest path"}}
=======
=======
				
<<<<<<< HEAD
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
{{rawJSComment "					// Get the Dijkstra result with the shortest path"}}
{{rawJSComment "					// Get the Dijkstra result with the shortest path"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
					// Get the Dijkstra result with the shortest path
					// Get the Dijkstra result with the shortest path
>>>>>>> 4b6d4438 (refactore - panels)
					const dijkstraResult = cy.elements().dijkstra({
						root: sourceNode,
						weight: (edge) => 1,
						// Use the custom weight attribute
						// weight: edge => edge.data('customWeight'),
						// Use the custom weight attribute
						// weight: edge => edge.data('customWeight'),
					});
					// Get the shortest path from Dijkstra result
					// Get the shortest path from Dijkstra result
					const shortestPathEdges = dijkstraResult.pathTo(targetNode);
					console.log(shortestPathEdges);
				
					// Check if there is a valid path (shortestPathEdges is not empty)
					// Check if there is a valid path (shortestPathEdges is not empty)
					if (shortestPathEdges.length > 1) {
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "####						// Highlight the shortest path"}}
{{rawJSComment "####						// Highlight the shortest path"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "						// Highlight the shortest path"}}
{{rawJSComment "						// Highlight the shortest path"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
						// Highlight the shortest path
						// Highlight the shortest path
>>>>>>> 4b6d4438 (refactore - panels)
						shortestPathEdges.forEach((edge) => {
							edge.addClass("spf");
						});
				
						//- Zoom out on the node
						//- Zoom out on the node
						cy.fit();
<<<<<<< HEAD
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)

<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "						//- Zoom in on the node"}}
=======
{{rawJSComment "####						//- Zoom in on the node"}}
{{rawJSComment "####						//- Zoom in on the node"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
=======
				
<<<<<<< HEAD
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
{{rawJSComment "						//- Zoom in on the node"}}
{{rawJSComment "						//- Zoom in on the node"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
						//- Zoom in on the node
						//- Zoom in on the node
>>>>>>> 4b6d4438 (refactore - panels)
						cy.animate({
							zoom: {
								level: 5,
								position: {
									x: sourceNode.position("x"),
									y: sourceNode.position("y"),
								},
								renderedPosition: {
									x: sourceNode.renderedPosition("x"),
									y: sourceNode.renderedPosition("y"),
								},
							},
							duration: 1500,
						});
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "						// throw log"}}
<<<<<<< HEAD
						console.log("Info: " + "Yo, check it out! Shorthest Path from-" + sourceNodeId + "-to-" + targetNodeId + " has been found.");
						appendMessage("Info: " + "Yo, check it out! Shorthest Path from-" + sourceNodeId + "-to-" + targetNodeId + " has been found, below is the path trace..");
						console.log(shortestPathEdges)
=======
{{rawJSComment "						// throw log"}}
=======
{{rawJSComment "####						// throw log"}}
{{rawJSComment "####						// throw log"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "						// throw log"}}
{{rawJSComment "						// throw log"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
						// throw log
						// throw log
>>>>>>> 4b6d4438 (refactore - panels)
						console.log(
							"Info: " +
								"Yo, check it out! Shorthest Path from-" +
								sourceNodeId +
								"-to-" +
								targetNodeId +
								" has been found.",
						);
						appendMessage(
							"Info: " +
								"Yo, check it out! Shorthest Path from-" +
								sourceNodeId +
								"-to-" +
								targetNodeId +
								" has been found, below is the path trace..",
						);
						console.log(shortestPathEdges);
<<<<<<< HEAD
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)

=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
						shortestPathEdges.forEach((edge) => {
							console.log("Edge ID:", edge.id());
							console.log("Source Node ID:", edge.source().id());
							console.log("Target Node ID:", edge.target().id());
				
							edgeId = edge.id();
							sourceNodeId = edge.source().id();
							targetNodeId = edge.target().id();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "							// You can access other properties of the edge, e.g., source, target, data, etc."}}
=======
{{rawJSComment "####							// You can access other properties of the edge, e.g., source, target, data, etc."}}
{{rawJSComment "####							// You can access other properties of the edge, e.g., source, target, data, etc."}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "							// You can access other properties of the edge, e.g., source, target, data, etc."}}
{{rawJSComment "							// You can access other properties of the edge, e.g., source, target, data, etc."}}
<<<<<<< HEAD
>>>>>>> ea41549a (adding python actions for config backup restore)

=======
=======
							// You can access other properties of the edge, e.g., source, target, data, etc.
							// You can access other properties of the edge, e.g., source, target, data, etc.
>>>>>>> 4b6d4438 (refactore - panels)
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
							appendMessage("Info: " + "Edge ID: " + edgeId);
							appendMessage("Info: " + "Source Node ID: " + sourceNodeId);
							appendMessage("Info: " + "Target Node ID: " + targetNodeId);
						});
					} else {
						console.error(
							`Bro, there is no path from "${sourceNodeId}" to "${targetNodeId}".`,
						);
						appendMessage(
							`Bro, there is no path from "${sourceNodeId}" to "${targetNodeId}".`,
						);
						return;
					}
				}
<<<<<<< HEAD
<<<<<<< HEAD
				
				function closePanel01Event(event) {
					var panel = document.getElementById('Panel-01');
					if (panel.style.display === 'none' || panel.style.display === '') {
{{rawJSComment "						//- Show the panel"}}
						panel.style.display = 'block';
						panel.classList.toggle('active');
					} else {
{{rawJSComment "						//- Hide the panel"}}
						panel.style.display = 'none';
=======

=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
				function linkImpairmentManagerCopy(toggle, baseCommand) {
					console.log("linkImpairmentManagerCopy-Function-Reach");
				
					fullCommand = baseCommand;
				
					if (toggle == "start-source") {
						delayValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentDelay-panelContentlabelSourceImpairmentDelay-columnsPanelContentlabelSourceImpairmentDelay-labelColumnlabelSourceImpairmentDelay-inputColumnlabelSourceImpairmentDelay-labellabelSourceImpairmentDelay",
						).value;
						jitterValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentJitter-panelContentlabelSourceImpairmentJitter-columnsPanelContentlabelSourceImpairmentJitter-labelColumnlabelSourceImpairmentJitter-inputColumnlabelSourceImpairmentJitter-labellabelSourceImpairmentJitter",
						).value;
						rateValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentRate-panelContentlabelSourceImpairmentRate-columnsPanelContentlabelSourceImpairmentRate-labelColumnlabelSourceImpairmentRate-inputColumnlabelSourceImpairmentRate-labellabelSourceImpairmentRate",
						).value;
						lossValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentLoss-panelContentlabelSourceImpairmentLoss-columnsPanelContentlabelSourceImpairmentLoss-labelColumnlabelSourceImpairmentLoss-inputColumnlabelSourceImpairmentLoss-labellabelSourceImpairmentLoss",
						).value;
				
						console.log(delayValue);
				
						fullCommand =
							baseCommand +
							` --delay ${delayValue}ms --jitter ${jitterValue}ms --rate ${rateValue} --loss ${lossValue}`;
						alert_msg = `SSH command to start link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`;
					} else if (toggle == "stop-source") {
						fullCommand = baseCommand;
						alert_msg = `SSH command to stop link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`;
					} else if (toggle == "start-target") {
						delayValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentDelay-panelContentlabelTargetImpairmentDelay-columnsPanelContentlabelTargetImpairmentDelay-labelColumnlabelTargetImpairmentDelay-inputColumnlabelTargetImpairmentDelay-labellabelTargetImpairmentDelay",
						).value;
						jitterValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentJitter-panelContentlabelTargetImpairmentJitter-columnsPanelContentlabelTargetImpairmentJitter-labelColumnlabelTargetImpairmentJitter-inputColumnlabelTargetImpairmentJitter-labellabelTargetImpairmentJitter",
						).value;
						rateValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentRate-panelContentlabelTargetImpairmentRate-columnsPanelContentlabelTargetImpairmentRate-labelColumnlabelTargetImpairmentRate-inputColumnlabelTargetImpairmentRate-labellabelTargetImpairmentRate",
						).value;
						lossValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentLoss-panelContentlabelTargetImpairmentLoss-columnsPanelContentlabelTargetImpairmentLoss-labelColumnlabelTargetImpairmentLoss-inputColumnlabelTargetImpairmentLoss-labellabelTargetImpairmentLoss",
						).value;
				
						console.log(delayValue);
				
						fullCommand =
							baseCommand +
							` --delay ${delayValue}ms --jitter ${jitterValue}ms --rate ${rateValue} --loss ${lossValue}`;
						alert_msg = `SSH command to start link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`;
					} else if (toggle == "stop-target") {
						fullCommand = baseCommand;
						alert_msg = `SSH command to stop link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`;
					}
				
					console.log(fullCommand);
				
					urlToCopy = fullCommand;
					event.preventDefault();
				
					// Create a temporary input element to copy the URL to the clipboard
					// Create a temporary input element to copy the URL to the clipboard
					const tempInput = document.createElement("input");
					tempInput.value = urlToCopy;
					document.body.appendChild(tempInput);
					tempInput.select();
					document.execCommand("copy");
					document.body.removeChild(tempInput);
				
					// Provide user feedback (e.g., alert or toast) that the URL has been copied
					// Provide user feedback (e.g., alert or toast) that the URL has been copied
					bulmaToast.toast({
						message: alert_msg,
						type: "is-warning is-size-6 p-3",
						duration: 4000,
						position: "top-center",
						closeOnClick: true,
					});
					appendMessage(alert_msg);
				}
				
				function linkImpairmentManagerExec(toggle, baseCommandSsh, baseCommandExec) {
					console.log("linkImpairmentManagerExec-Function-Called");
				
					if (deploymentType == "colocated") {
						baseCommand = baseCommandExec;
					} else {
						baseCommand = baseCommandSsh;
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
					}
				
					if (toggle == "start-source") {
						delayValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentDelay-panelContentlabelSourceImpairmentDelay-columnsPanelContentlabelSourceImpairmentDelay-labelColumnlabelSourceImpairmentDelay-inputColumnlabelSourceImpairmentDelay-labellabelSourceImpairmentDelay",
						).value;
						jitterValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentJitter-panelContentlabelSourceImpairmentJitter-columnsPanelContentlabelSourceImpairmentJitter-labelColumnlabelSourceImpairmentJitter-inputColumnlabelSourceImpairmentJitter-labellabelSourceImpairmentJitter",
						).value;
						rateValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentRate-panelContentlabelSourceImpairmentRate-columnsPanelContentlabelSourceImpairmentRate-labelColumnlabelSourceImpairmentRate-inputColumnlabelSourceImpairmentRate-labellabelSourceImpairmentRate",
						).value;
						lossValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentLoss-panelContentlabelSourceImpairmentLoss-columnsPanelContentlabelSourceImpairmentLoss-labelColumnlabelSourceImpairmentLoss-inputColumnlabelSourceImpairmentLoss-labellabelSourceImpairmentLoss",
						).value;
				
						console.log(`delayValue: ${delayValue}`);
						console.log(`jitterValue: ${jitterValue}`);
						console.log(`rateValue: ${rateValue}`);
						console.log(`lossValue: ${lossValue}`);
				
						fullCommand =
							baseCommand +
							` --delay ${delayValue}ms --jitter ${jitterValue}ms --rate ${rateValue} --loss ${lossValue}`;
						alert_msg = `SSH command to start link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`;
					} else if (toggle == "stop-source") {
						fullCommand = baseCommand;
						alert_msg = `SSH command to stop link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`;
					} else if (toggle == "start-target") {
						delayValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentDelay-panelContentlabelTargetImpairmentDelay-columnsPanelContentlabelTargetImpairmentDelay-labelColumnlabelTargetImpairmentDelay-inputColumnlabelTargetImpairmentDelay-labellabelTargetImpairmentDelay",
						).value;
						jitterValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentJitter-panelContentlabelTargetImpairmentJitter-columnsPanelContentlabelTargetImpairmentJitter-labelColumnlabelTargetImpairmentJitter-inputColumnlabelTargetImpairmentJitter-labellabelTargetImpairmentJitter",
						).value;
						rateValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentRate-panelContentlabelTargetImpairmentRate-columnsPanelContentlabelTargetImpairmentRate-labelColumnlabelTargetImpairmentRate-inputColumnlabelTargetImpairmentRate-labellabelTargetImpairmentRate",
						).value;
						lossValue = document.getElementById(
							"panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentLoss-panelContentlabelTargetImpairmentLoss-columnsPanelContentlabelTargetImpairmentLoss-labelColumnlabelTargetImpairmentLoss-inputColumnlabelTargetImpairmentLoss-labellabelTargetImpairmentLoss",
						).value;
				
						console.log(`delayValue: ${delayValue}`);
						console.log(`jitterValue: ${jitterValue}`);
						console.log(`rateValue: ${rateValue}`);
						console.log(`lossValue: ${lossValue}`);
				
						fullCommand =
							baseCommand +
							` --delay ${delayValue}ms --jitter ${jitterValue}ms --rate ${rateValue} --loss ${lossValue}`;
						alert_msg = `SSH command to start link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`;
					} else if (toggle == "stop-target") {
						fullCommand = baseCommand;
						alert_msg = `SSH command to stop link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`;
					}
				
					console.log(`baseCommand: ${baseCommand}`);
					console.log(`fullCommand: ${fullCommand}`);
				
					callGoFunction("/clabNetem", fullCommand, "padding", "");
				}
				
				function getNodeEndpointDetailExec(arg01, arg02, arg03) {
					console.log("getNodeEndpointDetailExec-Function Called");
					console.log(`getNodeEndpointDetailExec-Function Argument01: ${arg01}`);
					console.log(`getNodeEndpointDetailExec-Function Argument02: ${arg02}`);
					console.log(`getNodeEndpointDetailExec-Function Argument03: ${arg03}`);
					callGoFunction("/getNodeEndpointDetail", arg01, arg02, arg03)
						.then((responseData) => {
							// Handle the response data
							console.log(
								"Received response data from getNodeEndpointDetailExec:",
								responseData,
							);
						})
<<<<<<< HEAD
					} else {
						cy.edges().forEach(function(edge) {
							edge.style('source-label', edge.data("sourceEndpoint"))
							edge.style('target-label', edge.data("targetEndpoint"))
							linkEndpointVisibility = true
						})
					}
				}


				var nodeContainerStatusVisibility = false;

				function toggleContainerStatusVisibility() {
					if (nodeContainerStatusVisibility) {
						nodeContainerStatusVisibility = false
						console.log("nodeContainerStatusVisibility: " + nodeContainerStatusVisibility)
						appendMessage("nodeContainerStatusVisibility: " + nodeContainerStatusVisibility)
						bulmaToast.toast({
							message: `Alright, mission control, we're standing down. 🛑🔍 Container status probing aborted. Stay chill, folks. 😎👨‍💻`,
							type: 'is-warning is-size-6 p-3',
							duration: 4000,
							position: "top-center",
							closeOnClick: true,
						})

					} else {
						nodeContainerStatusVisibility = true
						console.log("nodeContainerStatusVisibility: " + nodeContainerStatusVisibility)
						appendMessage("nodeContainerStatusVisibility: " + nodeContainerStatusVisibility)
						bulmaToast.toast({
							message: `🕵️‍♂️ Bro, we're currently on a mission to probe that container status! Stay tuned for the results. 🔍🚀👨‍💻`,
							type: 'is-warning is-size-6 p-3',
							duration: 4000,
							position: "top-center",
							closeOnClick: true,
						})

					}
				}

				function setNodeContainerStatus(containerNodeName, containerNodeStatus) {
					cy.nodes().forEach(function(node) {
						var nodeId = node.data('id');

{{rawJSComment "						// Find the corresponding status nodes based on node ID"}}
						var statusGreenNode = cy.$(`node[name="${nodeId}-statusGreen"]`);
						var statusOrangeNode = cy.$(`node[name="${nodeId}-statusOrange"]`);
						var statusRedNode = cy.$(`node[name="${nodeId}-statusRed"]`);


						if (statusGreenNode.length === 0 || statusRedNode.length === 0) {
{{rawJSComment "							// If status nodes are not found, skip this node"}}
							return;
						}

{{rawJSComment "						// Update positions of status nodes relative to the node"}}
						var nodePosition = node.position();
						var offset = { x: -4, y: -10 };
						var statusGreenNodePosition = { x: nodePosition.x + offset.x, y: nodePosition.y + offset.y };
						var statusRedNodePosition = { x: nodePosition.x + offset.x, y: nodePosition.y + offset.y };

{{rawJSComment "						// Check if the nodeContainerStatusVisibility is true"}}
						if (nodeContainerStatusVisibility) {
{{rawJSComment "							// Check if the containerNodeName includes nodeId and containerNodeStatus includes 'healthy'"}}
							if (containerNodeName.includes(nodeId) && (containerNodeStatus.includes("Up") || containerNodeStatus.includes("healthy"))) {
								statusGreenNode.show();
								statusRedNode.hide();
								console.log("nodeContainerStatusVisibility: " + nodeContainerStatusVisibility);
							} else if (containerNodeName.includes(nodeId) && containerNodeStatus.includes("(health: starting)")) {
								statusGreenNode.hide();
								statusOrangeNode.show();
							} else if (containerNodeName.includes(nodeId) && containerNodeStatus.includes("Exited")) {
								statusGreenNode.hide();
								statusRedNode.show();
							}
						} else {
							statusGreenNode.hide();
							statusRedNode.hide();
						}

						statusGreenNode.position(statusGreenNodePosition);
						statusRedNode.position(statusRedNodePosition);
					});
				}

<<<<<<< HEAD
				function setNodeDataWithContainerAttribute(containerNodeName, status, state) {

					cy.nodes().forEach(function(node) {
						var nodeId = node.data('id');
						if (containerNodeName.includes(nodeId) ) {

							var containerDockerExtraAttributeData = {
								state: state,
								status: status,
							  };
							
							node.data('containerDockerExtraAttribute', containerDockerExtraAttributeData);
						}
					})
					
				}

=======
>>>>>>> f83b6f1 (commit with tag nightly-24.01.30b)
{{rawJSComment "				// ######################################################"}}
{{rawJSComment "				// End of JS Functions Event Handling section"}}
{{rawJSComment "				// End of JS Functions Event Handling section"}}
{{rawJSComment "				// ######################################################"}}


{{rawJSComment "				// ######################################################"}}
{{rawJSComment "				// Start of JS Generic Functions"}}
{{rawJSComment "				// Start of JS Generic Functions"}}
{{rawJSComment "				// ######################################################"}}

{{rawJSComment "				//- Helper Function for managed Panel-01 tabs"}}
				function showPanel01Tab(tabId) {
					hideAllTabs();
					document.getElementById(tabId).style.display = 'block';
				}

{{rawJSComment "				//- Function to get the default node style from cy-style.json"}}
				async function getDefaultNodeStyle(node) {
					try {
{{rawJSComment "						//- Fetch the cy-style.json file"}}
						const response = await fetch('cy-style.json');
{{rawJSComment "						//- Check if the response is successful (status code 200)"}}
						if (!response.ok) {
							throw new Error(`Failed to fetch cy-style.json (${response.status} ${response.statusText})`);
						}
{{rawJSComment "						//- Parse the JSON response"}}
						const styleData = await response.json();
{{rawJSComment "						//- Extract the default node style from the loaded JSON"}}
{{rawJSComment "						//- Adjust this based on your JSON structure"}}
						const defaultNodeStyle = styleData[0].style;
						return defaultNodeStyle;
					} catch (error) {
						console.error('Error loading cy-style.json:', error);
						appendMessage(`Error loading cy-style.json: ${error}`);
{{rawJSComment "						//- Return a default style in case of an error"}}
						return {
							'background-color': 'blue',
							'border-color': 'gray',
							'border-width': '1px'
						};
					}
				}

{{rawJSComment "				///-logMessagesPanel Function to add a click event listener to the copy button"}}
				const copyButton = document.getElementById('copyToClipboardButton');
				copyButton.className = 'button is-smallest-element';
				copyButton.addEventListener('click', copyToClipboard);

{{rawJSComment "				/// logMessagesPanel Function to copy textarea content to clipboard"}}
				function copyToClipboard() {
					const textarea = document.getElementById('notificationTextarea');
					textarea.select();
					document.execCommand('copy');
				}

{{rawJSComment "				///-logMessagesPanel Function to add a click event listener to the close button"}}
				const panel02CloseButton = document.getElementById('panel02CloseButton');
				panel02CloseButton.className = 'button is-smallest-element';

				panel02CloseButton.addEventListener('click', () => {
					panelId = document.getElementById('Panel-02');
					closePanelEvent(event, panelId)
				});

				function closePanelEvent(event, panel) {
					panel.style.display = 'block'
					console.log(panel.style.display)
					panel.style.display = 'none'
				}

			

				function createModal(modalId, modalContent) {
{{rawJSComment "					// Create the modal"}}
					const htmlContent = `
							<div id="${modalId}" class="modal">
								<div id="${modalId}-modalBackgroundId" class="modal-background"></div>
									${modalContent}
							</div>
							`;

					const modalDiv = document.createElement('div');
					modalDiv.innerHTML = htmlContent;
					modalDiv.id = 'modalDivExportViewport';

					document.body.appendChild(modalDiv);
					const modalBackground = document.getElementById(`${modalId}-modalBackgroundId`);

					modalBackground.addEventListener('click', function() {
						const modal = modalBackground.parentNode
						modal.classList.remove('is-active');
					});

					
				}

				function showModalCaptureViewport(modalId) {
					const modalContentSaveViewport = ` 	
									<div class="modal-content" style="max-width:300px;">
										<div class="box px-1 pb-1">
											<div class="column is-flex is-justify-content-center ">
													<i class="icon fas fa-camera  is-large"></i>
											</div>
											<div class="column">
												<div class="content py-0 px-5">
													<p class="has-text-centered is-size-6 has-text-weight-bold py-0 mb-2">Select file type</p>
													<p class="has-text-centered is-size-7 has-text-weight-normal">Choose one or multiple types you want to export</p>
												</div>
											</div>
											<div class="column px-5">
												<div class="control is-flex is-flex-direction-column">
													<div class="column py-2">
														<label class="checkbox is-size-7">
														<input type="checkbox"  name="checkboxSaveViewPort" value="option01">
														PNG
														</label>
													</div>
													<div class="column py-2">
														<label class="checkbox is-size-7">
														<input type="checkbox" name="checkboxSaveViewPort" value="option02">
														Draw.IO
														</label>
													</div>
												</div>
											</div>
											<div class="column p-0 pb-3 is-flex is-flex-direction-column is-flex-grow-3" >
												<div class="column" style="background-color: white">
													<button id="performActionButton" class="button button-modal is-small is-link is-fullwidth">Continue</button>
												</div>
											</div>
										</div>
									</div>
									 `
					
{{rawJSComment "					// Instantiate modal "}}
					createModal("modalSaveViewport", modalContentSaveViewport)


{{rawJSComment "					// create event listener"}}
					const performActionButton = document.getElementById("performActionButton");
					performActionButton.addEventListener("click", function() {
						const checkboxName = "checkboxSaveViewPort"; 
						const checkboxes = document.querySelectorAll(`input[type="checkbox"][name="${checkboxName}"]`);
						const selectedOptions = [];
						
						checkboxes.forEach(function(checkbox) {
							if (checkbox.checked) {
								selectedOptions.push(checkbox.value);
							}
						});
						
						if (selectedOptions.length === 0) {
							bulmaToast.toast({
								message: `Hey there, please pick at least one option.😊👌`,
								type: 'is-warning is-light is-size-6 p-3',
								duration: 4000,
								position: "top-center",
								closeOnClick: true,
							})
						} else {
{{rawJSComment "							// Perform your action based on the selected options"}}
							if (selectedOptions.join(", ") == 'option01') { 
								captureAndSaveViewportAsPng(cy)
								modal.classList.remove('is-active');

							} else if (selectedOptions.join(", ") == 'option02') { 
								captureAndSaveViewportAsDrawIo(cy)
								modal.classList.remove('is-active');

							} else if (selectedOptions.join(", ") == 'option01, option02') { 
								captureAndSaveViewportAsPng(cy)
								sleep(5000)
								captureAndSaveViewportAsDrawIo(cy)
								modal.classList.remove('is-active');
							}
						}
					});
					
{{rawJSComment "					// show modal"}}
					modal = document.getElementById(modalId);
					modal.classList.add('is-active');
				}
				



{{rawJSComment "				// ######################################################"}}
{{rawJSComment "				// End of JS Generic Functions section"}}
{{rawJSComment "				// End of JS Generic Functions section"}}
{{rawJSComment "				// ######################################################"}}


			}); 

{{rawJSComment "			// aarafat-tag:"}}
{{rawJSComment "			//// reworked the Log Message panel to be dynamicaly created"}}
{{rawJSComment "			//// create about panel"}}
{{rawJSComment "			//// create clab client download panel"}}
			function logMessages(event) {
				removeElementById("Panel-03");
				panel = document.getElementById('Panel-02');
				showPanelEvent(event, panel)
			}

			function showPanelEvent(event, panel) {
				panel.style.display = 'none'
				console.log(panel.style.display)
				panel.style.display = 'block'
			}

{{rawJSComment "			// Function to remove an element by its id"}}
			function removeElementById(id) {
				const elementToRemove = document.getElementById(id);
				console.log(elementToRemove)
				if (elementToRemove) {
					elementToRemove.remove();
				}
			}


{{rawJSComment "			// Call createContentPanel with the panel ID and an array of tab content functions"}}
{{rawJSComment "			// The Tab name will be auto generate by the tabFunction names, ie: funtion name: createNetworkExplorerTab --> tab name: NetworkExplorer"}}
			function createContentPanel(panelId, tabContentFns, tabContentFnsArg, panelHeadingText) {
				appendMessage(`"createContentPanel reach:`)

				const tabNames = tabContentFns.map(fn => fn.name);

				const panel = document.createElement('div');
				panel.className = 'panel is-link';
				panel.id = panelId;
				panel.style.display = 'block';

				const panelHeading = document.createElement('p');
				panelHeading.className = 'panel-heading is-size-7';
				panelHeading.textContent = panelHeadingText;

				const panelTabs = document.createElement('p');
				panelTabs.className = 'panel-tabs';

				const tabContainers = [];

{{rawJSComment "				// Check if the tabContentFns have more than 1 element"}}
				if (tabContentFns.length != 1) {
					for (let i = 0; i < tabNames.length; i++) {
						const name = tabNames[i];
						const tab = document.createElement('a');
						tab.className = 'toggle-Panel01-tab is-smallish has-text-weight-medium';
						tab.setAttribute('data-target', `${panelId}-Tab-${name}-Container`);
						tab.id = `${panelId}-Tab-${name}-Button`;
						tab.textContent = name.replace(/^create|Tab$/g, '');

						panelTabs.appendChild(tab);

						const tabContainer = document.createElement('div');
						tabContainer.className = 'panel-tabContainer';
						tabContainer.id = `${panelId}-Tab-${name}-Container`;

						tabContainers.push(tabContainer);

{{rawJSComment "						// Generate tab content using the provided function from tabContentFns"}}
						if (tabContentFns[i] && typeof tabContentFns[i] === 'function') {
							const tabContent = tabContentFns[i]();
							tabContainer.appendChild(tabContent);
						}
						panel.appendChild(panelHeading);
						panel.appendChild(panelTabs);
					}

				} else {
					const tabContainer = document.createElement('div');
					tabContainer.className = 'panel-tabContainer';
					tabContainer.id = `${panelId}-Tab-${name}-Container`;
					tabContainers.push(tabContainer);

{{rawJSComment "					// Generate tab content using the provided function from tabContentFns"}}
					if (tabContentFns[0] && typeof tabContentFns[0] === 'function') {
						const tabContent = tabContentFns[0](tabContentFnsArg, panelHeadingText);
						console.log("tabContentFnsArg")

						console.log(tabContentFnsArg)
						panel.appendChild(panelHeading);
						panel.appendChild(tabContent);
					}
				}

{{rawJSComment "				// Check if the tabContentFns have more than 1 element"}}
				if (tabContentFns.length != 1) {
{{rawJSComment "					// initial hide all tab and only opent the first tab"}}
					for (const tabContainer of tabContainers) {
						tabContainer.style.display = 'none';
						panel.appendChild(tabContainer);
					}
					tabContainers[0].style.display = 'block';
				}

				document.body.appendChild(panel);

				const toggleButtons = document.querySelectorAll('.toggle-Panel01-tab');

				toggleButtons.forEach(tab => {
					tab.addEventListener('click', () => {
						const targetTabId = tab.getAttribute('data-target');
						const selectedTabContainer = document.getElementById(targetTabId);

{{rawJSComment "						// Hide all tab containers"}}
						tabContainers.forEach(container => {
							container.style.display = 'none';
						});

{{rawJSComment "						// Show the selected tab container"}}
						selectedTabContainer.style.display = 'block';

						console.log(`Panel-${targetTabId} is displayed.`);
						appendMessage(`Panel-${targetTabId} is displayed.`);
					});
				});
			}

{{rawJSComment "			// logMessagesPanel manager"}}
{{rawJSComment "			///-logMessagesPanel Function to append message function"}}
			function appendMessage(message) {
{{rawJSComment "				// const textarea = document.getElementById('notificationTextarea');"}}
				const textarea = document.getElementById('notificationTextarea');

{{rawJSComment "				// Get the current date and time"}}
				const timestamp = new Date().toLocaleString();

				textarea.value += `[${timestamp}] ${message}\n`;
				textarea.scrollTop = textarea.scrollHeight;
			}

			function createPanelBlockContainer(tabContainerId) {
{{rawJSComment "				// this is helper function to create PanelBlock-Container"}}
				const panelBlock = document.createElement('div');
				panelBlock.id = `panelBlock-${tabContainerId}`
				panelBlock.className = 'panel-block py-2';

				const divPanelBlock = document.createElement('div');
				divPanelBlock.id = `${panelBlock.id}-divPanelBlock`
				divPanelBlock.className = 'column p-0';

				return {
					panelBlock: panelBlock,
					divPanelBlock: divPanelBlock,
				}
			}

			function createPanelBlockForm(PanelColumnsConfig, panelBlock, divPanelBlock, cy) { 
{{rawJSComment "				// This is helper function to create PanelBlock-Form-Content"}}
{{rawJSComment "				// Usage: "}}
{{rawJSComment "				// // Panel Block 01"}}
{{rawJSComment "				// // Start of mandatory panelContent containercontainer"}}
{{rawJSComment "				// const panelBlock01 = document.createElement('div');"}}
{{rawJSComment "				// panelBlock01.id = `panelBlock01-${modifiedHeaderText}`"}}
{{rawJSComment "				// panelBlock01.className = 'panel-block p-0';"}}

{{rawJSComment "				// const divPanelBlock01 = document.createElement('div');"}}
{{rawJSComment "				// divPanelBlock01.id = `${panelBlock01.id}-divPanelBlock01-`"}}
{{rawJSComment "				// divPanelBlock01.className = 'column ';"}}
{{rawJSComment "				// // End of mandatory panelContent containercontainer"}}

{{rawJSComment "				// const Panel01ColumnsConfig = ["}}
{{rawJSComment "				// 	{ idSuffix: 'labelNodeName', columnLabelTextContent: 'Node Name', columnLabelClass: 'column is-4 p-1', columnInputType: 'field', columnInputContent: node.data('name'), 						"}}
{{rawJSComment "				// 		addonsContent: ["}}
{{rawJSComment "				// 		{"}}
{{rawJSComment "				// 			name: 'blue',"}}
{{rawJSComment "				// 			iconClass: 'fas fa-terminal'"}}
{{rawJSComment "				// 		},"}}
{{rawJSComment "				// 		{"}}
{{rawJSComment "				// 			name: 'green',"}}
{{rawJSComment "				// 			iconClass: 'fas fa-copy'"}}
{{rawJSComment "				// 		}]},"}}
{{rawJSComment "				// 	{ idSuffix: 'labelKind', columnLabelTextContent: 'Kind', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').kind },"}}
{{rawJSComment "				// 	{ idSuffix: 'labelImage', columnLabelTextContent: 'Image', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').image },"}}
{{rawJSComment "				// 	{ idSuffix: 'labelManagementIPv4', columnLabelTextContent: 'Management IPv4', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').mgmtIpv4Addresss },"}}
{{rawJSComment "				// 	{ idSuffix: 'labelManagement IPv6', columnLabelTextContent: 'Management IPv6', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').mgmtIpv6Addresss },"}}
{{rawJSComment "				// 	{ idSuffix: 'labelFqdn', columnLabelTextContent: 'FQDN', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').fqdn },"}}
{{rawJSComment "				// 	{ idSuffix: 'labelGroup', columnLabelTextContent: 'Group', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('extraData').group },"}}
{{rawJSComment "				// 	{ idSuffix: 'labeltopoViewerRole', columnLabelTextContent: 'Topoviewer Role', columnLabelClass: 'column is-4 p-1', columnInputType: 'label', columnInputContent: node.data('topoViewerRole') },	"}}
{{rawJSComment "				//  { idSuffix: 'labelFindRouteSource', columnLabelTextContent: '', columnLabelClass: 'column is-0 p-0', columnInputType: 'field', columnInputContent: '', columnInputPlaceholder: 'name', columnInputAttribute: 'enabled', columnInputIsInvisible: 'yes',"}}
{{rawJSComment "				//  	addonsContent: []"}}
{{rawJSComment "				//  }				"}}
<<<<<<< HEAD
{{rawJSComment "				//  { idSuffix: 'labellinkImpairmentManagerExec', columnLabelTextContent: 'Link Impairment', columnLabelClass: 'column is-4 p-1', columnInputType: 'field', columnInputContent: 'Apply', columntInputAttribute: 'enabled', // columntInputAttribute default is disabled"}}
=======
{{rawJSComment "				//  { idSuffix: 'labellinkImpairmentSsh', columnLabelTextContent: 'Link Impairment', columnLabelClass: 'column is-4 p-1', columnInputType: 'field', columnInputContent: 'Apply', columntInputAttribute: 'enabled', // columntInputAttribute default is disabled"}}
>>>>>>> f83b6f1 (commit with tag nightly-24.01.30b)
{{rawJSComment "				//  addonsContent: ["}}
{{rawJSComment "				//  	{"}}
{{rawJSComment "				//  		name: 'blue',"}}
{{rawJSComment "				//  		iconClass: 'fas fa-terminal'"}}
{{rawJSComment "				//  	},"}}
{{rawJSComment "				//  	{"}}
{{rawJSComment "				//  		name: 'green',"}}
{{rawJSComment "				//  		iconClass: 'fas fa-copy'"}}
{{rawJSComment "				//  	}]},"}}
{{rawJSComment "				//  ];"}}
{{rawJSComment "				// ];"}}

				PanelColumnsConfig.forEach(config => {
{{rawJSComment "					// Create columnContainer"}}
					const columnContainer = document.createElement('div');
					columnContainer.id = `${divPanelBlock.id}-columnContainer${config.idSuffix}`
					columnContainer.className = 'column my-auto is-11 pr-1';  
 
{{rawJSComment "					// Create panelContent"}}
					const panelContent = document.createElement('div');
					panelContent.id = `${columnContainer.id}-panelContent${config.idSuffix}`
					panelContent.className = 'panel-content';

{{rawJSComment "					// Create columnsPanelContent container"}}
					const columnsPanelContent = document.createElement('div');
					columnsPanelContent.className = 'columns py-auto';
					columnsPanelContent.id = `${panelContent.id}-columnsPanelContent${config.idSuffix}`

{{rawJSComment "					// Create labelColumn column"}}
					const labelColumn = document.createElement('div');
					labelColumn.id = `${columnsPanelContent.id}-labelColumn${config.idSuffix}`
					labelColumn.className = `${config.columnLabelClass}`;

					const labelElement = document.createElement('label');
					if (typeof config.columnLabelElementClass !== 'undefined' && config.columnLabelElementClass !== null && config.columnLabelElementClass !== '') {
						labelElement.className = config.columnLabelElementClass;
					  } else {
						labelElement.className = 'label is-size-7 has-text-right has-text-weight-medium px-auto'; 
					  }
					  
					labelElement.textContent = config.columnLabelTextContent;
					labelElement.id = `${labelColumn.id}-labelElement${config.idSuffix}`

					labelColumn.appendChild(labelElement);
					columnsPanelContent.appendChild(labelColumn);

{{rawJSComment "					// Create inputColumn column"}}
					if (config.columnInputType == 'label') {
						const inputColumn = document.createElement('div');
						inputColumn.className = `column is-8 p-1 pl-3`;
						inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`

						const inputElement = document.createElement('label');
						inputElement.className = `label is-size-7 has-text-left link-impairment-widht has-text-weight-normal mr-0 is-max-content`;
						inputElement.id = `${inputColumn.id}-label${config.idSuffix}`
						inputElement.textContent = config.columnInputContent;

						inputColumn.appendChild(inputElement);
						columnsPanelContent.appendChild(inputColumn);

					} else if (config.columnInputType == 'button') {
						const inputColumn = document.createElement('div');
						if (typeof config.columnInputClass !== 'undefined' && config.columnInputClass !== null && config.columnInputClass !== '') {
							inputColumn.className = config.columnInputClass;
						  } else {
							inputColumn.className = `column is-8 p-1 pl-3`;
						}
						inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`

						const inputElement = document.createElement('button');
						if (typeof config.columnInputElementClass !== 'undefined' && config.columnInputElementClass !== null && config.columnInputElementClass !== '') {
							inputElement.className = config.columnInputElementClass;
						  } else {
							inputElement.className = `button is-size-7 is-smallest-element is-justify-content-flex-end`;
						}
						
						inputElement.id = `${inputColumn.id}-inputElement${config.idSuffix}`
						inputElement.textContent = config.columnInputContent;
						inputElement.style.width = '50'

						inputElementIconSpan = document.createElement('span');
						inputElementIconSpan.id = `${inputElement.id}-inputElementIconSpan${config.idSuffix}`
						inputElementIconSpan.className = config.columnInputContentIconSpanClass;

						inputElementIconInlineElement = document.createElement('i');
						inputElementIconInlineElement.id = `${inputElementIconSpan.id}-inputElementIconInlineElement${config.idSuffix}`
						inputElementIconInlineElement.className = config.columnInputContentIconInlineElementClass;

						inputElementIconSpanButtonLabel = document.createElement('span');
						inputElementIconSpanButtonLabel.id = `${inputElement.id}-inputElementIconSpanButtonLabel${config.idSuffix}`

						inputElementIconSpan.appendChild(inputElementIconInlineElement)
						inputElement.appendChild(inputElementIconSpanButtonLabel)
						inputElement.appendChild(inputElementIconSpan)

						inputElement.addEventListener('click', function() {
							console.log ('config.columnInputCallOutFuntionName: ', config.columnInputCallOutFuntionName)
							eval(config.columnInputCallOutFuntionName + `(cy)`);
						});

						inputColumn.appendChild(inputElement);
						columnsPanelContent.appendChild(inputColumn);

					} else if (config.columnInputType == 'slider') {
						const inputColumn = document.createElement('div');
						inputColumn.className = `column is-5 p-1 pl-2`;
						inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`

						const inputElement = document.createElement('input');
						inputElement.className = `slider custom-slider`;
						inputElement.style.width = `100px`;

						inputElement.step= '1';
						inputElement.min= '1';
						inputElement.max= '1000';
						inputElement.value= '50';
						inputElement.type= 'range'
						
						inputElement.id = `${inputColumn.id}-label${config.idSuffix}`
						inputElement.textContent = config.columnInputContent;

						inputColumn.appendChild(inputElement);
						columnsPanelContent.appendChild(inputColumn);

					} else if (config.columnInputType == 'input') {
						const inputColumn = document.createElement('div');
						if (typeof config.columnInputClass !== 'undefined' && config.columnInputClass !== null && config.columnInputClass !== '') {
							inputColumn.className = config.columnInputClass;
						  } else {
							inputColumn.className = `column is-8 p-1 pl-3`;
						}
{{rawJSComment "						// inputColumn.className = `column is-8 p-1 pl-3`;"}}
						inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`
						const inputElement = document.createElement('input');
						if (typeof config.columnInputElementClass !== 'undefined' && config.columnInputElementClass !== null && config.columnInputElementClass !== '') {
							inputElement.className = config.columnInputElementClass;
						  } else {
							inputElement.className = `input is-size-7 has-text-left link-impairment-widht has-text-weight-normal is-smallest-element`;
						}
{{rawJSComment "						// inputElement.className = `input is-size-7 has-text-left link-impairment-widht has-text-weight-normal is-smallest-element`;"}}
						inputElement.id = `${inputColumn.id}-label${config.idSuffix}`
						inputElement.type = 'text'
						inputElement.value = config.columnInputContent
						inputElement.placeholder = config.columnInputPlaceholder

						inputColumn.appendChild(inputElement);
						columnsPanelContent.appendChild(inputColumn);

					} else if (config.columnInputType == 'field') {
						const inputColumn = document.createElement('div');
						inputColumn.className = `column is-8 p-1 pl-3`;
						inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`

						const inputElement = document.createElement('div');
						inputElement.className = `field has-addons`;
						inputElement.id = `${inputColumn.id}-label${config.idSuffix}`
						if (config.columnInputIsInvisible == 'yes'){
							inputElement.classList.add('is-invisible'); 
						}

{{rawJSComment "						// create addon input"}}
						const controlId = `${inputElement.id}-control`;
						const control = document.createElement('p');
						control.className = 'control';
						control.id = controlId;
						const input = document.createElement('input');
						input.id = `${controlId}-input`;

						if (config.columnInputAttribute == 'enabled') {
							input.setAttribute('enabled', '')
						} else {
							input.setAttribute('disabled', '')
						}

						input.className = `input is-size-7 has-text-left link-impairment-widht has-text-weight-normal is-smallest-element`;
						input.value = config.columnInputContent;
						input.placeholder = config.columnInputPlaceholder

						control.appendChild(input);
						inputElement.appendChild(control);

{{rawJSComment "						// create addon button"}}
						addons = config.addonsContent

						for (let i = 0; i < addons.length; i++) {
							const addon = addons[i];
							const controlId = `${inputElement.id}-control${addon.name}`;
							const control = document.createElement('p');
							control.className = 'control';
							control.id = controlId;

{{rawJSComment "							// Create a button element"}}
							const button = document.createElement('a');
							button.id = `${controlId}-button${addon.name}`;
							button.className = `button is-outlined px-3 is-smallest-element is-${addon.name === 'blue' ? 'link' : 'success'}`;

							if (addon.hrefFunction == 'link') {
								button.href = addon.hrefLink;
								button.target = '_blank';

							}
							else if (addon.hrefFunction == 'eventHandlerLink') {
								button.addEventListener('click', function() {
									console.log ('addon.callOutFuntionName', addon.callOutFuntionName)
									eval(addon.callOutFuntionName + `(cy)`);
								});

							} else if (addon.hrefFunction == 'copy') {
								button.href = addon.hrefLink;
								button.target = '_blank';
								button.addEventListener('click', function(event) {
{{rawJSComment "									// Prevent the default behavior of the anchor element (opening a new tab)"}}
									urlToCopy = addon.hrefLink;
									event.preventDefault();

{{rawJSComment "									// Create a temporary input element to copy the URL to the clipboard"}}
									const tempInput = document.createElement('input');
									tempInput.value = urlToCopy;
									document.body.appendChild(tempInput);
									tempInput.select();
									document.execCommand('copy');
									document.body.removeChild(tempInput);

{{rawJSComment "									// Provide user feedback (e.g., alert or toast) that the URL has been copied"}}
									bulmaToast.toast({
										message: `SSH command is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`,
										type: 'is-warning is-size-6 p-3',
										duration: 4000,
										position: "top-center",
										closeOnClick: true,
									})
									appendMessage(`SSH command is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`)
								});
							} 

{{rawJSComment "							// Create a icon element"}}
							const icon = document.createElement('span');
							icon.className = 'icon is-small';
							const iconElement = document.createElement('i');
							iconElement.className = addon.iconClass;
							icon.appendChild(iconElement);
							button.appendChild(icon);

{{rawJSComment "							// Create a hover text paragraph element"}}
							const hoverText = document.querySelector('.hover-text');

{{rawJSComment "							// Add event listeners for hover behavior"}}
							button.addEventListener('mouseover', () => {

{{rawJSComment "								// Calculate the position for the hover text"}}
								const rect = button.getBoundingClientRect();
								const top = rect.top - hoverText.offsetHeight + 25;
								const left = rect.left + (button.offsetWidth - hoverText.offsetWidth) / 2;

{{rawJSComment "								// Set the position and show the hover text"}}
								hoverText.style.top = `${top}px`;
								hoverText.style.left = `${left}px`;
								hoverText.classList.remove('is-hidden');
								hoverText.textContent = addon.hoverMessage;
							});
							button.addEventListener('mouseout', () => {
{{rawJSComment "								// Hide the hover text"}}
								hoverText.classList.add('is-hidden');
							});
							control.appendChild(button);
							inputElement.appendChild(control);
						}
						inputColumn.appendChild(inputElement);
						columnsPanelContent.appendChild(inputColumn);
					}

{{rawJSComment "					// columnInputType buttonGroupHandle"}}
					else if (config.columnInputType == 'buttonGroup') {
					const inputColumn = document.createElement('div');
					inputColumn.className = `column is-8 p-1 pl-0`;
					inputColumn.id = `${labelColumn.id}-inputColumn${config.idSuffix}`

					const inputElement = document.createElement('div');
					inputElement.className = `field has-addons`;
					inputElement.id = `${inputColumn.id}-label${config.idSuffix}`
					if (config.columnInputIsInvisible == 'yes'){
						inputElement.classList.add('is-invisible'); 
					}

{{rawJSComment "					// create addon button"}}
					addons = config.addonsContent

					for (let i = 0; i < addons.length; i++) {
						const addon = addons[i];
						const controlId = `${inputElement.id}-control${addon.name}`;
						const control = document.createElement('p');
						control.className = 'control';
						control.id = controlId;

{{rawJSComment "						// Create a button element"}}
						const button = document.createElement('a');
						button.id = `${controlId}-button${addon.name}`;
						button.className = `button is-outlined px-3 is-smallest-element is-${addon.name === 'blue' ? 'link' : 'success'}`;

						if (addon.hrefFunction == 'link') {
							button.href = addon.hrefLink;
							button.target = '_blank';

						}
						else if (addon.hrefFunction == 'eventHandlerLink') {
							button.addEventListener('click', function() {
								console.log ('addon.callOutFuntionName', addon.callOutFuntionName)
								eval(addon.callOutFuntionName + `(cy)`);
							});

						} else if (addon.hrefFunction == 'copy') {
							button.href = addon.hrefLink;
							button.target = '_blank';
							button.addEventListener('click', function(event) {
{{rawJSComment "								// Prevent the default behavior of the anchor element (opening a new tab)"}}
								urlToCopy = addon.hrefLink;
								event.preventDefault();

{{rawJSComment "								// Create a temporary input element to copy the URL to the clipboard"}}
								const tempInput = document.createElement('input');
								tempInput.value = urlToCopy;
								document.body.appendChild(tempInput);
								tempInput.select();
								document.execCommand('copy');
								document.body.removeChild(tempInput);

{{rawJSComment "								// Provide user feedback (e.g., alert or toast) that the URL has been copied"}}
								bulmaToast.toast({
									message: `SSH command is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`,
									type: 'is-warning is-size-6 p-3',
									duration: 4000,
									position: "top-center",
									closeOnClick: true,
								})
								appendMessage(`SSH command is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`)
							});
						}
						else if (addon.hrefFunction == 'linkImpairmentManagerExec') {
							if (addon.hrefFunctionArg == 'start-source') {
								button.classList.add('impairment-start-ssh')
								button.addEventListener('click', () => {
									console.log('impairmentStartSshButton is clicked')
									linkImpairmentManagerExec('start-source', addon.hrefLink, addon.hrefLink02)
								});
							}
							else if (addon.hrefFunctionArg == 'stop-source') {
								button.classList.add('impairment-stop-ssh')
								button.addEventListener('click', () => {
									console.log('impairmentStopSshButton is clicked')
									linkImpairmentManagerExec('stop-source', addon.hrefLink, addon.hrefLink02)
								});
							}
							else if (addon.hrefFunctionArg == 'start-target') {
								button.classList.add('impairment-stop-ssh')
								button.addEventListener('click', () => {
									console.log('impairmentStopSshButton is clicked')
									linkImpairmentManagerExec('start-target', addon.hrefLink, addon.hrefLink02)
								});
							}
							else if (addon.hrefFunctionArg == 'stop-target') {
								button.classList.add('impairment-stop-ssh')
								button.addEventListener('click', () => {
									console.log('impairmentStopSshButton is clicked')
									linkImpairmentManagerExec('stop-target', addon.hrefLink, addon.hrefLink02)
								});
							}
 						}		 
						else if (addon.hrefFunction == 'linkImpairmentCopy') {
							if (addon.hrefFunctionArg == 'start-source') {
								button.classList.add('impairment-start-copy')
								button.addEventListener('click', () => {
									console.log('impairmentStartCopyButton is clicked')
									linkImpairmentManagerCopy('start-source', addon.hrefLink)
								});
							}
							else if (addon.hrefFunctionArg == 'stop-source') {
								button.classList.add('impairment-stop-copy')
								button.addEventListener('click', () => {
									console.log('impairmentStopCopyButton is clicked')
									linkImpairmentManagerCopy('stop-source', addon.hrefLink)
								});
							}
							else if (addon.hrefFunctionArg == 'start-target') {
								button.classList.add('impairment-stop-copy')
								button.addEventListener('click', () => {
									console.log('impairmentStopCopyButton is clicked')
									linkImpairmentManagerCopy('start-target', addon.hrefLink)
								});
							}
							else if (addon.hrefFunctionArg == 'stop-target') {
								button.classList.add('impairment-stop-copy')
								button.addEventListener('click', () => {
									console.log('impairmentStopCopyButton is clicked')
									linkImpairmentManagerCopy('stop-target', addon.hrefLink)
								});
							}
						}

{{rawJSComment "						// Create a icon element"}}
						const icon = document.createElement('span');
						icon.className = 'icon is-small';
						const iconElement = document.createElement('i');
						iconElement.className = addon.iconClass;
						icon.appendChild(iconElement);
						button.appendChild(icon);

{{rawJSComment "						// Create a hover text paragraph element"}}
						const hoverText = document.querySelector('.hover-text');

{{rawJSComment "						// Add event listeners for hover behavior"}}
						button.addEventListener('mouseover', () => {

{{rawJSComment "							// Calculate the position for the hover text"}}
							const rect = button.getBoundingClientRect();
							const top = rect.top - hoverText.offsetHeight + 25;
							const left = rect.left + (button.offsetWidth - hoverText.offsetWidth) / 2;

{{rawJSComment "							// Set the position and show the hover text"}}
							hoverText.style.top = `${top}px`;
							hoverText.style.left = `${left}px`;
							hoverText.classList.remove('is-hidden');
							hoverText.textContent = addon.hoverMessage;
						});
						button.addEventListener('mouseout', () => {
{{rawJSComment "							// Hide the hover text"}}
							hoverText.classList.add('is-hidden');
						});
						control.appendChild(button);
						inputElement.appendChild(control);
					}
					inputColumn.appendChild(inputElement);
					columnsPanelContent.appendChild(inputColumn);
				}


					panelContent.appendChild(columnsPanelContent);
					columnContainer.appendChild(panelContent)
					divPanelBlock.appendChild(columnContainer)
				});
			}

			function showPanelWelcome() {
				tabContentFns = [createWelcomeTab]
				tabContentFnsArg = []
				createContentPanel('Panel-03', tabContentFns, tabContentFnsArg, 'Introduction')

{{rawJSComment "				// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');"}}
			}

			function createWelcomeTab(panelHeadingText) {
				const modifiedHeaderText = panelHeadingText;

{{rawJSComment "				// Create the tab-container "}}
				const tabContainer = document.createElement('div');
				tabContainer.id = `tabContainer-${modifiedHeaderText}`
				tabContainer.className = 'panel-tabContainer';

{{rawJSComment "				// Panel Block 01"}}
				panelBlockContainer = createPanelBlockContainer(tabContainer.id)
				panelBlock01 = panelBlockContainer.panelBlock
				divPanelBlock01 = panelBlockContainer.divPanelBlock

{{rawJSComment "				// Define the HTML content as a string"}}
				var topoViewerVersion ='nightly'
				const htmlContent = `
				<div class="content is-small pb-2">
					<h6>Welcome to TopoViewer!</h6>
					
					<p>
						TopoViewer is a powerful network topology visualization tool designed to help you easily manage and monitor your network infrastructure. Whether you're a network administrator, engineer, or simply curious about your network, TopoViewer has you covered.<br>
					</p>

					<p>
						Designed and developed by <strong><a href="https://www.linkedin.com/in/asadarafat/">Asad Arafat</a></strong> <br>
						GUI Framework by <strong><a href="https://www.linkedin.com/in/siva19susi//">Siva Sivakumar</a></strong> <br>
					</p>

					<p>Key Features: </p>
					<ul>
						<li>Visualize your network topology with ease.</li>
						<li>View detailed attributes of nodes and links by clicking on them.</li>
						<li>Analyze network traffic using Wireshark integration.</li>
						<li>Apply network impairments to simulate real-world conditions.</li>
					</ul>

					<p>
						Getting Started: 
					</p>
					<ul>
						<li>Click on nodes and links to explore your network.</li>
						<li>Use the settings menu to show/hide link endpoint labels.</li>
						<li>Analyze network traffic using Wireshark integration.</li>
						<li>For advanced network analysis, download our client package.</li>
						<li>Visit our GitHub repository for more details <a href="https/github.com/asadarafat/topoViewer">https/github.com/asadarafat/topoViewer</a>.</li>
					</ul>

					<p>
						We hope you find TopoViewer a valuable tool for your network management needs. If you have any questions or feedback, please don't hesitate to reach out to us.
					</p>

				</div>
				`;

{{rawJSComment "				// Create a div element and set its innerHTML to the defined HTML content"}}
				const contentDiv = document.createElement('div');
				contentDiv.className = 'px-2';
				contentDiv.innerHTML = htmlContent;
				contentDiv.style.maxHeight = '280px';
				contentDiv.style.overflowY = 'auto';

				divPanelBlock01.appendChild(contentDiv)
{{rawJSComment "				// append divPanelBlock01 --> panelBlock01 --> tabContainer"}}
				panelBlock01.append(divPanelBlock01)

				tabContainer.appendChild(panelBlock01)

				return tabContainer;
			}
		
			async function showPanelAbout() {
				const versionUrl = `${location.protocol}//${location.host}/version`;			
				try {
					const response = await fetch(versionUrl);
			
					if (!response.ok) {
						throw new Error('Network response was not OK');
					}
			
					const versionParsedText = await response.text();
					console.log('Fetched text:', versionParsedText);

					removeElementById("Panel-03");
					tabContentFns = [createAboutTab]
					tabContentFnsArg = [versionParsedText]
					createContentPanel('Panel-03', tabContentFns, tabContentFnsArg[0], 'About')

				} catch (error) {
					console.error('Fetch error:', error);
					throw error; 
				}
			}
			
			function createAboutTab(versionParsedText, panelHeadingText) {
				const modifiedHeaderText = panelHeadingText;

{{rawJSComment "				// Create the tab-container "}}
				const tabContainer = document.createElement('div');
				tabContainer.id = `tabContainer-${modifiedHeaderText}`
				tabContainer.className = 'panel-tabContainer';

{{rawJSComment "				// Panel Block 01"}}
				panelBlockContainer = createPanelBlockContainer(tabContainer.id)
				panelBlock01 = panelBlockContainer.panelBlock
				divPanelBlock01 = panelBlockContainer.divPanelBlock

{{rawJSComment "				// Define the HTML content as a string"}}
				var topoViewerVersion = versionParsedText;
				const htmlContent = `
				<div class="content is-small pb-2">
					<h6>Version: ${topoViewerVersion}</h6>
					
					<p>
					Designed and developed by <strong><a href="https://www.linkedin.com/in/asadarafat/">Asad Arafat</a></strong> <br>
					GUI Framework by <strong><a href="https://www.linkedin.com/in/siva19susi//">Siva Sivakumar</a></strong> <br>
					</p>

					<p>Instruction: </p>
					<ul>
					<li>To view the attributes of a node or link, click on it.</li>
					<li>To show/hide link endpoint label, click on setting menu.</li>
					<li>To tap link with wireshark or to add impairment to link, please download client package.</li>
					<li>To see further details, please visit <a href="https/github.com/asadarafat/topoViewer">https/github.com/asadarafat/topoViewer</a>.</li>
					</ul>
					
				</div>
				`;

{{rawJSComment "				// Create a div element and set its innerHTML to the defined HTML content"}}
				const contentDiv = document.createElement('div');
				contentDiv.className = 'px-2';
				contentDiv.innerHTML = htmlContent;
				contentDiv.style.maxHeight = '280px';
				contentDiv.style.overflowY = 'auto';

				divPanelBlock01.appendChild(contentDiv)
{{rawJSComment "				// append divPanelBlock01 --> panelBlock01 --> tabContainer"}}
				panelBlock01.append(divPanelBlock01)
				tabContainer.appendChild(panelBlock01)

				return tabContainer;
			}

			function showPanelTopoViewerClient() {
				removeElementById("Panel-03");
				tabContentFns = [createTopoViewerClientTab]
				tabContentFnsArg = []
				createContentPanel('Panel-03', tabContentFns, tabContentFnsArg, 'TopoViewer Helper App')

{{rawJSComment "				// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');"}}
			}

			function createTopoViewerClientTab(panelHeadingText) {
				const modifiedHeaderText = panelHeadingText;

{{rawJSComment "				// Create the tab-container "}}
				const tabContainer = document.createElement('div');
				tabContainer.id = `tabContainer-${modifiedHeaderText}`
				tabContainer.className = 'panel-tabContainer';

{{rawJSComment "				// Panel Block 01"}}
				panelBlockContainer = createPanelBlockContainer(tabContainer.id)
				panelBlock01 = panelBlockContainer.panelBlock
				divPanelBlock01 = panelBlockContainer.divPanelBlock

{{rawJSComment "				// Define the HTML content as a string"}}

				url = location.host
				const hreWindows = `http://${url}/clab-client/clab-client-windows/ClabCapture.app.zip`
				const hrefMac = `http://${url}/clab-client/clab-client-mac/ClabCapture.app.zip`
				const htmlContent = `
				<div class="content is-small pb-2">
					<h6>Wireshark Capture</h6>
					<p>
						Please download the following helper app:
					</p>
					<ul>
						<li><a href="${hreWindows}">Windows version</a> </li>
						<li><a href="${hrefMac}">MAC version</a> </li>
					</ul>
					<p>
						TopoViewer offers a remote capture feature for intercepting ContainerLab node endpoints. 
						For the best experience, it's recommended to have both TopoViewer and its helper app installed on client-side. 
						With the TopoViewer helper app, you can effortlessly automate the launch of Wireshark's GUI. 
					</p>
					<p>
						Alternatively, if you don't have the helper app, you can simply copy and paste an SSH command to initiate Wireshark manually. 
						This setup provides flexibility in how you utilize this feature. <br>
					</p>
				</div>
				`;

{{rawJSComment "				// Create a div element and set its innerHTML to the defined HTML content"}}
				const contentDiv = document.createElement('div');
				contentDiv.className = 'px-2';
				contentDiv.innerHTML = htmlContent;
				contentDiv.style.maxHeight = '280px';
				contentDiv.style.overflowY = 'auto';

				divPanelBlock01.appendChild(contentDiv)
{{rawJSComment "				// append divPanelBlock01 --> panelBlock01 --> tabContainer"}}
				panelBlock01.append(divPanelBlock01)
				tabContainer.appendChild(panelBlock01)

				return tabContainer;
			}

			function showPanelDrawerLayout() {
				removeElementById("Panel-03");
				tabContentFns = [createDrawerLayoutTab]
				tabContentFnsArg = []
				createContentPanel('Panel-03', tabContentFns, tabContentFnsArg, 'TopoViewer Helper App')

{{rawJSComment "				// createContentPanel('Panel-01', tabContentFns, tabContentFnsArg[0], 'Node Properties');"}}
			}

			function createDrawerLayoutTab(panelHeadingText) {
				const modifiedHeaderText = panelHeadingText;

{{rawJSComment "				// Create the tab-container "}}
				const tabContainer = document.createElement('div');
				tabContainer.id = `tabContainer-${modifiedHeaderText}`
				tabContainer.className = 'panel-tabContainer';

{{rawJSComment "				// Panel Block 01"}}
				panelBlockContainer = createPanelBlockContainer(tabContainer.id)
				panelBlock01 = panelBlockContainer.panelBlock
				divPanelBlock01 = panelBlockContainer.divPanelBlock

{{rawJSComment "				// Define the HTML content as a string"}}

				url = location.host
				const hreWindows = `http://${url}/clab-client/clab-client-windows/ClabCapture.app.zip`
				const hrefMac = `http://${url}/clab-client/clab-client-mac/ClabCapture.app.zip`
				const htmlContent = `
				<div class="tabs is-boxed px-">
				    <ul>
				        <li class="is-active">
				            <a>
				                <span class="icon is-small"><i class="fas fa-image" aria-hidden="true"></i></span>
				                <span></span>
				            </a>
				        </li>
				        <li>
				            <a>
				                <span class="icon is-small px-0"><i class="fas fa-music" aria-hidden="true"></i></span>
				                <span></span>
				            </a>
				        </li>
				        <li>
				            <a>
				                <span class="icon is-small"><i class="fas fa-film" aria-hidden="true"></i></span>
				                <span></span>
				            </a>
				        </li>
				        <li>
				            <a>
				                <span class="icon is-small"><i class="far fa-file-alt" aria-hidden="true"></i></span>
				                <span></span>
				            </a>
				        </li>
				    </ul>
				</div>
				`;

{{rawJSComment "				// Create a div element and set its innerHTML to the defined HTML content"}}
				const contentDiv = document.createElement('div');
				contentDiv.className = 'px-2';
				contentDiv.innerHTML = htmlContent;
				contentDiv.style.maxHeight = '280px';
				contentDiv.style.overflowY = 'auto';

				divPanelBlock01.appendChild(contentDiv)
{{rawJSComment "				// append divPanelBlock01 --> panelBlock01 --> tabContainer"}}
				panelBlock01.append(divPanelBlock01)
				tabContainer.appendChild(panelBlock01)

				return tabContainer;
			}
			

{{rawJSComment "			// function zoomToFitDrawerl(cy) {"}}
{{rawJSComment "			// 	const initialZoom = cy.zoom();"}}
{{rawJSComment "			// 	appendMessage(`Bro, initial zoom level is '${initialZoom}'.`);"}}
{{rawJSComment "			// 	//- Fit all nodes possible with padding"}}
{{rawJSComment "			// 	cy.fit();"}}
{{rawJSComment "			// 	const currentZoom = cy.zoom();"}}
{{rawJSComment "			// 	appendMessage(`And now the zoom level is '${currentZoom}'.`);"}}
{{rawJSComment "			// }"}}

			function nodeFindDrawer(cy) {
{{rawJSComment "				//- Get a reference to your Cytoscape instance (assuming it's named 'cy')"}}
{{rawJSComment "				//- const cy = window.cy; //- Replace 'window.cy' with your actual Cytoscape instance"}}
{{rawJSComment "				//- Find the node with the specified name"}}
				const nodeName = document.getElementById('panelBlock-viewportButtons-buttonfindNode-divPanelBlock-columnContainerlabelFindNodeNodeName-panelContentlabelFindNodeNodeName-columnsPanelContentlabelFindNodeNodeName-labelColumnlabelFindNodeNodeName-inputColumnlabelFindNodeNodeName-labellabelFindNodeNodeName').value;

				const node = cy.$(`node[name = "${nodeName}"]`);
{{rawJSComment "				//- Check if the node exists"}}
				if (node.length > 0) {
{{rawJSComment "					// console"}}
					console.log("Info: " + "Sweet! Node \"" + nodeName + "\" is in the house.");
					appendMessage("Info: " + "Sweet! Node \"" + nodeName + "\" is in the house.");
{{rawJSComment "					//- Apply a highlight style to the node"}}
					node.style({
						'border-color': 'red',
						'border-width': '2px',
						'background-color': 'yellow'
					});
{{rawJSComment "					//- Zoom out on the node"}}
					cy.fit()
{{rawJSComment "					//- Zoom in on the node"}}
					cy.animate({
						zoom: {
							level: 5,
							position: {
								x: node.position('x'),
								y: node.position('y')
							},
							renderedPosition: {
								x: node.renderedPosition('x'),
								y: node.renderedPosition('y')
							}
						},
						duration: 1500
					});
				} else {
					console.error(`Bro, I couldn't find a node named "${nodeName}". Try another one.`);
					appendMessage(`Bro, I couldn't find a node named "${nodeName}". Try another one.`);

				}
			}
			
			function pathFinderDijkstraDrawer(cy) {
{{rawJSComment "				// Usage example:"}}
{{rawJSComment "				// highlightShortestPath('node-a', 'node-b'); // Replace with your source and target node IDs"}}
{{rawJSComment "				//- Function to get the default node style from cy-style.json"}}
{{rawJSComment "				//- weight: (edge) => 1, // You can adjust the weight function if needed"}}
{{rawJSComment "				//- weight: (edge) => edge.data('distance')"}}

				console.log('im triggered')

{{rawJSComment "				// Remove existing highlight from all edges"}}
				cy.edges().forEach(edge => {
					edge.removeClass('spf');
				});

{{rawJSComment "				// Get the node sourceNodeId from pathFinderSourceNodeInput and targetNodeId from pathFinderTargetNodeInput  "}}
				const sourceNodeId = document.getElementById('panelBlock-viewportButtons-buttonfindRoute-divPanelBlock-columnContainerlabelFindRouteSource-panelContentlabelFindRouteSource-columnsPanelContentlabelFindRouteSource-labelColumnlabelFindRouteSource-inputColumnlabelFindRouteSource-labellabelFindRouteSource').value;
				const targetNodeId = document.getElementById('panelBlock-viewportButtons-buttonfindRoute-divPanelBlock-columnContainerlabelFindRouteTarget-panelContentlabelFindRouteTarget-columnsPanelContentlabelFindRouteTarget-labelColumnlabelFindRouteTarget-inputColumnlabelFindRouteTarget-labellabelFindRouteTarget').value;

{{rawJSComment "				// Assuming you have 'cy' as your Cytoscape instance"}}
				const sourceNode = cy.$(`node[id="${sourceNodeId}"]`);
				const targetNode = cy.$(`node[id="${targetNodeId}"]`);

				console.log("Info: " + "Let's find the path from-" + sourceNodeId + "-to-" + targetNodeId + "!");
				appendMessage("Info: " + "Let's find the path from-" + sourceNodeId + "-to-" + targetNodeId + "!");

{{rawJSComment "				// Check if both nodes exist"}}
				if (sourceNode.length === 0 || targetNode.length === 0) {
					console.error(`Bro, couldn't find the source or target node you specified. Double-check the node names.`);
					appendMessage(`Bro, couldn't find the source or target node you specified. Double-check the node names.`);
					return;
				}

{{rawJSComment "				// Get the Dijkstra result with the shortest path"}}
				const dijkstraResult = cy.elements().dijkstra({
					root: sourceNode,
					weight: (edge) => 1,
{{rawJSComment "					// Use the custom weight attribute"}}
{{rawJSComment "					// weight: edge => edge.data('customWeight'),"}}

				});
{{rawJSComment "				// Get the shortest path from Dijkstra result"}}
				const shortestPathEdges = dijkstraResult.pathTo(targetNode);
				console.log(shortestPathEdges)

{{rawJSComment "				// Check if there is a valid path (shortestPathEdges is not empty)"}}
				if (shortestPathEdges.length > 1) {

{{rawJSComment "					// Highlight the shortest path"}}
					shortestPathEdges.forEach(edge => {
						edge.addClass('spf'); 
					});

{{rawJSComment "					//- Zoom out on the node"}}
					cy.fit()

{{rawJSComment "					//- Zoom in on the node"}}
					cy.animate({
						zoom: {
							level: 5,
							position: {
								x: sourceNode.position('x'),
								y: sourceNode.position('y')
							},
							renderedPosition: {
								x: sourceNode.renderedPosition('x'),
								y: sourceNode.renderedPosition('y')
							}
						},
						duration: 1500
					});
{{rawJSComment "					// throw log"}}
					console.log("Info: " + "Yo, check it out! Shorthest Path from-" + sourceNodeId + "-to-" + targetNodeId + " has been found.");
					appendMessage("Info: " + "Yo, check it out! Shorthest Path from-" + sourceNodeId + "-to-" + targetNodeId + " has been found, below is the path trace..");
					console.log(shortestPathEdges)

					shortestPathEdges.forEach(edge => {
						console.log('Edge ID:', edge.id());
						console.log('Source Node ID:', edge.source().id());
						console.log('Target Node ID:', edge.target().id());

						edgeId = edge.id();
						sourceNodeId = edge.source().id();
						targetNodeId = edge.target().id();
{{rawJSComment "						// You can access other properties of the edge, e.g., source, target, data, etc."}}

						appendMessage("Info: " + 'Edge ID: ' + edgeId)
						appendMessage("Info: " + 'Source Node ID: ' + sourceNodeId)
						appendMessage("Info: " + 'Target Node ID: ' + targetNodeId)
					});


				} else {
					console.error(`Bro, there is no path from "${sourceNodeId}" to "${targetNodeId}".`);
					appendMessage(`Bro, there is no path from "${sourceNodeId}" to "${targetNodeId}".`);
					return;
				}
			}


			function linkImpairmentManagerCopy(toggle, baseCommand) {

				console.log("linkImpairmentManagerCopy-Function-Reach")

				fullCommand = baseCommand

				if (toggle == 'start-source') {
					delayValue  = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentDelay-panelContentlabelSourceImpairmentDelay-columnsPanelContentlabelSourceImpairmentDelay-labelColumnlabelSourceImpairmentDelay-inputColumnlabelSourceImpairmentDelay-labellabelSourceImpairmentDelay').value
					jitterValue = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentJitter-panelContentlabelSourceImpairmentJitter-columnsPanelContentlabelSourceImpairmentJitter-labelColumnlabelSourceImpairmentJitter-inputColumnlabelSourceImpairmentJitter-labellabelSourceImpairmentJitter').value
					rateValue   = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentRate-panelContentlabelSourceImpairmentRate-columnsPanelContentlabelSourceImpairmentRate-labelColumnlabelSourceImpairmentRate-inputColumnlabelSourceImpairmentRate-labellabelSourceImpairmentRate').value
					lossValue   = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentLoss-panelContentlabelSourceImpairmentLoss-columnsPanelContentlabelSourceImpairmentLoss-labelColumnlabelSourceImpairmentLoss-inputColumnlabelSourceImpairmentLoss-labellabelSourceImpairmentLoss').value

					console.log(delayValue)

					fullCommand = baseCommand + ` --delay ${delayValue}ms --jitter ${jitterValue}ms --rate ${rateValue} --loss ${lossValue}`
					alert_msg = `SSH command to start link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`
				} 
				else if (toggle == 'stop-source') {
					fullCommand = baseCommand
					alert_msg = `SSH command to stop link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`
				} 

				else if (toggle == 'start-target') {
					delayValue  = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentDelay-panelContentlabelTargetImpairmentDelay-columnsPanelContentlabelTargetImpairmentDelay-labelColumnlabelTargetImpairmentDelay-inputColumnlabelTargetImpairmentDelay-labellabelTargetImpairmentDelay').value
					jitterValue = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentJitter-panelContentlabelTargetImpairmentJitter-columnsPanelContentlabelTargetImpairmentJitter-labelColumnlabelTargetImpairmentJitter-inputColumnlabelTargetImpairmentJitter-labellabelTargetImpairmentJitter').value
					rateValue   = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentRate-panelContentlabelTargetImpairmentRate-columnsPanelContentlabelTargetImpairmentRate-labelColumnlabelTargetImpairmentRate-inputColumnlabelTargetImpairmentRate-labellabelTargetImpairmentRate').value
					lossValue   = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentLoss-panelContentlabelTargetImpairmentLoss-columnsPanelContentlabelTargetImpairmentLoss-labelColumnlabelTargetImpairmentLoss-inputColumnlabelTargetImpairmentLoss-labellabelTargetImpairmentLoss').value

					console.log(delayValue)

					fullCommand = baseCommand + ` --delay ${delayValue}ms --jitter ${jitterValue}ms --rate ${rateValue} --loss ${lossValue}`
					alert_msg = `SSH command to start link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`
				} 
				else if (toggle == 'stop-target') {
					fullCommand = baseCommand
					alert_msg = `SSH command to stop link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`
				} 

				console.log(fullCommand)

				urlToCopy = fullCommand;
				event.preventDefault();

{{rawJSComment " 				// Create a temporary input element to copy the URL to the clipboard"}}
				const tempInput = document.createElement('input');
				tempInput.value = urlToCopy;
				document.body.appendChild(tempInput);
				tempInput.select();
				document.execCommand('copy');
				document.body.removeChild(tempInput);


{{rawJSComment " 				// Provide user feedback (e.g., alert or toast) that the URL has been copied"}}
				bulmaToast.toast({
					message: alert_msg,
					type: 'is-warning is-size-6 p-3',
					duration: 4000,
					position: "top-center",
					closeOnClick: true,
				})
				appendMessage(alert_msg)
			}


			function linkImpairmentManagerExec(toggle, baseCommandSsh, baseCommandExec) {

				console.log("linkImpairmentManagerExec-Function-Called")
				

				if (deploymentType == 'colocated') {
					baseCommand = baseCommandExec
				} else {
					baseCommand = baseCommandSsh
				}


				if (toggle == 'start-source') {
					delayValue  = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentDelay-panelContentlabelSourceImpairmentDelay-columnsPanelContentlabelSourceImpairmentDelay-labelColumnlabelSourceImpairmentDelay-inputColumnlabelSourceImpairmentDelay-labellabelSourceImpairmentDelay').value
					jitterValue = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentJitter-panelContentlabelSourceImpairmentJitter-columnsPanelContentlabelSourceImpairmentJitter-labelColumnlabelSourceImpairmentJitter-inputColumnlabelSourceImpairmentJitter-labellabelSourceImpairmentJitter').value
					rateValue   = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentRate-panelContentlabelSourceImpairmentRate-columnsPanelContentlabelSourceImpairmentRate-labelColumnlabelSourceImpairmentRate-inputColumnlabelSourceImpairmentRate-labellabelSourceImpairmentRate').value
					lossValue   = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelSourceImpairmentLoss-panelContentlabelSourceImpairmentLoss-columnsPanelContentlabelSourceImpairmentLoss-labelColumnlabelSourceImpairmentLoss-inputColumnlabelSourceImpairmentLoss-labellabelSourceImpairmentLoss').value

					console.log(`delayValue: ${delayValue}`)
					console.log(`jitterValue: ${jitterValue}`)
					console.log(`rateValue: ${rateValue}`)
					console.log(`lossValue: ${lossValue}`)

					fullCommand = baseCommand + ` --delay ${delayValue}ms --jitter ${jitterValue}ms --rate ${rateValue} --loss ${lossValue}`
					alert_msg = `SSH command to start link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`
				} 
				else if (toggle == 'stop-source') {
					fullCommand = baseCommand
					alert_msg = `SSH command to stop link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`
				} 


				else if (toggle == 'start-target') {
					delayValue  = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentDelay-panelContentlabelTargetImpairmentDelay-columnsPanelContentlabelTargetImpairmentDelay-labelColumnlabelTargetImpairmentDelay-inputColumnlabelTargetImpairmentDelay-labellabelTargetImpairmentDelay').value
					jitterValue = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentJitter-panelContentlabelTargetImpairmentJitter-columnsPanelContentlabelTargetImpairmentJitter-labelColumnlabelTargetImpairmentJitter-inputColumnlabelTargetImpairmentJitter-labellabelTargetImpairmentJitter').value
					rateValue   = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentRate-panelContentlabelTargetImpairmentRate-columnsPanelContentlabelTargetImpairmentRate-labelColumnlabelTargetImpairmentRate-inputColumnlabelTargetImpairmentRate-labellabelTargetImpairmentRate').value
					lossValue   = document.getElementById('panelBlock-tabContainer-LinkProperties-divPanelBlock-columnContainerlabelTargetImpairmentLoss-panelContentlabelTargetImpairmentLoss-columnsPanelContentlabelTargetImpairmentLoss-labelColumnlabelTargetImpairmentLoss-inputColumnlabelTargetImpairmentLoss-labellabelTargetImpairmentLoss').value

					console.log(`delayValue: ${delayValue}`)
					console.log(`jitterValue: ${jitterValue}`)
					console.log(`rateValue: ${rateValue}`)
					console.log(`lossValue: ${lossValue}`)

					fullCommand = baseCommand + ` --delay ${delayValue}ms --jitter ${jitterValue}ms --rate ${rateValue} --loss ${lossValue}`
					alert_msg = `SSH command to start link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`
				} 
				else if (toggle == 'stop-target') {
					fullCommand = baseCommand
					alert_msg = `SSH command to stop link impairment is lit 🔥 and copied to your clipboard, ready to drop it in your terminal console like a boss! 🚀💻`
				} 


				console.log(`baseCommand: ${baseCommand}`)
				console.log(`fullCommand: ${fullCommand}`)

				callGoFunction(fullCommand, 'padding')

			}

{{rawJSComment "			// Call Go BackEnd function"}}
			function callGoFunction(parameter1, parameter2) {

				console.log("callGoFunction-Called")

				const data = {
					param1: parameter1,
					param2: parameter2,
				};

				fetch('/clabNetem', {
						method: 'POST',
=======
						.catch((error) => {
							// Handle errors
							console.error("Error occurred:", error);
						});
				}
				
				
				async function getAllNodeEndpointDetailExec(arg01, arg02, arg03) {
					console.log("getAllNodeEndpointDetailExec-Function Called");
					console.log(`getAllNodeEndpointDetailExec-Function Argument01: ${arg01}`);
					console.log(`getAllNodeEndpointDetailExec-Function Argument02: ${arg02}`);
					console.log(`getAllNodeEndpointDetailExec-Function Argument03: ${arg03}`);
				
					try {
						const responseData = await callGoFunction("/getAllNodeEndpointDetail", arg01, arg02, arg03);
						// Handle the response data
				
						// Check if responseData is a non-empty object
						if (responseData && typeof responseData === 'object' && Object.keys(responseData).length > 0) {
							// Perform actions if responseData is a non-empty JSON object
							console.log("Valid non-empty JSON response received:", responseData);
							location.reload()
				
						} else {
							console.log("Empty or invalid JSON response received");
						}
					} catch (error) {
						// Handle errors
						console.error("Error occurred:", error);
					}
				}
				
				
				// Call Go BackEnd function
				// Call Go BackEnd function
					async function callGoFunction(goFunctionName, arg01, arg02, arg03) {
						console.log(`callGoFunction Called with ${goFunctionName}`);
						console.log(`callGoFunction Parameter01: ${arg01}`);
						console.log(`callGoFunction Parameter02: ${arg02}`);
				
						const data = {
							param1: arg01,
							param2: arg02,
						};
<<<<<<< HEAD

<<<<<<< HEAD
					return fetch(goFunctionName, {
						method: "POST",
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify(data),
					})
<<<<<<< HEAD
					.then(response => {
{{rawJSComment "						// Handle the response from the Go function"}}
					})
					.catch(error => {
						console.error('Error:', error);
					});
			}

{{rawJSComment "			// sleep funtion"}}
			function sleep(ms) {
				return new Promise(resolve => setTimeout(resolve, ms));
			}
=======
						.then((response) => {
{{rawJSComment "							// Check if response is ok"}}
=======
=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
						try {
							const response = await fetch(goFunctionName, {
								method: "POST",
								headers: {
									"Content-Type": "application/json",
								},
								body: JSON.stringify(data),
							});
<<<<<<< HEAD

<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "##							// Check if response is ok"}}
>>>>>>> 0546120a (dev)
=======
{{rawJSComment "######							// Check if response is ok"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
=======
				
<<<<<<< HEAD
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
{{rawJSComment "							// Check if response is ok"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
							// Check if response is ok
>>>>>>> 4b6d4438 (refactore - panels)
							if (!response.ok) {
								throw new Error("Network response was not ok");
							}
				
							// Parse the JSON response
							const responseData = await response.json();
							
							// Return the response data from the Go function
							return responseData;
						} catch (error) {
							// Handle any errors that occurred during the fetch
							console.error("Error:", error);
							throw error; 
						}
				}
				
				
				// sleep funtion
				// sleep funtion
				function sleep(ms) {
					return new Promise((resolve) => setTimeout(resolve, ms));
				}
<<<<<<< HEAD
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)

=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
				function verticallAllignLayout(cy) {
					var verticalNodeGap = document.getElementById(
						"panelBlock-viewportButtons-buttonadjustLayout-divPanelBlock-columnContainerlabelAdjustLayoutAlignmentVerticalNodeGap-panelContentlabelAdjustLayoutAlignmentVerticalNodeGap-columnsPanelContentlabelAdjustLayoutAlignmentVerticalNodeGap-labelColumnlabelAdjustLayoutAlignmentVerticalNodeGap-inputColumnlabelAdjustLayoutAlignmentVerticalNodeGap-labellabelAdjustLayoutAlignmentVerticalNodeGap",
					).value;
					var verticalGroupGap = document.getElementById(
						"panelBlock-viewportButtons-buttonadjustLayout-divPanelBlock-columnContainerlabelAdjustLayoutAlignmentVerticalGroupGap-panelContentlabelAdjustLayoutAlignmentVerticalGroupGap-columnsPanelContentlabelAdjustLayoutAlignmentVerticalGroupGap-labelColumnlabelAdjustLayoutAlignmentVerticalGroupGap-inputColumnlabelAdjustLayoutAlignmentVerticalGroupGap-labellabelAdjustLayoutAlignmentVerticalGroupGap",
					).value;
				
					console.log("verticalNodeGap", verticalNodeGap);
					console.log("verticalGroupGap", verticalGroupGap);
				
					const xOffset = parseFloat(verticalNodeGap);
					const yOffset = parseFloat(verticalGroupGap);
				
					console.log("yOffset", yOffset);
					console.log("xOffset", xOffset);
				
					const delay = 100;
				
					setTimeout(() => {
						cy.nodes().forEach(function (node) {
							if (node.isParent()) {
								// For each parent node
								// For each parent node
								const children = node.children();
								const numRows = 1;
				
								const cellWidth = node.width() / children.length;
								// const xOffset = 5
								// const xOffset = 5
				
								children.forEach(function (child, index) {
									// Position children in rows
									// Position children in rows
									const xPos = index * (cellWidth + xOffset);
									const yPos = 0;
				
									// Set the position of each child node
									// Set the position of each child node
									child.position({ x: xPos, y: yPos });
								});
							}
						});
				
						var parentCounts = {};
						var maxWidth = 0;
						var centerX = 0;
						var centerY = cy.height() / 2;
				
						// Count children of each parent node
						// Count children of each parent node
						cy.nodes().forEach(function (node) {
							if (node.isParent()) {
								const childrenCount = node.children().length;
								parentCounts[node.id()] = childrenCount;
							}
						});
				
						cy.nodes().forEach(function (node) {
							if (node.isParent()) {
								const width = node.width();
								if (width > maxWidth) {
									maxWidth = width;
									console.log("ParentMaxWidth: ", maxWidth);
								}
							}
						});
				
						const divisionFactor = maxWidth / 2;
						console.log("divisionFactor: ", divisionFactor);
				
						// Sort parent nodes by child count in ascending order
						// Sort parent nodes by child count in ascending order
						const sortedParents = Object.keys(parentCounts).sort(
							(a, b) => parentCounts[a] - parentCounts[b],
						);
				
						let yPos = 0;
						// const yOffset = 50;
						// const yOffset = 50;
				
						// Position parent nodes vertically and center them horizontally
						// Position parent nodes vertically and center them horizontally
						sortedParents.forEach(function (parentId) {
							const parent = cy.getElementById(parentId);
							const xPos = centerX - parent.width() / divisionFactor;
							// to the left compared to the center of the widest parent node.
							// to the left compared to the center of the widest parent node.
							parent.position({ x: xPos, y: yPos });
							yPos += yOffset;
						});
						cy.fit();
					}, delay);
				}
				
				function horizontalAllignLayout(cy) {
					var horizontalNodeGap = document.getElementById(
						"panelBlock-viewportButtons-buttonadjustLayout-divPanelBlock-columnContainerlabelAdjustLayoutAlignmentHorizontalNodeGap-panelContentlabelAdjustLayoutAlignmentHorizontalNodeGap-columnsPanelContentlabelAdjustLayoutAlignmentHorizontalNodeGap-labelColumnlabelAdjustLayoutAlignmentHorizontalNodeGap-inputColumnlabelAdjustLayoutAlignmentHorizontalNodeGap-labellabelAdjustLayoutAlignmentHorizontalNodeGap",
					).value;
					var horizontalGroupGap = document.getElementById(
						"panelBlock-viewportButtons-buttonadjustLayout-divPanelBlock-columnContainerlabelAdjustLayoutAlignmentHorizontalGroupGap-panelContentlabelAdjustLayoutAlignmentHorizontalGroupGap-columnsPanelContentlabelAdjustLayoutAlignmentHorizontalGroupGap-labelColumnlabelAdjustLayoutAlignmentHorizontalGroupGap-inputColumnlabelAdjustLayoutAlignmentHorizontalGroupGap-labellabelAdjustLayoutAlignmentHorizontalGroupGap",
					).value;
				
					console.log("horizontalNodeGap", horizontalNodeGap);
					console.log("horizontalGroupGap", horizontalGroupGap);
				
					const yOffset = parseFloat(horizontalNodeGap);
					const xOffset = parseFloat(horizontalGroupGap);
				
					console.log("yOffset", yOffset);
					console.log("xOffset", xOffset);
				
					const delay = 100;
					setTimeout(() => {
						cy.nodes().forEach(function (node) {
							if (node.isParent()) {
								// For each parent node
								// For each parent node
								const children = node.children();
								const numColumns = 1;
								const cellHeight = node.height() / children.length;
								// const yOffset = 5;
								// const yOffset = 5;
				
								children.forEach(function (child, index) {
									// Position children in columns
									// Position children in columns
									const xPos = 0;
									const yPos = index * (cellHeight + yOffset);
				
									// Set the position of each child node
									// Set the position of each child node
									child.position({ x: xPos, y: yPos });
								});
							}
						});
				
						var parentCounts = {};
						var maxHeight = 0;
						var centerX = cy.width() / 2;
						var centerY = cy.height() / 2;
				
						// Count children of each parent node
						// Count children of each parent node
						cy.nodes().forEach(function (node) {
							if (node.isParent()) {
								const childrenCount = node.children().length;
								parentCounts[node.id()] = childrenCount;
							}
						});
				
						cy.nodes().forEach(function (node) {
							if (node.isParent()) {
								const height = node.height();
								if (height > maxHeight) {
									maxHeight = height;
									console.log("ParentMaxHeight: ", maxHeight);
								}
							}
						});
				
						const divisionFactor = maxHeight / 2;
						console.log("divisionFactor: ", divisionFactor);
				
						// Sort parent nodes by child count in ascending order
						// Sort parent nodes by child count in ascending order
						const sortedParents = Object.keys(parentCounts).sort(
							(a, b) => parentCounts[a] - parentCounts[b],
						);
				
						let xPos = 0;
						// const xOffset = 50;
						// const xOffset = 50;
				
						// Position parent nodes horizontally and center them vertically
						// Position parent nodes horizontally and center them vertically
						sortedParents.forEach(function (parentId) {
							const parent = cy.getElementById(parentId);
							const yPos = centerY - parent.height() / divisionFactor;
							parent.position({ x: xPos, y: yPos });
							xPos -= xOffset;
						});
				
						cy.fit();
					}, delay);
				}
				
				async function captureAndSaveViewportAsPng(cy) {
					// Find the canvas element for layer2-node
					// Find the canvas element for layer2-node
					const canvasElement = document.querySelector(
						'#cy canvas[data-id="layer2-node"]',
					);
				
					const zoomScaleFactor = 1;
				
					// Check if the canvas element exists and is an HTMLCanvasElement
					// Check if the canvas element exists and is an HTMLCanvasElement
					if (canvasElement instanceof HTMLCanvasElement) {
						// Calculate the new canvas dimensions based on the high resolution factor
						// Calculate the new canvas dimensions based on the high resolution factor
						const newWidth = canvasElement.width * zoomScaleFactor;
						const newHeight = canvasElement.height * zoomScaleFactor;
				
						// Create a new canvas element with the increased dimensions
						// Create a new canvas element with the increased dimensions
						const newCanvas = document.createElement("canvas");
						newCanvas.width = newWidth;
						newCanvas.height = newHeight;
						const newCanvasContext = newCanvas.getContext("2d");
				
						// Scale the canvas content to the new dimensions
						// Scale the canvas content to the new dimensions
						newCanvasContext.scale(zoomScaleFactor, zoomScaleFactor);
				
						// Fill the new canvas with a white background
						// Fill the new canvas with a white background
						newCanvasContext.fillStyle = "white";
						newCanvasContext.fillRect(0, 0, newWidth, newHeight);
				
						// Draw the original canvas content on the new canvas
						// Draw the original canvas content on the new canvas
						newCanvasContext.drawImage(canvasElement, 0, 0);
				
						// Convert the new canvas to a data URL with a white background
						// Convert the new canvas to a data URL with a white background
						const dataUrl = newCanvas.toDataURL("image/png");
				
						// Create an anchor element to trigger the download
						// Create an anchor element to trigger the download
						const link = document.createElement("a");
						link.href = dataUrl;
						link.download = "cytoscape-viewport.png";
				
						bulmaToast.toast({
							message: `Brace yourselves for a quick snapshot, folks! 📸 Capturing the viewport in 3... 2... 1... 🚀💥`,
							type: "is-warning is-size-6 p-3",
							duration: 2000,
							position: "top-center",
							closeOnClick: true,
						});
						await sleep(2000);
						// Simulate a click to trigger the download
						// Simulate a click to trigger the download
						link.click();
					} else {
						console.error(
							"Canvas element for layer2-node is not found or is not a valid HTML canvas element.",
						);
					}
				}
				
				async function captureAndSaveViewportAsDrawIo(cy) {
					// Find the canvas element for layer2-node
					// Find the canvas element for layer2-node
					const canvasElement = document.querySelector(
						'#cy canvas[data-id="layer2-node"]',
					);
					const drawIoWidht = canvasElement.width / 10;
					const drawIoHeight = canvasElement.height / 10;
					const drawIoaAspectRatio = drawIoWidht / drawIoHeight;
				
					const mxGraphHeader = `<mxGraphModel dx="${drawIoWidht / 2}" dy="${drawIoHeight / 2}" grid="1" gridSize="1" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="${drawIoWidht}" pageHeight="${drawIoHeight}" math="0" shadow="0">
																							<root>
																								<mxCell id="0" />
																								<mxCell id="1" parent="0" />`;
				
					const mxGraphFooter = `    					</root>
																								</mxGraphModel>`;
				
					const mxCells = [];
				
					// Iterate through nodes and edges
					// Function to create mxCell XML for nodes
					// Iterate through nodes and edges
					// Function to create mxCell XML for nodes
					function createMxCellForNode(node, imageURL) {
						if (node.isParent()) {
<<<<<<< HEAD
{{rawJSComment "							// For each parent node"}}
							const children = node.children();
							const numRows = 1; 
							
							const cellWidth = node.width() / children.length; 
{{rawJSComment "							// const xOffset = 5 "}}
							
							children.forEach(function(child, index) {
{{rawJSComment "								// Position children in rows"}}
								const xPos = index * (cellWidth + xOffset);
								const yPos = 0; 
								
{{rawJSComment "								// Set the position of each child node"}}
								child.position({ x: xPos, y: yPos });
							});
						}
					});

					
					var parentCounts = {}; 
					var maxWidth = 0;
					var centerX = 0;
					var centerY = cy.height() / 2; 

{{rawJSComment "					// Count children of each parent node"}}
					cy.nodes().forEach(function(node) {
						if (node.isParent()) {
							const childrenCount = node.children().length;
							parentCounts[node.id()] = childrenCount;
						}
					});
=======
							return `	
															<mxCell id="${node.id()}" value="${node.data("id")}" style="shape=image;imageAspect=0;aspect=fixed;verticalLabelPosition=bottom;verticalAlign=top;image=undefined;imageBackground=#8F96AC;imageBorder=#F2F2F2;strokeWidth=2;perimeterSpacing=10;opacity=30;fontSize=4;spacingTop=-7;" parent="1" vertex="1">
																<mxGeometry x="${node.position("x") - node.width() / 2}" y="${node.position("y") - node.height() / 2}" width="${node.width()}" height="${node.height()}" as="geometry" />
															</mxCell>`;
						} else if (
							!node.data("id").includes("statusGreen") &&
							!node.data("id").includes("statusRed")
						) {
							return `
															<mxCell id="${node.id()}" value="${node.data("id")}" style="shape=image;imageAspect=0;aspect=fixed;verticalLabelPosition=bottom;verticalAlign=top;image=${imageURL};fontSize=4;spacingTop=-7;" vertex="1" parent="1">
																<mxGeometry x="${node.position("x") - node.width() / 2}" y="${node.position("y") - node.height() / 2}" width="${node.width()}" height="${node.height()}" as="geometry" />
															</mxCell>`;
						}
					}
<<<<<<< HEAD
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)

=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
					cy.nodes().forEach(function (node) {
						let imageURL;
						switch (node.data("topoViewerRole")) {
							case "pe":
								imageURL = "http://138.203.26.59:8080/images/clab-pe-light-blue.png";
								break;
							case "controller":
								imageURL =
									"http://138.203.26.59:8080/images/clab-controller-light-blue.png";
								break;
							case "pon":
								imageURL = "http://138.203.26.59:8080/images/clab-pon-dark-blue.png";
								break;
							case "dcgw":
								imageURL = "http://138.203.26.59:8080/images/clab-dcgw-dark-blue.png";
								break;
							case "leaf":
								imageURL = "http://138.203.26.59:8080/images/clab-leaf-light-blue.png";
								break;
							case "spine":
								imageURL = "http://138.203.26.59:8080/images/clab-spine-dark-blue.png";
								break;
							case "super-spine":
								imageURL = "http://138.203.26.59:8080/images/clab-spine-light-blue.png";
								break;
						}
						mxCells.push(createMxCellForNode(node, imageURL));
					});
<<<<<<< HEAD
<<<<<<< HEAD
					
					const divisionFactor = maxWidth / 2; 
					console.log('divisionFactor: ', divisionFactor)
				  
{{rawJSComment "					// Sort parent nodes by child count in ascending order"}}
					const sortedParents = Object.keys(parentCounts).sort(
						  (a, b) => parentCounts[a] - parentCounts[b]
					);
				  
					let yPos = 0; 
{{rawJSComment "					// const yOffset = 50; "}}
				  
{{rawJSComment "					// Position parent nodes vertically and center them horizontally"}}
					sortedParents.forEach(function(parentId) {
						const parent = cy.getElementById(parentId);
						const xPos = centerX - parent.width() / divisionFactor;	
{{rawJSComment "																				  // to the left compared to the center of the widest parent node."}}
						  parent.position({ x: xPos, y: yPos });  
						  yPos += yOffset;
=======

=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
					cy.edges().forEach(function (edge) {
						mxCells.push(`
																	<mxCell id="${edge.data("id")}" value="" style="endArrow=none;html=1;rounded=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;strokeWidth=1;strokeColor=#B1BCC8;opacity=60;" parent="1" source="${edge.data("source")}" target="${edge.data("target")}" edge="1">
																		<mxGeometry width="50" height="50" relative="1" as="geometry" >
																		</mxGeometry>
																	</mxCell>
																	<mxCell id="${edge.data("id")}-LabelSource" value="${edge.data("sourceEndpoint")}" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];fontSize=3;" parent="${edge.data("id")}" vertex="1" connectable="0">
																		<mxGeometry x="-0.5" y="1" relative="0.5" as="geometry">
																			<mxPoint x="1" y="1" as="sourcePoint" />
																		</mxGeometry>
																	</mxCell>
																	<mxCell id="${edge.data("id")}-labelTarget" value="${edge.data("targetEndpoint")}" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];fontSize=3" parent="${edge.data("id")}" vertex="1" connectable="0">
																		<mxGeometry x="0.5" y="1" relative="0.5" as="geometry">
																			<mxPoint x="1" y="1" as="targetPoint" />
																		</mxGeometry>
																	</mxCell>`);
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)
					});
				
					// Combine all parts and create XML
					// Combine all parts and create XML
					const mxGraphXML = mxGraphHeader + mxCells.join("") + mxGraphFooter;
				
					// Create a Blob from the XML
					// Create a Blob from the XML
					const blob = new Blob([mxGraphXML], {
						type: "application/xml",
					});
				
					// Create a URL for the Blob
					// Create a URL for the Blob
					const url = window.URL.createObjectURL(blob);
<<<<<<< HEAD

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
				console.log('yOffset', yOffset)
				console.log('xOffset', xOffset)

				const delay = 100;
				setTimeout(() => {
				  cy.nodes().forEach(function (node) {
					if (node.isParent()) {
{{rawJSComment "					  // For each parent node"}}
					  const children = node.children();
					  const numColumns = 1; 
					  const cellHeight = node.height() / children.length; 
{{rawJSComment "					  // const yOffset = 5; "}}
			  
					  children.forEach(function (child, index) {
{{rawJSComment "						// Position children in columns"}}
						const xPos = 0; 
						const yPos = index * (cellHeight + yOffset);
						
{{rawJSComment "						// Set the position of each child node"}}
						child.position({ x: xPos, y: yPos });
					  });
					}
				  });
			  
				  var parentCounts = {};
				  var maxHeight = 0;
				  var centerX = cy.width() / 2;
				  var centerY = cy.height() / 2;
			  
{{rawJSComment "				  // Count children of each parent node"}}
				  cy.nodes().forEach(function (node) {
					if (node.isParent()) {
					  const childrenCount = node.children().length;
					  parentCounts[node.id()] = childrenCount;
					}
				  });
			  
				  cy.nodes().forEach(function (node) {
					if (node.isParent()) {
					  const height = node.height();
					  if (height > maxHeight) {
						maxHeight = height;
						console.log('ParentMaxHeight: ', maxHeight);
					  }
					}
				  });
			  
				  const divisionFactor = maxHeight / 2;
				  console.log('divisionFactor: ', divisionFactor);
			  
{{rawJSComment "				  // Sort parent nodes by child count in ascending order"}}
				  const sortedParents = Object.keys(parentCounts).sort(
					(a, b) => parentCounts[a] - parentCounts[b]
				  );
			  
				  let xPos = 0;
{{rawJSComment "				  // const xOffset = 50;"}}
			  
{{rawJSComment "				  // Position parent nodes horizontally and center them vertically"}}
				  sortedParents.forEach(function (parentId) {
					const parent = cy.getElementById(parentId);
					const yPos = centerY - parent.height() / divisionFactor; 
					parent.position({ x: xPos, y: yPos });
					xPos -= xOffset;
				  });
			  
				  cy.fit();
				}, delay);
			  }

			  async function captureAndSaveViewportAsPng(cy) {
{{rawJSComment "				// Find the canvas element for layer2-node"}}
				const canvasElement = document.querySelector('#cy canvas[data-id="layer2-node"]');

				const zoomScaleFactor = 1;

{{rawJSComment "				// Check if the canvas element exists and is an HTMLCanvasElement"}}
				if (canvasElement instanceof HTMLCanvasElement) {
{{rawJSComment "					// Calculate the new canvas dimensions based on the high resolution factor"}}
					const newWidth = canvasElement.width * zoomScaleFactor;
					const newHeight = canvasElement.height * zoomScaleFactor;

{{rawJSComment "					// Create a new canvas element with the increased dimensions"}}
					const newCanvas = document.createElement('canvas');
					newCanvas.width = newWidth;
					newCanvas.height = newHeight;
					const newCanvasContext = newCanvas.getContext('2d');

{{rawJSComment "					// Scale the canvas content to the new dimensions"}}
					newCanvasContext.scale(zoomScaleFactor, zoomScaleFactor);

{{rawJSComment "					// Fill the new canvas with a white background"}}
					newCanvasContext.fillStyle = 'white';
					newCanvasContext.fillRect(0, 0, newWidth, newHeight);

{{rawJSComment "					// Draw the original canvas content on the new canvas"}}
					newCanvasContext.drawImage(canvasElement, 0, 0);

{{rawJSComment "					// Convert the new canvas to a data URL with a white background"}}
					const dataUrl = newCanvas.toDataURL('image/png');

{{rawJSComment "					// Create an anchor element to trigger the download"}}
					const link = document.createElement('a');
					link.href = dataUrl;
					link.download = 'cytoscape-viewport.png';
=======
=======
				
<<<<<<< HEAD
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
{{rawJSComment "					// Create a download link and trigger a click event"}}
{{rawJSComment "					// Create a download link and trigger a click event"}}
=======
{{rawJSComment "####					// Create a download link and trigger a click event"}}
{{rawJSComment "####					// Create a download link and trigger a click event"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "					// Create a download link and trigger a click event"}}
{{rawJSComment "					// Create a download link and trigger a click event"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
					// Create a download link and trigger a click event
					// Create a download link and trigger a click event
>>>>>>> 4b6d4438 (refactore - panels)
					const a = document.createElement("a");
					a.style.display = "none";
					a.href = url;
					a.download = "filename.drawio";
					document.body.appendChild(a);
<<<<<<< HEAD
>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)

=======
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
					bulmaToast.toast({
						message: `Brace yourselves for a quick snapshot, folks! 📸 Capturing the viewport in 3... 2... 1... 🚀💥`,
						type: "is-warning is-size-6 p-3",
						duration: 2000,
						position: "top-center",
						closeOnClick: true,
					});
					await sleep(2000);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{{rawJSComment "					// Simulate a click to trigger the download"}}
<<<<<<< HEAD
					link.click();
				} else {
					console.error('Canvas element for layer2-node is not found or is not a valid HTML canvas element.');
				}
			}

			async function captureAndSaveViewportAsDrawIo(cy) {

{{rawJSComment "				// Find the canvas element for layer2-node"}}
				const canvasElement = document.querySelector('#cy canvas[data-id="layer2-node"]');
				const drawIoWidht= canvasElement.width / 10;
				const drawIoHeight = canvasElement.height / 10;
				const drawIoaAspectRatio = drawIoWidht / drawIoHeight


				  
				const mxGraphHeader = `<mxGraphModel dx="${drawIoWidht / 2 }" dy="${drawIoHeight / 2 }" grid="1" gridSize="1" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="${drawIoWidht}" pageHeight="${drawIoHeight}" math="0" shadow="0">
															<root>
																<mxCell id="0" />
																<mxCell id="1" parent="0" />`;
				
				const mxGraphFooter = `    					</root>
																</mxGraphModel>`;
				
				const mxCells = [];
				
{{rawJSComment "				// Iterate through nodes and edges"}}
{{rawJSComment "				// Function to create mxCell XML for nodes"}}
				function createMxCellForNode(node, imageURL) {
					if (node.isParent()) {
						return`	
							<mxCell id="${node.id()}" value="${node.data('id')}" style="shape=image;imageAspect=0;aspect=fixed;verticalLabelPosition=bottom;verticalAlign=top;image=undefined;imageBackground=#8F96AC;imageBorder=#F2F2F2;strokeWidth=2;perimeterSpacing=10;opacity=30;fontSize=4;spacingTop=-7;" parent="1" vertex="1">
								<mxGeometry x="${(node.position('x')) - (node.width() / 2 )}" y="${((node.position('y')) - node.height() / 2 )}" width="${node.width()}" height="${node.height()}" as="geometry" />
							</mxCell>`
					}
					else if ( !(node.data('id').includes('statusGreen')) && !(node.data('id').includes('statusRed'))) {
						return `
							<mxCell id="${node.id()}" value="${node.data('id')}" style="shape=image;imageAspect=0;aspect=fixed;verticalLabelPosition=bottom;verticalAlign=top;image=${imageURL};fontSize=4;spacingTop=-7;" vertex="1" parent="1">
								<mxGeometry x="${node.position('x') - (node.width() / 2 )}" y="${((node.position('y')) - node.height() / 2 )}" width="${node.width()}" height="${node.height()}" as="geometry" />
							</mxCell>`;
					}
				}

				cy.nodes().forEach(function(node) {
					let imageURL;
					switch (node.data('topoViewerRole')) {
						case 'pe':
							imageURL = 'http://138.203.26.59:8080/images/clab-pe-light-blue.png';
							break;
						case 'controller':
							imageURL = 'http://138.203.26.59:8080/images/clab-controller-light-blue.png';
							break;
						case 'pon':
							imageURL = 'http://138.203.26.59:8080/images/clab-pon-dark-blue.png';
							break;
						case 'dcgw':
							imageURL = 'http://138.203.26.59:8080/images/clab-dcgw-dark-blue.png';
							break;
						case 'leaf':
							imageURL = 'http://138.203.26.59:8080/images/clab-leaf-light-blue.png';
							break;
						case 'spine':
							imageURL = 'http://138.203.26.59:8080/images/clab-spine-dark-blue.png';
							break;
						case 'super-spine':
							imageURL = 'http://138.203.26.59:8080/images/clab-spine-light-blue.png';
							break;
					}
					mxCells.push(createMxCellForNode(node, imageURL));
				});
				
				cy.edges().forEach(function(edge) {
					mxCells.push(`
									<mxCell id="${edge.data('id')}" value="" style="endArrow=none;html=1;rounded=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;strokeWidth=1;strokeColor=#B1BCC8;opacity=60;" parent="1" source="${edge.data('source')}" target="${edge.data('target')}" edge="1">
										  <mxGeometry width="50" height="50" relative="1" as="geometry" >
										</mxGeometry>
									</mxCell>
									<mxCell id="${edge.data('id')}-LabelSource" value="${edge.data('sourceEndpoint')}" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];fontSize=3;" parent="${edge.data('id')}" vertex="1" connectable="0">
										  <mxGeometry x="-0.5" y="1" relative="0.5" as="geometry">
											<mxPoint x="1" y="1" as="sourcePoint" />
										  </mxGeometry>
									</mxCell>
									<mxCell id="${edge.data('id')}-labelTarget" value="${edge.data('targetEndpoint')}" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];fontSize=3" parent="${edge.data('id')}" vertex="1" connectable="0">
										  <mxGeometry x="0.5" y="1" relative="0.5" as="geometry">
											<mxPoint x="1" y="1" as="targetPoint" />
										  </mxGeometry>
									</mxCell>`);
				});
				
{{rawJSComment "				// Combine all parts and create XML"}}
				const mxGraphXML = mxGraphHeader + mxCells.join('') + mxGraphFooter;
				
{{rawJSComment "				// Create a Blob from the XML"}}
				const blob = new Blob([mxGraphXML], {
					type: 'application/xml'
				});
				
{{rawJSComment "				// Create a URL for the Blob"}}
				const url = window.URL.createObjectURL(blob);
				
{{rawJSComment "				// Create a download link and trigger a click event"}}
				const a = document.createElement('a');
				a.style.display = 'none';
				a.href = url;
				a.download = 'filename.drawio';
				document.body.appendChild(a);
				
				bulmaToast.toast({
					message: `Brace yourselves for a quick snapshot, folks! 📸 Capturing the viewport in 3... 2... 1... 🚀💥`,
					type: 'is-warning is-size-6 p-3',
					duration: 2000,
					position: "top-center",
					closeOnClick: true,
				})
				await sleep(2000)
{{rawJSComment "				// Simulate a click to trigger the download"}}
				a.click();
				
{{rawJSComment "				// Clean up by revoking the URL and removing the download link"}}
				window.URL.revokeObjectURL(url);
				document.body.removeChild(a);
			}







				
=======
{{rawJSComment "					// Simulate a click to trigger the download"}}
=======
{{rawJSComment "####					// Simulate a click to trigger the download"}}
{{rawJSComment "####					// Simulate a click to trigger the download"}}
>>>>>>> b8bf5d89 (attemp no root user for netem)
=======
{{rawJSComment "					// Simulate a click to trigger the download"}}
{{rawJSComment "					// Simulate a click to trigger the download"}}
>>>>>>> ea41549a (adding python actions for config backup restore)
=======
					// Simulate a click to trigger the download
					// Simulate a click to trigger the download
>>>>>>> 4b6d4438 (refactore - panels)
					a.click();
				
					// Clean up by revoking the URL and removing the download link
					// Clean up by revoking the URL and removing the download link
					window.URL.revokeObjectURL(url);
					document.body.removeChild(a);
				}
<<<<<<< HEAD

>>>>>>> 3b88c076 (commit with tag nightly-24.02.11)


=======
				
				
				
>>>>>>> ba02c7b7 (adding python actions - works UI and backend)
			</script>
			<script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.50.0/min/vs/loader.js"></script>

			<script src="/js/diff.js"></script>
			<script src="/js/common.js"></script>
		</div>
	</body>
</html>
