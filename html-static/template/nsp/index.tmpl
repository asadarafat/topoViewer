<!DOCTYPE html>
<html>

<head>
  <meta charset=utf-8 />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Topology Viewer</title>
  <link href="css/style.css" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css">

  <script defer src="https://use.fontawesome.com/releases/v5.14.0/js/all.js"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/bulma-extensions@4.0.1/bulma-slider/dist/js/bulma-slider.min.js"></script>

  <!-- libs used in cytoscape-libs -->
 

   <!-- cytoscape-libs -->
  <script src="/cytoscape/libs/cola.min.js"></script>
  <script src="/cytoscape/libs/cytoscape.min.js"></script>
  <script src="/cytoscape/libs/cytoscape-cola.js"></script>
  <script src="/cytoscape/libs/popper.js"></script>
  <script src="/cytoscape/libs/cytoscape-popper.js"></script>
  <script src="/cytoscape/libs/cytoscape-grid-guide.js"></script>
</head>

<style>
body { 
  font: 14px helvetica neue, helvetica, arial, sans-serif;
}

#edgeLength, #nodeSpacing {
  width: 100%;
}

#cy {
  position: absolute;
  left: 0;
  right: 0;
  top: 5.5em;
  bottom: 0;
  right: 0em;
}

#logo {
  top: 20px; 
  left: 30px;
  z-index: 9999;
  position: absolute;
}

#Setting {
  /*top: 70px;*/
  bottom: 0px; 
  right: 10px; 
  width: 370px; 
  position: absolute;
}

.has-background-4a {
  background-color: #275bd4;
  z-index: 9999;
}

</style>

<body>
    <nav class="level m-0 px-3 py-1 has-background-4a">
      <div>
        <p class="title    m-0 px-1 py-0   is-4 is-unselectable has-text-weight-normal has-text-white"> TopoViewer</p>
        <p class="subtitle m-0 px-1 py-0   is-6                 has-text-weight-light  has-text-white" id="ClabSubtitle">Topology name: {{.}} </p>
      </div>
      <div class="level-right">
        <div id="nokia-logo">
          <img src="images/nokia-logo.png" width="100" hspace="10" vspace="5"><br>
        </div>
        <div class="level-item">
          <div class="dropdown is-hoverable is-right">
            <div class="dropdown-trigger">
              <button class="button is-small is-link is-light" aria-haspopup="true" aria-controls="dropdown-menu3">
                  <i class="icon fas fa-solid fa-bars fa-lg" aria-hidden="true"></i>
              </button>
            </div>
            <div class="dropdown-menu" id="dropdown-menu" role="menu">
              <div class="dropdown-content">
                <div class="dropdown-item">
                    <label class="label has-text-weight-normal is-small">Edge Length</label>
                    <input id="edgeLength" type="range" min="1" max="1000" step="1" value="50">
                </div>
                <div class="dropdown-item">
                    <label class="label has-text-weight-normal is-small">Node Spacing</label>
                    <input id="nodeSpacing" type="range" min="1" max="1000" step="1" value="25">
                </div>
                    <a id="toggleLinkEndpoint" href="#" onclick="toggleLinkEndpoint();" class="dropdown-item label has-text-weight-normal is-small">Toggle Link Endpoint</a>
                    <a id="alignLayer" href="#" onclick="alignLayer();" class="dropdown-item label has-text-weight-normal is-small">Toggle Network Layer Aligment</a>
                    <a id="about" href="#" onclick="about();" class="dropdown-item label has-text-weight-normal is-small">About TopoViewer</a>                      
              </div>
            </div>
          </div>
        </div>
      </div>
    </nav>
  <div id="cy"></div>
    <div class="message is-hidden" id="Setting" >
      <div class="message-header" id=SettingHeader>
        <p class="has-text-weight-semibold">Properties</p>
    </div>
  </div>
      <script type="text/javascript">
        // Declare a global variable to store the fetched and parsed text
        let parsedVersionText = '';

        // Function to fetch and parse the text
        async function fetchAndParseText(url) {
            try {
                const response = await fetch(url);

                // Check if the response status is OK (status code 200)
                if (!response.ok) {
                    throw new Error('Network response was not OK');
                }

                // Read the response text
                const text = await response.text();
                console.log('Fetched text:', text);

                // Store the parsed text in the global variable
                parsedVersionText = text;

                // Now you can call a function or perform actions that require the parsedVersionText
                // For example: processData(parsedVersionText);
            } catch (error) {
                console.error('Fetch error:', error);
            }
        }

        // Call the function to fetch and parse the text
        var versionUrl = location.protocol + "//" + location.host + "/version";
        console.log(versionUrl)
        fetchAndParseText(versionUrl);




        //// initiate websocket for node telemetry
        //var protocol = "ws://";
        //var url = protocol + location.host + "/ws"
        //var websocketMessage
        //
        //let socket = new WebSocket(url);
        //console.log("Attempting Connection...");
        //
        //socket.onopen = () => {
        //    console.log("Successfully Connected WebSocket");
        //    socket.send("Hi From the Client!")
        //};
        //
        //socket.onclose = event => {
        //  console.log("Socket Closed Connection: ", event);
        //  socket.send("Client Closed!")
        //};
        //
        //socket.onerror = error => {
        //  console.log("Socket Error: ", error);
        //};
        //
        //// retrieve websocket message
        //function telemetry() {
        //  socket.onmessage = (msg) => {
        //    console.log(msg)
        //    websocketMessage = msg
        //    updateEdgeColorTelemetry()
        //  }
        //}



        // Setting object
        let Setting = document.getElementById("Setting");
        let options = document.getElementById("options");


        const close = document.querySelectorAll(".close");
        close.forEach(e => e.addEventListener('click', event => {
            var c = Setting.className;
            if (c.includes("is-hidden")) {
                Setting.className = "message";
            } else {
                Setting.className = "message is-hidden";
            }
        }));

        // slider object
        var edgeLength = document.getElementById("edgeLength");
        var nodeSpacing = document.getElementById("nodeSpacing");
        console.log("edgeLength.value: " + edgeLength.value)


        // create html element
        function ce(tag, attrs, children) {
            var el = document.createElement(tag);
            Object.keys(attrs).forEach(function(key) {
                var val = attrs[key];
                el.setAttribute(key, val);
            });
            children.forEach(function(child) {
                el.appendChild(child);
            });
            return el;
        };

        // create text node
        function ctn(text) {
            var el = document.createTextNode(text);
            return el;
        };

        // return about on click
        function about(e) {
            removeLastChild();
            var oldSettingHeader = Setting.childNodes[1]
            console.log("About oldSettingHeader: ")
            console.log(oldSettingHeader)
            var tt1 = ce("p", {}, [ctn(" ")]);
            var tt2 = ce("strong", {}, [ctn(versionText)]);
            var tt3 = ce("hr", {class: "my-1 has-background-grey-lighter"}, []);
            var tt4 = ce("p", {}, [ctn("Designed and created by asad.arafat@nokia.com")]);
            var tt5 = ce("p", {}, [ctn("GUI Framework by siva.sivakumar@nokia.com")]);
            var tt6 = ce("hr", {class: "my-1 has-background-grey-lighter"}, []);
            var tt7 = ce("strong", {}, [ctn("Instructions:")]);
            var tt8 = ce("p", {}, [ctn("- To view the attributes of a node or link, simply click on it")]);
            var tt9 = ce("p", {}, [ctn("- To show/hide link endpoint label, click on setting menu")]);
            // var tt10 = ce("p", {}, [ctn("- To tap link with wireshark or to add impairment to link, please download client package")]);
            var tt11 = ce("p", {}, [ctn("- To see further details, please visit https/github.com/asadarafat/topoViewer")]);

            var tname = ce("p", {}, [tt1, tt2, tt3, tt4, tt5, tt6, tt7, tt8, tt9, tt11]);
            var tpanel = ce("div", {}, [tname]);
            var tmessageBody = ce("div", {class: "message-body"}, [tpanel])

            var headerTitle = ce("p", {class: "my-10"}, [ctn("About TopoViewer")]);
            var messageHeader = ce("div", {class: "message-header"}, [headerTitle])
            console.log("messageInit oldSettingHeader: ")
            console.log(oldSettingHeader)

            Setting.replaceChild(messageHeader, oldSettingHeader);
            Setting.appendChild(tmessageBody);
            Setting.className = "message is-small is-link";
        }

        // return TopologyAdjust on click
        function topologyAdjust(e) {
            removeLastChild();
            var oldSettingHeader = Setting.childNodes[1]
            console.log("messageTopologyAdjust oldSettingHeader: ")
            console.log(oldSettingHeader)

            var tt1 = ce("label", {
                class: "label is-small"
            }, [ctn("Edge Length")]);
            var tt2 = ce("input", {
                class: "slider",
                step: "1",
                min: "1",
                max: "1000",
                value: "50",
                type: "range",
                id: "edgeLengthMessage",
                oninput: "slider",
                onchange: "slider"
            }, []);
            var tt3 = ce("label", {
                class: "label is-small"
            }, [ctn("Node Spacing")]);
            var tt4 = ce("input", {
                class: "slider",
                step: "1",
                min: "1",
                max: "1000",
                value: "25",
                type: "range",
                id: "nodeSpacingMessage",
                oninput: "slider",
                onchange: "slider"
            }, []);

            var tname = ce("p", {}, [tt1, tt2, tt3, tt4]);
            var addon = ce("div", {}, [nodeInfo(node)]);

            var tpanel = ce("div", {}, [tname]);
            var tmessageBody = ce("div", {
                class: "message-body"
            }, [tpanel])

            var headerTitle = ce("p", {
                class: "my-7"
            }, [ctn("Topology Adjust")]);
            var messageHeader = ce("div", {
                class: "message-header"
            }, [headerTitle])


            Setting.replaceChild(messageHeader, oldSettingHeader);
            Setting.appendChild(tmessageBody);
            Setting.className = "message is-small is-link";

        }

        // return node info on click
        function nodeInfo(node) {
            console.log("mgmtIpv4Address--SSH: " + node.data("extraData").mgmtIpv4Addresss)
            var shellUrl = location.protocol + "//" + location.host + "/cloudshell/";
            var elements = [{
                name: "SSH Session",
                url: shellUrl + "?RouterID=" + node.data("extraData").mgmtIpv4Addresss + "?RouterName=" + node.data("extraData").id
            }].map(function(link) {
                return ce("a", {
                    target: "_blank",
                    href: link.url,
                    class: "button is-link is-small"
                }, [ctn(link.name)]);
            });
            console.log("SSH-URL:" + elements)

            return ce("div", {
                class: "has-text-right"
            }, elements);
        }

        // return link info on click
        function linkInfo(e) {
            return ce("div", {}, []);
        }

        // remove last child
        function removeLastChild() {
            var lastChild = Setting.lastChild;
            if (lastChild.className == "message-body") {
                Setting.removeChild(lastChild);
            }
        }

        // proceed to main only if two files exist
        Promise.all([
                fetch("cy-style.json")
                .then(function(res) {
                    return res.json();
                }),
                fetch("{{.}}")
                .then(function(res) {
                    return res.json();
                })
            ])
            .then(function(dataArray) {


                // cy defintion

                // inital render random
                // var cy = window.cy = cytoscape({
                //  container: document.getElementById("cy"),
                //  style: dataArray[0],
                //  elements: dataArray[1],
                //  layout: { name: "random" }

                // inital render with cola
                var cy = window.cy = cytoscape({
                    container: document.getElementById("cy"),
                    style: dataArray[0],
                    elements: dataArray[1],
                    layout: {
                        name: 'cola',
                        nodeSpacing: 5,
                        edgeLengthVal: 45,
                        animate: true,
                        randomize: false,
                        maxSimulationTime: 1500
                    }
                });

                // slider change event
                var slider = function(e) {
                    var layout = cy.layout({
                        fit: true,
                        name: "cola",
                        animate: true,
                        randomize: false,
                        maxSimulationTime: 1000,
                        edgeLength: function(e) {
                            return edgeLength.value / e.data('weight');
                        },
                        nodeSpacing: function(e) {
                            return nodeSpacing.value / e.data('weight');
                        },
                    });
                    console.log("edgeLength.value: " + edgeLength.value)
                    layout.run();
                }

                var addSliderEvent = function(e) {
                    e.addEventListener("input", slider);
                    e.addEventListener("change", slider);
                }
                addSliderEvent(edgeLength);
                addSliderEvent(nodeSpacing);




                versionText = "Version: "
                versionText = versionText + parsedVersionText

                var tt1 = ce("p", {}, [ctn(" ")]);
                var tt2 = ce("strong", {}, [ctn(versionText)]);

                var tt3 = ce("hr", {class: "my-1 has-background-grey-lighter"}, []);
                var tt4 = ce("p", {}, [ctn("Designed and created by asad.arafat@nokia.com")]);
                var tt5 = ce("p", {}, [ctn("GUI Framework by siva.sivakumar@nokia.com")]);
                var tt6 = ce("hr", {class: "my-1 has-background-grey-lighter"}, []);
                var tt7 = ce("strong", {}, [ctn("Instructions:")]);
                var tt8 = ce("p", {}, [ctn("- To view the attributes of a node or link, simply click on it")]);
                var tt9 = ce("p", {}, [ctn("- To show/hide link endpoint label, click on setting menu")]);
                // var tt10 = ce("p", {}, [ctn("- To tap link with wireshark or to add impairment to link, please download client package")]);
                var tt11 = ce("p", {}, [ctn("- To see further details, please visit https/github.com/asadarafat/topoViewer")]);

                var tname = ce("p", {}, [tt1, tt2, tt3, tt4, tt5, tt6, tt7, tt8, tt9, tt11]);
                var tpanel = ce("div", {}, [tname]);
                var tmessageBody = ce("div", {class: "message-body"}, [tpanel])

                var headerTitle = ce("p", {class: "my-10"}, [ctn("Welcome to TopoViewer")]);
                var messageHeader = ce("div", {class: "message-header"}, [headerTitle])
                var oldSettingHeader = document.getElementById("SettingHeader")
                console.log("messageInit oldSettingHeader: ")
                console.log(oldSettingHeader)

                Setting.replaceChild(messageHeader, oldSettingHeader);
                Setting.appendChild(tmessageBody);
                Setting.className = "message is-small is-link";

                // trigger info panel on node click
                cy.nodes().forEach(function(node) {
                    node.on("click", function(e) {
                        if (!node.isParent()) { //  block of code to be executed if the condition is true
                            if (node.data("extraData").networkName == "ietf-l2-topology") {

                                console.log(node.data("extraData").clabServerUsername)

                                removeLastChild();
                                var headerTitle = ce("p", {class: "my-7"}, [ctn("Node Properties")]);
                                var nodeMessageHeader = ce("div", {class: "message-header"}, [headerTitle]);
                                var oldSettingHeader = Setting.childNodes[1]
                                console.log("oldSettingHeader: ", oldSettingHeader)
                                Setting.replaceChild(nodeMessageHeader, oldSettingHeader);

                                console.log("nodeId: ", node.data("extraData").nodeAttributes.name);
                                label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Node Name: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").nodeAttributes.name)]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var nodeName = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                console.log("Labels: ", node.data("topoviewerRole"));
                                label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Role: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("topoviewerRole"))]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var topoViewerRole = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                console.log("group: ", node.data("extraData").networkName);
                                label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Group: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").networkName)]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var group = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Mgmt. Mac: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData")['nodeAttributes']['management-mac'])]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var managementMac = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Mgmt. Address: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData")['nodeAttributes']['management-address'])]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var managementAddress = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Mgmt. Vlan: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData")['nodeAttributes']['management-vlan'])]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var managementVlan = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Flags: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData")['nodeAttributes']['flags'])]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var flags = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("BridgeID: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData")['nodeAttributes']['bridge-id'])]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var bridgeId = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                var seperator = ce("hr", {lass: "my-3 has-background-grey-lighter"}, []);
                                var addon = ce("div", {}, [nodeInfo(node)]);
                                console.log("addon: ", addon);

                                // addon removed
                                var panel = ce("div", {}, [nodeName, group, bridgeId, managementMac, managementAddress, managementVlan, flags]);

                                var messageBody = ce("div", {class: "message-body"}, [panel])
                                Setting.appendChild(messageBody);
                                Setting.className = "message is-small is-link";
                            } else if (node.data("extraData").networkName == "ietf-l3-unicast-topology") {
                                console.log(node.data("extraData").clabServerUsername)

                                removeLastChild();
                                var headerTitle = ce("p", {
                                    class: "my-7"
                                }, [ctn("Node Properties")]);
                                var nodeMessageHeader = ce("div", {
                                    class: "message-header"
                                }, [headerTitle]);
                                var oldSettingHeader = Setting.childNodes[1]
                                console.log("oldSettingHeader: ", oldSettingHeader)
                                Setting.replaceChild(nodeMessageHeader, oldSettingHeader);

                                console.log("nodeId: ", node.data("extraData").nodeAttributes.name);
                                label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Node Name: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").nodeAttributes.name)]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var nodeName = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                console.log("Labels: ", node.data("topoviewerRole"));
                                label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Role: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("topoviewerRole"))]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var topoViewerRole = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                console.log("group: ", node.data("extraData").networkName);
                                label01 = ce("label", {class: "label has-text-link is-small has-text-right has-text-weight-bold mr-0"}, [ctn("Group: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData").networkName)]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var group = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Router ID: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData")['nodeAttributes']['router-id'])]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var routerId = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Flags: ")]);
                                column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                                label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(node.data("extraData")['nodeAttributes']['flag'])]);
                                column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                                var flags = ce("div", {class: "columns mb-1"}, [column01, column02]);

                                var seperator = ce("hr", {lass: "my-3 has-background-grey-lighter"}, []);
                                var addon = ce("div", {}, [nodeInfo(node)]);
                                console.log("addon: ", addon);

                                var panel = ce("div", {}, [nodeName, group, routerId, flags]);

                                var messageBody = ce("div", {class: "message-body"}, [panel])
                                Setting.appendChild(messageBody);
                                Setting.className = "message is-small is-link";
                            }
                        }
                    });
                });

                // trigger info panel on edge or link click
                cy.edges().forEach(function(edge) {
                    edge.on("click", function(e) {
                        if (edge.data("kind") == "layer2Link") {

                            removeLastChild();


                            var headerTitle = ce("p", {
                                class: "my-7"
                            }, [ctn("Link Properties")]);
                            var linkMessageHeader = ce("div", {
                                class: "message-header"
                            }, [headerTitle]);
                            var oldSettingHeader = Setting.childNodes[1]
                            console.log(oldSettingHeader)
                            Setting.replaceChild(linkMessageHeader, oldSettingHeader);


                            console.log(edge.data("name"))

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Link Name: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-1 is-max-content"}, [ctn(edge.data("name"))]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var name = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Source: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("source") + "::" + edge.data("sourceEndpoint"))]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var source = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Target: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("target") + "::" + edge.data("targetEndpoint"))]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var target = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Rate: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['l2LinkAttributes']['rate'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var rate = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Delay: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['l2LinkAttributes']['delay'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var delay = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Auto-Nego: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['l2LinkAttributes']['auto-nego'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var autoNego = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Duplex: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['l2LinkAttributes']['duplex'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var duplex = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Flags: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['l2LinkAttributes']['flags'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var flags = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("NSP Attribute: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['nspAttributes'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var nspAttribute = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            var seperator = ce("hr", {class: "my-3 has-background-grey-lighter"}, []);
                            var addon = ce("div", {}, [linkInfo(edge)]);
                            var panel = ce("div", {}, [name, source, target, rate, delay, autoNego, duplex, flags, nspAttribute, addon]);

                            var messageBody = ce("div", {
                                class: "message-body"
                            }, [panel])
                            Setting.appendChild(messageBody);
                            Setting.className = "message is-small is-link";
                        } else if (edge.data("kind") == "layer3Link") {

                            removeLastChild();


                            var headerTitle = ce("p", {
                                class: "my-7"
                            }, [ctn("Link Properties")]);
                            var linkMessageHeader = ce("div", {
                                class: "message-header"
                            }, [headerTitle]);
                            var oldSettingHeader = Setting.childNodes[1]
                            console.log(oldSettingHeader)
                            Setting.replaceChild(linkMessageHeader, oldSettingHeader);


                            console.log(edge.data("name"))

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Link Name: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0 is-max-content"}, [ctn(edge.data("extraData")['l3LinkAttributes']['name'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var name = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Source: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("source") + "::" + edge.data("sourceEndpoint"))]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var source = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Target: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("target") + "::" + edge.data("targetEndpoint"))]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var target = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Metric: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['l3LinkAttributes']['metric1'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var metric = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Flags: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['l3LinkAttributes']['flags'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var flags = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("NSP Attribute: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0"}, [ctn(edge.data("extraData")['nspAttributes'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var nspAttribute = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            var seperator = ce("hr", {class: "my-3 has-background-grey-lighter"}, []);
                            var addon = ce("div", {}, [linkInfo(edge)]);

                            var panel = ce("div", {}, [name, source, target, metric, addon]);


                            var messageBody = ce("div", {class: "message-body"}, [panel])
                            Setting.appendChild(messageBody);
                            Setting.className = "message is-small is-link";
                    
                        }else if (edge.data("kind") == "LayerTransportTunnelLink") {

                            removeLastChild();


                            var headerTitle = ce("p", {
                                class: "my-7"
                            }, [ctn("Link Properties")]);
                            var linkMessageHeader = ce("div", {
                                class: "message-header"
                            }, [headerTitle]);
                            var oldSettingHeader = Setting.childNodes[1]
                            console.log(oldSettingHeader)
                            Setting.replaceChild(linkMessageHeader, oldSettingHeader);


                            console.log(edge.data("name"))

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("LSP-Path Name: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0 is-max-content"}, [ctn(edge.data("extraData")["lspPathDetail"]['pathName'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var name = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("LSP-Path Type: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0 is-max-content"}, [ctn(edge.data("extraData")["lspPathDetail"]['pathType'])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var type = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            var hopIndex = parseInt(edge.data("extraData")['pathHopNumber'],10);
                            hopIndex = hopIndex;
                            hopIndex = hopIndex.toString();
                            console.log("hopIndex:" + hopIndex)

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Source IP: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0 is-max-content"}, [ctn(edge.data("extraData")["lspPathDetail"]['recordedHops']["pathHops"]['pathHop'][hopIndex]["postProcessedSourceInterface"]["ipv4Address"]["string"])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var sourceIPv4Address  = ce("div", {class: "columns mb-1"}, [column01, column02]);

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Target IP: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0 is-max-content"}, [ctn(edge.data("extraData")["lspPathDetail"]['recordedHops']["pathHops"]['pathHop'][hopIndex]["ipAddress"]["ipv4Address"]["string"])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var targetIPv4Address  = ce("div", {class: "columns mb-1"}, [column01, column02]);
        

                            label01 = ce("label", {class: "label has-text-link has-text-right is-small has-text-weight-bold mr-0"}, [ctn("Segment Label: ")]);
                            column01 = ce("label", {class: "column is-4 p-1 is-narrow-desktop"}, [label01]);
                            label02 = ce("label", {class: "label has-text-link is-small has-text-left has-text-weight-normal mr-0 is-max-content"}, [ctn(edge.data("extraData")["lspPathDetail"]['recordedHops']["pathHops"]['pathHop'][hopIndex]["segmentLabel"])]);
                            column02 = ce("label", {class: "column is-8 p-1"}, [label02]);
                            var segmentLabel  = ce("div", {class: "columns mb-1"}, [column01, column02]);
        
                            var seperator = ce("hr", {class: "my-3 has-background-grey-lighter"}, []);
                            var addon = ce("div", {}, [linkInfo(edge)]);

                            var panel = ce("div", {}, [name, type, segmentLabel, sourceIPv4Address, targetIPv4Address, addon]);

                            var messageBody = ce("div", {class: "message-body"}, [panel])
                            Setting.appendChild(messageBody);
                            Setting.className = "message is-small is-link";
                        }
                    });
                });

                // filter topoViewerNode and hide it
                topoViewerNode = cy.filter('node[name = "topoviewer"]');
                topoViewerNode.remove()


                // remove info panel on node or edge unselect
                cy.on("tap", function(e) {
                    if (e.target === cy) {
                        Setting.className = "message is-hidden";
                        removeLastChild();
                    }
                });
            });

        function updateEdgeColorTelemetry() {
            Srl01Edge = cy.filter('edge[source = "srl-01"][target = "sros-01"]');
            Srl01Edge.style("line-color", "red")
            Srl01Edge.style("label", websocketMessage.data + " kbps")
            Srl01Edge.style("text-background-padding", "0.1")
            Srl01Edge.style("text-outline-color", "#F2F2F2")
            Srl01Edge.style("text-outline-width", "0.3px")

            Srl01Edge.style("line-fill", "linear-gradient")
            Srl01Edge.style("line-gradient-stop-colors", ['blue', 'green', 'yellow', 'red'])
            Srl01Edge.style("line-gradient-stop-positions", ['25%', '40%', '50%', '100%'])
        }

        function showNodeIcon() {
            peNodesTest = cy.filter('node[name = "datacenter"]');
            console.log(peNodesTest)
            peNodesTest.style("background-image", "images/clab-pe-router-light-gray.png")

            peNodesAsad = cy.nodes('node[topoviewerRole = "parent"]');
            console.log(peNodesAsad)
            peNodesAsad.style("background-image", "images/clab-pe-dark-blue.png")
        }

        var linkEndpointVisibility = false

        function toggleLinkEndpoint() {
            if (linkEndpointVisibility) {
                cy.edges().forEach(function(edge) {
                    edge.style('source-label', " ")
                    edge.style('target-label', " ")
                    linkEndpointVisibility = false
                })
            } else {
                cy.edges().forEach(function(edge) {
                    edge.style('source-label', edge.data("sourceEndpoint"))
                    edge.style('target-label', edge.data("targetEndpoint"))
                    linkEndpointVisibility = true
                })
            }
        }

        function alignLayer() {
            function filterL2Nodes(node) {
                return node.data("parent") === 'ietf-l2-topology'; // Filter nodes with category 'A'
            }

            function filterL3Nodes(node) {
                return node.data("id").includes("L3-"); // Filter nodes with category 'A'
            }
            function filterLspNodes(node) {
                return node.data("id").includes("LSP-"); 
            }

            // Filter nodes based on the defined function
            var l2Nodes = cy.nodes().filter(filterL2Nodes);

            // Filter nodes based on the defined function
            var l3Nodes = cy.nodes().filter(filterL3Nodes);

            // Filter nodes based on the defined function
            var lspNodes = cy.nodes().filter(filterLspNodes);


            

            // Iterate through the filtered nodes
            l2Nodes.forEach(node2 => {
                // Perform an action on each filtered node
                l3Nodes.forEach(node3 => {
                    // Perform an action on each filtered node
                    node2Name = (node2.data("extraData").nodeAttributes.name);
                    node3Name = (node3.data("extraData").nodeAttributes.name);

                    if (node2Name === node3Name) {
                        // Action to take when a match is found
                        // You can perform any action here
                        refereceNodePosition = node2.position();
                        var node2NameOffsetX = 0;
                        var node2NameOffsetY = -200;
                        var newPosition = {
                            x: refereceNodePosition.x + node2NameOffsetX,
                            y: refereceNodePosition.y + node2NameOffsetY
                        }
                        node3.position(newPosition)

                    }
                });
            lspNodes.forEach(nodeLSP => {
                node2Name = (node2.data("extraData").nodeID);
                nodeLSPName = (nodeLSP.data("extraData").nodeAttributes.routerId.dottedQuad.string);
                
                console.log ("node2Name: " + node2Name)
                console.log ("nodeLSPName: " + nodeLSPName)
                if (node2Name === nodeLSPName) {
                    refereceNodePosition = node2.position();
                    var node2NameOffsetX = 0;
                    var node2NameOffsetY = 0;
                    var newPosition = {
                        x: refereceNodePosition.x + node2NameOffsetX,
                        y: refereceNodePosition.y + node2NameOffsetY
                    }
                    nodeLSP.position(newPosition)
                }
            });
            });
            console.log("l2Nodes.length: " + l2Nodes.length)
            console.log("l3Nodes.length: " + l2Nodes.length)
        }

        function updateUrl(asad) {
            var button = document.getElementById("onSubmit")
            console.log(button)
            console.log("delay-value: ", document.getElementById("delay").value)
            button.href = linkImpairmentUrl + "?" + document.getElementById("delay").value + "?" + document.getElementById("jitter").value + "?" + document.getElementById("rate").value + "?" + document.getElementById("loss").value + "?" + document.getElementById("duration").value
        }      
      </script>
  </body>
</html>