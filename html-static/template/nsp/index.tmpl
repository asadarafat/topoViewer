<!DOCTYPE html>
<!-- This code is for demonstration purposes only.  You should not hotlink to Github, Rawgit, or files from the Cytoscape.js documentation in your production apps. -->
<html>

<head>
  <meta charset=utf-8 />
  <meta name="viewport" content="user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, minimal-ui">

  <title>Topology Viewer</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="./css/style.css" />

  <!-- libs used in cytoscape-libs -->
  <script src="/cytoscape/libs/popper.js"></script>
  <script src="/cytoscape/libs/cola.min.js"></script>
  <!-- <script src="https://unpkg.com/webcola@3.3.8/WebCola/cola.min.js"></script> -->
  <!-- <script src="https://unpkg.com/popper.js@1.14.4/dist/umd/popper.js"></script> -->


  <!-- cytoscape-libs -->
  <script src="/cytoscape/libs/lodash.min.js"></script>
  <script src="/cytoscape/libs/tippy.all.js"></script>
  <script src="/cytoscape/libs/cytoscape.min.js"></script>
  <script src="/cytoscape/libs/cytoscape-cola.js"></script>
  <script src="/cytoscape/libs/cytoscape-popper.js"></script>


  <!-- demo src-->
  <!-- <script src="./cytoscape/code.js"></script> -->

  <script type="text/javascript">
    /* global Promise, fetch, window, cytoscape, document, tippy, _ */

    //server URL
    serverUrl = location.protocol + '//' + location.host;
    console.log(serverUrl);

    Promise.all([
        fetch('cy-style.json')
        .then(function (res) {
          return res.json();
        }),
        fetch('{{.}}')
        .then(function (res) {
          console.log(res)
          return res.json();
        })
      ])
      .then(function (dataArray) {
        var h = function (tag, attrs, children) {
          var el = document.createElement(tag);
          Object.keys(attrs).forEach(function (key) {
            var val = attrs[key];
            el.setAttribute(key, val);
          });
          children.forEach(function (child) {
            el.appendChild(child);
          });
          // console.log(el)
          return el;
        };

        var t = function (text) {
          var el = document.createTextNode(text);
          // console.log(el)
          return el;
        };

        var $ = document.querySelector.bind(document);

        var cy = window.cy = cytoscape({
          container: document.getElementById('cy'),
          style: dataArray[0],
          elements: dataArray[1],
          layout: {
            name: 'random'
          }
        });

        var params = {
          name: 'cola',
          nodeSpacing: 5,
          nodeSpacingAsad: 10,
          edgeLengthVal: 45,
          animate: true,
          randomize: false,
          maxSimulationTime: 1500
        };
        var layout = makeLayout();
        layout.run();

        var $btnParam = h('div', {
          'class': 'param'
        }, []);

        var $config = $('#config');
        $config.appendChild($btnParam);

        var sliders = [{
            label: 'Edge length',
            param: 'edgeLengthVal',
            min: 1,
            max: 200
          },

          {
            label: 'Node spacing',
            param: 'nodeSpacing',
            min: 1,
            max: 50
          },

          {
            label: 'Placeholder',
            param: 'Placeholder',
            min: 1,
            max: 500
          }
        ];

        var buttons = [{
            label: h('span', {
              'class': 'fa fa-random'
            }, []),
            layoutOpts: {
              randomize: true,
              flow: null
            }
          },
          {
            label: h('span', {
              'class': 'fa fa-long-arrow-down'
            }, []),
            layoutOpts: {
              flow: {
                axis: 'y',
                minSeparation: 30
              }
            }
          }
        ];

        // button for BgpLU link
        var buttonsBgpLuLink = [{
          label: h('span', {
            'class': 'fa fa-check-square'
          }, []),
          layoutOpts: {
            flow: {
              axis: 'y',
              minSeparation: 30
            }
          }
        }];

        sliders.forEach(makeSlider);
        buttons.forEach(makeButton);
        buttonsBgpLuLink.forEach(makeButtonBgpLuLink);

        function makeLayout(opts) {
          params.randomize = false;
          params.edgeLength = function (e) {
            return params.edgeLengthVal / e.data('weight');
          };
          for (var i in opts) {
            params[i] = opts[i];
          }
          return cy.layout(params);
        }

        function makeSlider(opts) {
          var $input = h('input', {
            id: 'slider-' + opts.param,
            type: 'range',
            min: opts.min,
            max: opts.max,
            step: 1,
            value: params[opts.param],
            'class': 'slider'
          }, []);

          var $param = h('div', {
            'class': 'param'
          }, []);

          var $label = h('label', {
            'class': 'label label-default',
            for: 'slider-' + opts.param
          }, [t(opts.label)]);

          $param.appendChild($label);
          $param.appendChild($input);

          $config.appendChild($param);

          var update = _.throttle(function () {
            params[opts.param] = $input.value;
            layout.stop();
            layout = makeLayout();
            layout.run();
          }, 1000 / 30);

          $input.addEventListener('input', update);
          $input.addEventListener('change', update);
        }

        function makeButton(opts) {
          var $button = h('button', {
            'class': 'btn btn-default',
            'title': "Auto Layout"
          }, [opts.label]);

          $btnParam.appendChild($button);

          $button.addEventListener('click', function () {
            layout.stop();

            if (opts.fn) {
              opts.fn();
            }

            layout = makeLayout(opts.layoutOpts);
            layout.run();
          });
        }

        bgpLuLink = cy.filter('edge[group = "bgpLu"]');
        //var bgpLuLink = cy.edges();
        console.log('bgpLuLink');
        console.log(bgpLuLink);

        var bgpLuLinkVisibiliy = true

        function makeButtonBgpLuLink(opts) {
          var $buttonsBgpLuLink = h('button', {
            'class': 'btn btn-default',
            'title': "Toggle show BGP-LU Link-Tunnel"
          }, [opts.label]);
          $btnParam.appendChild($buttonsBgpLuLink);
          $buttonsBgpLuLink.addEventListener('click', function () {
            layout.stop();

            if (bgpLuLinkVisibiliy) {
              bgpLuLink.remove()
              bgpLuLinkVisibiliy = false
              console.log('bgpLuLinkVisibiliy: ' + bgpLuLinkVisibiliy);
            } else {
              bgpLuLink.restore()
              bgpLuLinkVisibiliy = true
              console.log('bgpLuLinkVisibiliy: ' + bgpLuLinkVisibiliy);
            }
          });
        }

        var makeTippy = function (elementEdgeNode, html) {
          return tippy(elementEdgeNode.popperRef(), {
            html: html,
            trigger: 'manual',
            arrow: 'Round',
            placement: 'right-end',
            hideOnClick: false,
            interactive: true
          }).tooltips[0];
        };

        var hideTippy = function (elementEdgeNode) {
          var tippy = elementEdgeNode.data('tippy');
          if (tippy != null) {
            tippy.hide();
          }
        };


        var hideAllTippies = function () {
          cy.nodes().forEach(hideTippy);
        };

        var hideAllTippiesEdges = function () {
          cy.edges().forEach(hideTippy);
        };

        cy.on('tap', function (e) {
          if (e.target === cy) {
            hideAllTippies();
            hideAllTippiesEdges();
          }
        });

        cy.on('tap', 'edge', function (e) {
          hideAllTippies();
        });

        cy.on('zoom pan', function (e) {
          hideAllTippies();
        });

        cy.nodes().forEach(function (n) {
          var g = n.data('name');
          // console.log(n)
          // console.log(n.data('name'))
          // console.log(n.jsons())
          // console.log(n.data('ExtraData').MgmtIPv4Address)

          var $links = [{
              name: 'Open SSH Session',
              url: serverUrl + '/cloudshell/?RouterID=' + n.data('ExtraData').MgmtIPv4Address
            },
            {
              name: 'Node Kind: ' + n.data('ExtraData').Kind
              // url: 'http://www.uniprot.org/uniprot/?query='+ g +'&fil=organism%3A%22Homo+sapiens+%28Human%29+%5B9606%5D%22&sort=score'
            }
          ].map(function (link) {
            return h('a', {
              target: '_blank',
              href: link.url,
              'class': 'tip-link'
            }, [t(link.name)]);
          });

          var tippy = makeTippy(n, h('div', {}, $links));
          n.data('tippy', tippy);
          n.on('click', function (e) {
            tippy.show();
            cy.nodes().not(n).forEach(hideTippy);
            cy.edges().not(n).forEach(hideTippy);

          });
        });

        cy.edges().forEach(function (n) {
          var g = n.data('name');
          // console.log(n)
          // console.log(n.data('name'))
          // console.log(n.jsons())
          // console.log(n.data('ExtraData').MgmtIPv4Address)
          var $links = [{
              name: 'Add Link Latency',
              url: 'ssh://admin@' + n.data('ExtraData').MgmtIPv4Address
            },
            {
              name: 'WireShark Capture Endpoint-A: ' + n.data('ExtraData').SourceLongName + '--' + n.data(
                'ExtraData').Endpoints.SourceEndpoint,
              url: 'clab-capture://' + n.data('ExtraData').ClabServerUsername + '@' + location.host + '?' + n
                .data('ExtraData').SourceLongName + '?' + n.data('ExtraData').Endpoints.SourceEndpoint
            },
            {
              name: 'WireShark Capture Endpoint-B: ' + n.data('ExtraData').TargetLongName + '--' + n.data(
                'ExtraData').Endpoints.TargetEndpoint,
              url: 'clab-capture://' + n.data('ExtraData').ClabServerUsername + '@' + location.host + '?' + n
                .data('ExtraData').TargetLongName + '?' + n.data('ExtraData').Endpoints.TargetEndpoint
            },
            {
              name: 'Link Type: ' + n.data('routerType'),
              url: 'http://www.uniprot.org/uniprot/?query=' + g +
                '&fil=organism%3A%22Homo+sapiens+%28Human%29+%5B9606%5D%22&sort=score'
            }
          ].map(function (link) {
            return h('a', {
              target: '_blank',
              href: link.url,
              'class': 'tip-link'
            }, [t(link.name)]);
          });

          var tippy = makeTippy(n, h('div', {}, $links));
          n.data('tippy', tippy);
          n.on('click', function (e) {
            tippy.show();
            cy.edges().not(n).forEach(hideTippy);
            cy.nodes().not(n).forEach(hideTippy);
          });
        });
        $('#config-toggle').addEventListener('click', function () {
          $('body').classList.toggle('config-closed');
          cy.resize();
        });
      });
  </script>


</head>

<body>
  <div id="cy"></div>
  <span class="fa fa-bars config-toggle" id="config-toggle"></span>
  <div id="config" class="config">
    <div class="preamble">
      <span class="label label-info">Topology Viewer '{{.}}'</span>
      <p>This is a prototype of a Network Topology Viewer that uses Cola.js for layout and Cytoscape.js for its graph
        model and visualisation.
        Use the controls below to alter the Cola.js layout parameters.</p>
      <p>
        Data by <a href="https://www.nokia.com/networks/products/network-services-platform/">Nokia NSP</a><br />
        Visualisation by <a href="http://js.cytoscape.org">Cytoscape.js</a><br />
        Layout by <a href="http://marvl.infotech.monash.edu/webcola/">Cola.js</a>
      </p>
    </div>
  </div>
</body>

</html>